; OM File Header - Saved 2024/02/06 13:56:41
; (7.01 :patc (om-make-point 960 52) (om-make-point 50 50) (om-make-point 1425 705) "" 183 0 "2023/08/02 10:28:14" "2023/08/21 13:16:49")
; End File Header
; External resources 
; (list (list (quote :midi) "#P\"../../../../stagnation/midi outs/sheppard 1.3+.mid\"" "#P\"../../../../stagnation/midi outs/sheppard 1.2+.mid\"" "#P\"../../../../stagnation/midi outs/sheppard 1.1+.mid\"" "#P\"../../../../stagnation/midi outs/fisherman +0.mid\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "two midi tracks to one xml" (quote ((let ((box (om-load-editor-box1 "sheppard 1.3+.mid" (quote midifile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 394 37) (om-make-point 50 72) (let ((newobj (load-midi (om-make-pathname :directory (quote (:absolute "Users" "samdvorin" "Desktop" "stagnation" "midi outs")) :device nil :host nil :name "sheppard 1.3+" :type "mid")))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "sheppard 1.3+.mid") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems winpos winsize mode grillestep notechancolor? cmnpref obj-mode zoom deltapict player outport)) (list nil (quote t) (om-make-point 10 40) (om-make-point 370 280) 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 1 (om-make-point 0 0) (quote :midi-player) 0)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "sheppard 1.2+.mid" (quote midifile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 694 45) (om-make-point 50 72) (let ((newobj (load-midi (om-make-pathname :directory (quote (:absolute "Users" "samdvorin" "Desktop" "stagnation" "midi outs")) :device nil :host nil :name "sheppard 1.2+" :type "mid")))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "sheppard 1.2+.mid") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems winpos winsize mode grillestep notechancolor? cmnpref obj-mode zoom deltapict player outport)) (list nil (quote t) (om-make-point 10 40) (om-make-point 370 280) 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 1 (om-make-point 0 0) (quote :midi-player) 0)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "sheppard 1.1+.mid" (quote midifile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 947 39) (om-make-point 50 72) (let ((newobj (load-midi (om-make-pathname :directory (quote (:absolute "Users" "samdvorin" "Desktop" "stagnation" "midi outs")) :device nil :host nil :name "sheppard 1.1+" :type "mid")))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "sheppard 1.1+.mid") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems winpos winsize mode grillestep notechancolor? cmnpref obj-mode zoom deltapict player outport)) (list nil (quote t) (om-make-point 10 40) (om-make-point 370 280) 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 1 (om-make-point 0 0) (quote :midi-player) 0)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE 7" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 961 136) (om-make-point 111 53) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (199/4 (((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-1 (1 (-7 1)) 2.0)) ((4 4) (1.0 (1 (1.0 3)) 1.0 (1 (2.0 4)))) ((4 4) ((1 (4.0 3)) 2.0 (1 (7.0 1)))) ((4 4) (2.0 (1 (3.0 3 1)) (1 (4.0 2)))) ((4 4) ((1 (1.0 1)) (1 (3.0 1)) (1 (1.0 3 3)) 1)) ((4 4) (1.0 (1 (7.0 1)) 2.0)) ((4 4) ((1 (3.0 4)) (1 (4.0 2)) (1 (7.0 1)) 1.0)) ((4 4) (1.0 (1 (3.0 4)) (1 (1.0 3)) (1 (1.0 1)))) ((4 4) ((1 (3.0 1)) (1 (4.0 3)) 2.0)) ((4 4) (1.0 (1 (2.0 4)) 2.0)) ((4 4) (1.0 (1 (1.0 7)) 1.0 (1 (4.0 3)))) ((4 4) (1.0 (1 (2.0 3 3)) (1 (4.0 3 1)) 1.0)) ((4 4) ((1 (4.0 3)) (1 (3.0 4)) (1 (4.0 2)) 1.0)) ((4 4) (3.0 (1 (4.0 2)))) ((4 4) ((1 (7.0 1)) (1 (2.0 4)) 1.0 1)) ((4 4) ((1 (4.0 2)) 2.0 (1 (1.0 4 1.0)))) ((4 4) ((1 (3.0 4)) (1 (1.0 3)) 1.0 (1 (3.0 1)))) ((4 4) ((1 (1.0 4 1.0)) (1 (4.0 1.0 1)) 1.0 (1 (1.0 6 1)))) ((4 4) ((1 (2.0 4)) 2.0 (1 (4.0 2)))) ((4 4) (2.0 (1 (1.0 4 1.0)) (1 (4.0 1.0 1)))) ((4 4) (2.0 (1 (2.0 4)) (1 (1.0 4 1.0)))) ((4 4) ((1 (4.0 1.0 1)) (1 (4.0 2)) (1 (7.0 1)) 1.0)) ((4 4) (1.0 (1 (3.0 4)) (1 (4.0 2)) 1.0)) ((4 4) (1.0 (1 (1.0 4 1.0)) (1 (4.0 1.0 1)) (1 (1.0 3)))) ((4 4) ((1 (1.0 1)) (1 (2.0 4)) 1.0 (1 (4.0 1.0 1)))) ((3 4) (1.0 (1 (1.0 7)) (1 (3.0 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8000 7300 6800 6300)) :ldur (quote (75 75 75 75)) :lvel (quote (50 50 68 51)) :loffset (quote (0 0 0 0)) :lchan (quote (3 3 3 3))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (450)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (400)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (257)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (75)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (257)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (86)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300 6100)) :ldur (quote (200 200)) :lvel (quote (51 54)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (300)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (150)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (257)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (257)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (600)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (75)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (343)) :lvel (quote (54)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (200)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (75)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (343)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (450)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (300)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (150)) :lvel (quote (54)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (257)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (400)) :lvel (quote (54)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (525)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (257)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (225)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (225)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (225)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (75)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (257)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (343)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (200)) :lvel (quote (54)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (200)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (75)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (400)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (600)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (200)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (400)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (343)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (450)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (150)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (400)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (100)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (450)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (75)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (400)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (200)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (400)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (100)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (400)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (400)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (100)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (200)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (75)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (343)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (200)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (400)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (100)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (450)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (300)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (400)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (100)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (525)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 100) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 1257 560) (om-make-point 400 44) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 41 45) (quote "+50$") "" (om-make-point 1012 64) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE 6" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 959 215) (om-make-point 111 53) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (199/4 (((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-1 (1 (-7 1)) 2.0)) ((4 4) (1.0 (1 (1.0 3)) 1.0 (1 (2.0 4)))) ((4 4) ((1 (4.0 3)) 2.0 (1 (7.0 1)))) ((4 4) (2.0 (1 (3.0 3 1)) (1 (4.0 2)))) ((4 4) ((1 (1.0 1)) (1 (3.0 1)) (1 (1.0 3 3)) 1)) ((4 4) (1.0 (1 (7.0 1)) 2.0)) ((4 4) ((1 (3.0 4)) (1 (4.0 2)) (1 (7.0 1)) 1.0)) ((4 4) (1.0 (1 (3.0 4)) (1 (1.0 3)) (1 (1.0 1)))) ((4 4) ((1 (3.0 1)) (1 (4.0 3)) 2.0)) ((4 4) (1.0 (1 (2.0 4)) 2.0)) ((4 4) (1.0 (1 (1.0 7)) 1.0 (1 (4.0 3)))) ((4 4) (1.0 (1 (2.0 3 3)) (1 (4.0 3 1)) 1.0)) ((4 4) ((1 (4.0 3)) (1 (3.0 4)) (1 (4.0 2)) 1.0)) ((4 4) (3.0 (1 (4.0 2)))) ((4 4) ((1 (7.0 1)) (1 (2.0 4)) 1.0 1)) ((4 4) ((1 (4.0 2)) 2.0 (1 (1.0 4 1.0)))) ((4 4) ((1 (3.0 4)) (1 (1.0 3)) 1.0 (1 (3.0 1)))) ((4 4) ((1 (1.0 4 1.0)) (1 (4.0 1.0 1)) 1.0 (1 (1.0 6 1)))) ((4 4) ((1 (2.0 4)) 2.0 (1 (4.0 2)))) ((4 4) (2.0 (1 (1.0 4 1.0)) (1 (4.0 1.0 1)))) ((4 4) (2.0 (1 (2.0 4)) (1 (1.0 4 1.0)))) ((4 4) ((1 (4.0 1.0 1)) (1 (4.0 2)) (1 (7.0 1)) 1.0)) ((4 4) (1.0 (1 (3.0 4)) (1 (4.0 2)) 1.0)) ((4 4) (1.0 (1 (1.0 4 1.0)) (1 (4.0 1.0 1)) (1 (1.0 3)))) ((4 4) ((1 (1.0 1)) (1 (2.0 4)) 1.0 (1 (4.0 1.0 1)))) ((3 4) (1.0 (1 (1.0 7)) (1 (3.0 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8050 7350 6850 6350)) :ldur (quote (75 75 75 75)) :lvel (quote (50 50 68 51)) :loffset (quote (0 0 0 0)) :lchan (quote (3 3 3 3))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (450)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (400)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (257)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (75)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (257)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (86)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6350 6150)) :ldur (quote (200 200)) :lvel (quote (51 54)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (300)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6550)) :ldur (quote (150)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5950)) :ldur (quote (257)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5250)) :ldur (quote (257)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5950)) :ldur (quote (600)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5250)) :ldur (quote (75)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5950)) :ldur (quote (343)) :lvel (quote (54)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5950)) :ldur (quote (200)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5850)) :ldur (quote (75)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5950)) :ldur (quote (343)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6150)) :ldur (quote (450)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6350)) :ldur (quote (300)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (150)) :lvel (quote (54)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6650)) :ldur (quote (257)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6050)) :ldur (quote (400)) :lvel (quote (54)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5250)) :ldur (quote (525)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6450)) :ldur (quote (257)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5250)) :ldur (quote (225)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6550)) :ldur (quote (225)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5250)) :ldur (quote (225)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6450)) :ldur (quote (75)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6450)) :ldur (quote (257)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6050)) :ldur (quote (343)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5250)) :ldur (quote (200)) :lvel (quote (54)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (200)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5250)) :ldur (quote (75)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6350)) :ldur (quote (400)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6350)) :ldur (quote (600)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5250)) :ldur (quote (200)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6550)) :ldur (quote (400)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6450)) :ldur (quote (343)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6550)) :ldur (quote (450)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6350)) :ldur (quote (150)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (400)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6550)) :ldur (quote (100)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5250)) :ldur (quote (450)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6450)) :ldur (quote (75)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5250)) :ldur (quote (400)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (200)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6350)) :ldur (quote (400)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6550)) :ldur (quote (100)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5250)) :ldur (quote (400)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6550)) :ldur (quote (400)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5250)) :ldur (quote (100)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5850)) :ldur (quote (200)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5850)) :ldur (quote (75)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5850)) :ldur (quote (343)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5850)) :ldur (quote (200)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5850)) :ldur (quote (400)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6350)) :ldur (quote (100)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5250)) :ldur (quote (450)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5250)) :ldur (quote (300)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5550)) :ldur (quote (400)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6350)) :ldur (quote (100)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (525)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 100) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 1257 560) (om-make-point 400 44) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 3" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 50))) (om-make-point 1105 200) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE 5" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 708 146) (om-make-point 111 53) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (50 (((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-1 (1 (-7 1)) (1 (3.0 1)) 1.0)) ((4 4) (1 (1 (1.0 3)) 1.0 (1 (2.0 4)))) ((4 4) ((1 (4.0 3)) 1.0 (1 (2.0 3 3)) (1 (1.0 3 3 1)))) ((4 4) (1.0 (1 (1.0 4 1.0)) (1 (3 3 1)) (1 (4.0 2)))) ((4 4) ((1 (1.0 3 4)) (1 (3.0 3 2)) (1 (1.0 3 3)) (1 (3 4)))) ((4 4) ((1 (1.0 3)) (1 (1.0 6 1)) (1 (3.0 3 2)) (1 (1.0 4 1.0)))) ((4 4) ((1 (3 3 1)) (1 (4.0 2)) (1 (7.0 1)) 1.0)) ((4 4) (1.0 (1 (3 4)) (1 (2.0 3 3)) (1 (1.0 1)))) ((4 4) ((1 (3.0 1)) (1 (4.0 3)) 2)) ((4 4) (1.0 (1 (2.0 4)) 2.0)) ((4 4) ((1 (4.0 2)) (1 (1.0 7)) (1 (2.0 4)) (1 (4.0 3)))) ((4 4) (1 (1 (2.0 3 3)) (1 (4.0 3 1)) 1.0)) ((4 4) ((1 (4.0 3)) (1 (3.0 4)) (1 (4.0 2)) 1.0)) ((4 4) ((1 (2.0 4)) 1.0 1 (1 (4.0 2)))) ((4 4) ((1 (7.0 1)) 1.0 (1 (4.0 3)) (1 (4 1.0 1)))) ((4 4) ((1 (4.0 2)) 2.0 (1 (1.0 4 1.0)))) ((4 4) ((1 (3.0 4)) (1 (1.0 3)) 1.0 (1 (3.0 1)))) ((4 4) ((1 (1.0 4 1.0)) (1 (4.0 1.0 1)) 1.0 (1 (1.0 6 1)))) ((4 4) ((1 (2.0 4)) 1.0 (1 (3.0 4)) (1 (1.0 3)))) ((4 4) (1.0 (1 (2.0 4)) (1 (1.0 4 1.0)) (1 (3.0 3 1)))) ((4 4) (2.0 (1 (2.0 4)) (1 (1.0 3 3)))) ((4 4) ((1 (3.0 4)) (1 (4.0 2)) (1 (4.0 3 1)) 1.0)) ((4 4) ((1 (4.0 3)) (1 (3.0 3 1)) (1 (2.0 3 3)) (1 (7.0 1)))) ((4 4) ((1 (2.0 4)) (1 (1.0 4 1.0)) (1 (4.0 1.0 1)) (1 (1.0 3)))) ((4 4) ((1 (4.0 3 1)) (1 (2.0 4)) 1.0 (1 (4.0 1.0 1)))) ((4 4) ((1 (4.0 2)) (1 (1.0 3 4)) 1.0 (1 (1.0 -4 -1.0))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6300 4700 4000)) :ldur (quote (75 75 75)) :lvel (quote (51 98 65)) :loffset (quote (0 0 0)) :lchan (quote (3 3 3))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (150)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (600)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (450)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (400)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (257)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (225)) :lvel (quote (79)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (225)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (225)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (225)) :lvel (quote (81)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 4100)) :ldur (quote (75 75)) :lvel (quote (52 69)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (400)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (257)) :lvel (quote (79)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (257)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (86)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300 6100 4800)) :ldur (quote (200 200 200)) :lvel (quote (51 54 59)) :loffset (quote (0 0 0)) :lchan (quote (3 3 3))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (225)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 5000)) :ldur (quote (300 300)) :lvel (quote (53 61)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600 4200)) :ldur (quote (225 225)) :lvel (quote (81 65)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (150)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (257)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (257)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 4000)) :ldur (quote (257 257)) :lvel (quote (55 66)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (343)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (450)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (450)) :lvel (quote (82)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (75)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (225)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (150)) :lvel (quote (79)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (400)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (257)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (257)) :lvel (quote (54)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (86)) :lvel (quote (83)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (200)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800 5000)) :ldur (quote (75 75)) :lvel (quote (58 56)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (257)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (343)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (225)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (225)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300 4700)) :ldur (quote (300 300)) :lvel (quote (51 111)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 4000)) :ldur (quote (150 150)) :lvel (quote (54 62)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (257)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (1200)) :lvel (quote (105)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (400)) :lvel (quote (54)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (200)) :lvel (quote (88)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200 4200)) :ldur (quote (525 525)) :lvel (quote (52 76)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (400)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (257)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (600)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200 3900)) :ldur (quote (225 225)) :lvel (quote (62 76)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (225)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (225)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (75)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (257)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 4900)) :ldur (quote (343 343)) :lvel (quote (55 57)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (200)) :lvel (quote (54)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (400)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (600)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (200)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300 5200 4700)) :ldur (quote (75 75 75)) :lvel (quote (50 53 59)) :loffset (quote (0 0 0)) :lchan (quote (3 3 3))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (257)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (400)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (100)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (200)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500 4300)) :ldur (quote (400 400)) :lvel (quote (50 55)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 4000)) :ldur (quote (343 343)) :lvel (quote (50 64)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (450)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (150)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (400)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (100)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200 4200)) :ldur (quote (450 450)) :lvel (quote (53 68)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (75)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (400)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (343)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (450)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (400)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (400)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (257)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (86)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (400)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (257)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (257)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200 4300)) :ldur (quote (343 343)) :lvel (quote (51 53)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (200)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (225)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (75)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900 4200)) :ldur (quote (257 257)) :lvel (quote (54 53)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (257)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (86)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (225)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (225)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (75)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (400)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (400)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (100)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (450)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (225)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (75)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500 4300)) :ldur (quote (400 400)) :lvel (quote (55 51)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (100)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (200)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (225)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (300)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 100) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 1257 560) (om-make-point 400 44) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 41 45) (quote "+50$") "" (om-make-point 759 74) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE 4" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 706 225) (om-make-point 111 53) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (50 (((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-1 (1 (-7 1)) (1 (3.0 1)) 1.0)) ((4 4) (1 (1 (1.0 3)) 1.0 (1 (2.0 4)))) ((4 4) ((1 (4.0 3)) 1.0 (1 (2.0 3 3)) (1 (1.0 3 3 1)))) ((4 4) (1.0 (1 (1.0 4 1.0)) (1 (3 3 1)) (1 (4.0 2)))) ((4 4) ((1 (1.0 3 4)) (1 (3.0 3 2)) (1 (1.0 3 3)) (1 (3 4)))) ((4 4) ((1 (1.0 3)) (1 (1.0 6 1)) (1 (3.0 3 2)) (1 (1.0 4 1.0)))) ((4 4) ((1 (3 3 1)) (1 (4.0 2)) (1 (7.0 1)) 1.0)) ((4 4) (1.0 (1 (3 4)) (1 (2.0 3 3)) (1 (1.0 1)))) ((4 4) ((1 (3.0 1)) (1 (4.0 3)) 2)) ((4 4) (1.0 (1 (2.0 4)) 2.0)) ((4 4) ((1 (4.0 2)) (1 (1.0 7)) (1 (2.0 4)) (1 (4.0 3)))) ((4 4) (1 (1 (2.0 3 3)) (1 (4.0 3 1)) 1.0)) ((4 4) ((1 (4.0 3)) (1 (3.0 4)) (1 (4.0 2)) 1.0)) ((4 4) ((1 (2.0 4)) 1.0 1 (1 (4.0 2)))) ((4 4) ((1 (7.0 1)) 1.0 (1 (4.0 3)) (1 (4 1.0 1)))) ((4 4) ((1 (4.0 2)) 2.0 (1 (1.0 4 1.0)))) ((4 4) ((1 (3.0 4)) (1 (1.0 3)) 1.0 (1 (3.0 1)))) ((4 4) ((1 (1.0 4 1.0)) (1 (4.0 1.0 1)) 1.0 (1 (1.0 6 1)))) ((4 4) ((1 (2.0 4)) 1.0 (1 (3.0 4)) (1 (1.0 3)))) ((4 4) (1.0 (1 (2.0 4)) (1 (1.0 4 1.0)) (1 (3.0 3 1)))) ((4 4) (2.0 (1 (2.0 4)) (1 (1.0 3 3)))) ((4 4) ((1 (3.0 4)) (1 (4.0 2)) (1 (4.0 3 1)) 1.0)) ((4 4) ((1 (4.0 3)) (1 (3.0 3 1)) (1 (2.0 3 3)) (1 (7.0 1)))) ((4 4) ((1 (2.0 4)) (1 (1.0 4 1.0)) (1 (4.0 1.0 1)) (1 (1.0 3)))) ((4 4) ((1 (4.0 3 1)) (1 (2.0 4)) 1.0 (1 (4.0 1.0 1)))) ((4 4) ((1 (4.0 2)) (1 (1.0 3 4)) 1.0 (1 (1.0 -4 -1.0))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6350 4750 4050)) :ldur (quote (75 75 75)) :lvel (quote (51 98 65)) :loffset (quote (0 0 0)) :lchan (quote (3 3 3))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4150)) :ldur (quote (150)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4050)) :ldur (quote (600)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (450)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (400)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (257)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4250)) :ldur (quote (225)) :lvel (quote (79)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5150)) :ldur (quote (225)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4850)) :ldur (quote (225)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4550)) :ldur (quote (225)) :lvel (quote (81)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250 4150)) :ldur (quote (75 75)) :lvel (quote (52 69)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5150)) :ldur (quote (400)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4150)) :ldur (quote (257)) :lvel (quote (79)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (257)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (86)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6350 6150 4850)) :ldur (quote (200 200 200)) :lvel (quote (51 54 59)) :loffset (quote (0 0 0)) :lchan (quote (3 3 3))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4350)) :ldur (quote (225)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250 5050)) :ldur (quote (300 300)) :lvel (quote (53 61)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4650 4250)) :ldur (quote (225 225)) :lvel (quote (81 65)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6550)) :ldur (quote (150)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5950)) :ldur (quote (257)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5250)) :ldur (quote (257)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5950 4050)) :ldur (quote (257 257)) :lvel (quote (55 66)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5050)) :ldur (quote (343)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4250)) :ldur (quote (450)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4250)) :ldur (quote (450)) :lvel (quote (82)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5250)) :ldur (quote (75)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4850)) :ldur (quote (225)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4250)) :ldur (quote (150)) :lvel (quote (79)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4950)) :ldur (quote (400)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4750)) :ldur (quote (257)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5950)) :ldur (quote (257)) :lvel (quote (54)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4550)) :ldur (quote (86)) :lvel (quote (83)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5950)) :ldur (quote (200)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5850 5050)) :ldur (quote (75 75)) :lvel (quote (58 56)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4550)) :ldur (quote (257)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5950)) :ldur (quote (343)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6150)) :ldur (quote (225)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5150)) :ldur (quote (225)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6350 4750)) :ldur (quote (300 300)) :lvel (quote (51 111)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250 4050)) :ldur (quote (150 150)) :lvel (quote (54 62)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6650)) :ldur (quote (257)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4250)) :ldur (quote (1200)) :lvel (quote (105)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6050)) :ldur (quote (400)) :lvel (quote (54)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4850)) :ldur (quote (200)) :lvel (quote (88)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5250 4250)) :ldur (quote (525 525)) :lvel (quote (52 76)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4350)) :ldur (quote (400)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6450)) :ldur (quote (257)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4850)) :ldur (quote (600)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5250 3950)) :ldur (quote (225 225)) :lvel (quote (62 76)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6550)) :ldur (quote (225)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5250)) :ldur (quote (225)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6450)) :ldur (quote (75)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6450)) :ldur (quote (257)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6050 4950)) :ldur (quote (343 343)) :lvel (quote (55 57)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5250)) :ldur (quote (200)) :lvel (quote (54)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4750)) :ldur (quote (400)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4250)) :ldur (quote (600)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (200)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6350 5250 4750)) :ldur (quote (75 75 75)) :lvel (quote (50 53 59)) :loffset (quote (0 0 0)) :lchan (quote (3 3 3))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4750)) :ldur (quote (257)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6350)) :ldur (quote (400)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4850)) :ldur (quote (100)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5250)) :ldur (quote (200)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6550 4350)) :ldur (quote (400 400)) :lvel (quote (50 55)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6450 4050)) :ldur (quote (343 343)) :lvel (quote (50 64)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6550)) :ldur (quote (450)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6350)) :ldur (quote (150)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (400)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6550)) :ldur (quote (100)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5250 4250)) :ldur (quote (450 450)) :lvel (quote (53 68)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6450)) :ldur (quote (75)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5250)) :ldur (quote (400)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4750)) :ldur (quote (343)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (450)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4250)) :ldur (quote (400)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6350)) :ldur (quote (400)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4150)) :ldur (quote (257)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6550)) :ldur (quote (86)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5250)) :ldur (quote (400)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6550)) :ldur (quote (257)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4850)) :ldur (quote (257)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5250 4350)) :ldur (quote (343 343)) :lvel (quote (51 53)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5850)) :ldur (quote (200)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4050)) :ldur (quote (225)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5850)) :ldur (quote (75)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4950 4250)) :ldur (quote (257 257)) :lvel (quote (54 53)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5850)) :ldur (quote (257)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4250)) :ldur (quote (86)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4150)) :ldur (quote (225)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5850)) :ldur (quote (225)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4750)) :ldur (quote (75)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4150)) :ldur (quote (400)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5850)) :ldur (quote (400)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6350)) :ldur (quote (100)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5250)) :ldur (quote (450)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5250)) :ldur (quote (225)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4150)) :ldur (quote (75)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5550 4350)) :ldur (quote (400 400)) :lvel (quote (55 51)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6350)) :ldur (quote (100)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4250)) :ldur (quote (200)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (225)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4250)) :ldur (quote (300)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 100) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 1257 560) (om-make-point 400 44) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 2" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 50))) (om-make-point 852 210) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 394 329) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 228 485) (om-make-point 100 70) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (50 (((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-1 (1 (-7 1)) (1 (3.0 1)) 1.0)) ((4 4) (1 (1 (1.0 3)) 1.0 (1 (2.0 4)))) ((4 4) ((1 (4.0 3)) 1.0 (1 (2.0 3 3)) (1 (1.0 3 3 1)))) ((4 4) (1.0 (1 (1.0 4 1.0)) (1 (3 3 1)) (1 (4.0 2)))) ((4 4) ((1 (1.0 3 4)) (1 (3.0 3 2)) (1 (1.0 3 3)) (1 (3 4)))) ((4 4) ((1 (1.0 3)) (1 (1.0 6 1)) (1 (3.0 3 2)) (1 (1.0 4 1.0)))) ((4 4) ((1 (3 3 1)) (1 (4.0 2)) (1 (7.0 1)) 1.0)) ((4 4) (1.0 (1 (3 4)) (1 (2.0 3 3)) (1 (1.0 1)))) ((4 4) ((1 (3.0 1)) (1 (4.0 3)) 2)) ((4 4) (1.0 (1 (2.0 4)) 2.0)) ((4 4) ((1 (4.0 2)) (1 (1.0 7)) (1 (2.0 4)) (1 (4.0 3)))) ((4 4) (1 (1 (2.0 3 3)) (1 (4.0 3 1)) 1.0)) ((4 4) ((1 (4.0 3)) (1 (3.0 4)) (1 (4.0 2)) 1.0)) ((4 4) ((1 (2.0 4)) 1.0 1 (1 (4.0 2)))) ((4 4) ((1 (7.0 1)) 1.0 (1 (4.0 3)) (1 (4 1.0 1)))) ((4 4) ((1 (4.0 2)) 2.0 (1 (1.0 4 1.0)))) ((4 4) ((1 (3.0 4)) (1 (1.0 3)) 1.0 (1 (3.0 1)))) ((4 4) ((1 (1.0 4 1.0)) (1 (4.0 1.0 1)) 1.0 (1 (1.0 6 1)))) ((4 4) ((1 (2.0 4)) 1.0 (1 (3.0 4)) (1 (1.0 3)))) ((4 4) (1.0 (1 (2.0 4)) (1 (1.0 4 1.0)) (1 (3.0 3 1)))) ((4 4) (2.0 (1 (2.0 4)) (1 (1.0 3 3)))) ((4 4) ((1 (3.0 4)) (1 (4.0 2)) (1 (4.0 3 1)) 1.0)) ((4 4) ((1 (4.0 3)) (1 (3.0 3 1)) (1 (2.0 3 3)) (1 (7.0 1)))) ((4 4) ((1 (2.0 4)) (1 (1.0 4 1.0)) (1 (4.0 1.0 1)) (1 (1.0 3)))) ((4 4) ((1 (4.0 3 1)) (1 (2.0 4)) 1.0 (1 (4.0 1.0 1)))) ((4 4) ((1 (4.0 2)) (1 (1.0 3 4)) 1.0 (1 (1.0 -4 -1.0))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6350 4750 4050)) :ldur (quote (75 75 75)) :lvel (quote (51 98 65)) :loffset (quote (0 0 0)) :lchan (quote (3 3 3))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4150)) :ldur (quote (150)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4050)) :ldur (quote (600)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (450)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (400)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (257)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4250)) :ldur (quote (225)) :lvel (quote (79)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5150)) :ldur (quote (225)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4850)) :ldur (quote (225)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4550)) :ldur (quote (225)) :lvel (quote (81)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250 4150)) :ldur (quote (75 75)) :lvel (quote (52 69)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5150)) :ldur (quote (400)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4150)) :ldur (quote (257)) :lvel (quote (79)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (257)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (86)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6350 6150 4850)) :ldur (quote (200 200 200)) :lvel (quote (51 54 59)) :loffset (quote (0 0 0)) :lchan (quote (3 3 3))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4350)) :ldur (quote (225)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250 5050)) :ldur (quote (300 300)) :lvel (quote (53 61)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4650 4250)) :ldur (quote (225 225)) :lvel (quote (81 65)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6550)) :ldur (quote (150)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5950)) :ldur (quote (257)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5250)) :ldur (quote (257)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5950 4050)) :ldur (quote (257 257)) :lvel (quote (55 66)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5050)) :ldur (quote (343)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4250)) :ldur (quote (450)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4250)) :ldur (quote (450)) :lvel (quote (82)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5250)) :ldur (quote (75)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4850)) :ldur (quote (225)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4250)) :ldur (quote (150)) :lvel (quote (79)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4950)) :ldur (quote (400)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4750)) :ldur (quote (257)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5950)) :ldur (quote (257)) :lvel (quote (54)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4550)) :ldur (quote (86)) :lvel (quote (83)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5950)) :ldur (quote (200)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5850 5050)) :ldur (quote (75 75)) :lvel (quote (58 56)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4550)) :ldur (quote (257)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5950)) :ldur (quote (343)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6150)) :ldur (quote (225)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5150)) :ldur (quote (225)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6350 4750)) :ldur (quote (300 300)) :lvel (quote (51 111)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250 4050)) :ldur (quote (150 150)) :lvel (quote (54 62)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6650)) :ldur (quote (257)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4250)) :ldur (quote (1200)) :lvel (quote (105)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6050)) :ldur (quote (400)) :lvel (quote (54)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4850)) :ldur (quote (200)) :lvel (quote (88)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5250 4250)) :ldur (quote (525 525)) :lvel (quote (52 76)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4350)) :ldur (quote (400)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6450)) :ldur (quote (257)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4850)) :ldur (quote (600)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5250 3950)) :ldur (quote (225 225)) :lvel (quote (62 76)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6550)) :ldur (quote (225)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5250)) :ldur (quote (225)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6450)) :ldur (quote (75)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6450)) :ldur (quote (257)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6050 4950)) :ldur (quote (343 343)) :lvel (quote (55 57)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5250)) :ldur (quote (200)) :lvel (quote (54)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4750)) :ldur (quote (400)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4250)) :ldur (quote (600)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (200)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6350 5250 4750)) :ldur (quote (75 75 75)) :lvel (quote (50 53 59)) :loffset (quote (0 0 0)) :lchan (quote (3 3 3))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4750)) :ldur (quote (257)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6350)) :ldur (quote (400)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4850)) :ldur (quote (100)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5250)) :ldur (quote (200)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6550 4350)) :ldur (quote (400 400)) :lvel (quote (50 55)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6450 4050)) :ldur (quote (343 343)) :lvel (quote (50 64)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6550)) :ldur (quote (450)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6350)) :ldur (quote (150)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (400)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6550)) :ldur (quote (100)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5250 4250)) :ldur (quote (450 450)) :lvel (quote (53 68)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6450)) :ldur (quote (75)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5250)) :ldur (quote (400)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4750)) :ldur (quote (343)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (450)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4250)) :ldur (quote (400)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6350)) :ldur (quote (400)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4150)) :ldur (quote (257)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6550)) :ldur (quote (86)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5250)) :ldur (quote (400)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6550)) :ldur (quote (257)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4850)) :ldur (quote (257)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5250 4350)) :ldur (quote (343 343)) :lvel (quote (51 53)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5850)) :ldur (quote (200)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4050)) :ldur (quote (225)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5850)) :ldur (quote (75)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4950 4250)) :ldur (quote (257 257)) :lvel (quote (54 53)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5850)) :ldur (quote (257)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4250)) :ldur (quote (86)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4150)) :ldur (quote (225)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5850)) :ldur (quote (225)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4750)) :ldur (quote (75)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4150)) :ldur (quote (400)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5850)) :ldur (quote (400)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6350)) :ldur (quote (100)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5250)) :ldur (quote (450)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5250)) :ldur (quote (225)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4150)) :ldur (quote (75)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5550 4350)) :ldur (quote (400 400)) :lvel (quote (55 51)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6350)) :ldur (quote (100)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4250)) :ldur (quote (200)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (225)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4250)) :ldur (quote (300)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 100) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (50 (((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-1 (1 (-7 1)) (1 (3.0 3 2)) 1.0)) ((4 4) (2 (1 (1.0 6 1)) 1.0)) ((4 4) (1.0 (1 (3.0 4)) (1 (4.0 2)) (1 (7.0 1)))) ((4 4) (1.0 (1 (4.0 3)) 1 (1 (4.0 2)))) ((4 4) ((1 (1.0 7)) (1 (2.0 4)) 1.0 (1 (3 4)))) ((4 4) ((1 (1.0 3)) (1 (1.0 7)) (1 (3.0 1)) 1.0)) ((4 4) ((1 (3.0 3 1)) (1 (1.0 3)) 2.0)) ((4 4) (1.0 (1 (3 4)) 1.0 (1 (1.0 3 4)))) ((4 4) ((1 (3.0 1)) 1.0 1 (1 (4.0 2)))) ((4 4) ((1 (7.0 1)) 1.0 (1 (1.0 4 1.0)) 1)) ((4 4) (1.0 (1 (1.0 7)) (1 (3.0 1)) 1.0)) ((4 4) (1.0 (1 (1.0 3)) (1 (1.0 1)) (1 (3.0 1)))) ((4 4) ((1 (1.0 4 1.0)) 2.0 (1 (1.0 7)))) ((4 4) (2.0 2)) ((4 4) ((1 (1.0 1)) (1 (3.0 1)) 1.0 (1 (3 4)))) ((4 4) (2.0 (1 (3.0 1)) (1 (1.0 4 1.0)))) ((4 4) ((1 (3 4)) 1.0 (1 (1.0 7)) 1.0)) ((4 4) (1.0 (1 (4.0 1.0 1)) (1 (4.0 2)) (1 (1.0 3 4)))) ((4 4) (1.0 (1 (1.0 3 3)) 1.0 (1 (4.0 2)))) ((4 4) (1.0 (1 (3.0 3 2)) 1.0 (1 (3.0 3 1)))) ((4 4) ((1 (4.0 2)) 2.0 (1 (1.0 4 1.0)))) ((4 4) ((1 (4.0 1.0 1)) 1.0 (1 (4.0 3 1)) 1.0)) ((4 4) ((1 (4.0 3)) (1 (4.0 1.0 1)) (1 (2.0 3 3)) 1.0)) ((4 4) ((1 (2.0 4)) (1 (1.0 4 1.0)) (1 (3.0 3 1)) 1.0)) ((4 4) ((1 (7.0 1)) (1 (2.0 4)) 2.0)) ((4 4) ((1 (4.0 2)) (1 (1.0 3 4)) 1.0 (1 (1.0 -4 -1.0))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4050)) :ldur (quote (75)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2950 950)) :ldur (quote (225 225)) :lvel (quote (65 60)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4150)) :ldur (quote (150)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4050)) :ldur (quote (1200)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1750)) :ldur (quote (450)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3550 1850)) :ldur (quote (75 75)) :lvel (quote (66 71)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3150)) :ldur (quote (343)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4250)) :ldur (quote (200)) :lvel (quote (79)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4550 4150 3150)) :ldur (quote (75 75 75)) :lvel (quote (81 69 69)) :loffset (quote (0 0 0)) :lchan (quote (3 3 3))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3750)) :ldur (quote (257)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4150)) :ldur (quote (600)) :lvel (quote (79)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2850)) :ldur (quote (200)) :lvel (quote (75)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4350)) :ldur (quote (525)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4250)) :ldur (quote (400)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4050 2650)) :ldur (quote (257 257)) :lvel (quote (66 66)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3150)) :ldur (quote (343)) :lvel (quote (75)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4250)) :ldur (quote (450)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4250)) :ldur (quote (525)) :lvel (quote (82)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4250 3250)) :ldur (quote (150 150)) :lvel (quote (79 72)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2950 1750)) :ldur (quote (257 257)) :lvel (quote (68 59)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4550)) :ldur (quote (86)) :lvel (quote (83)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3250)) :ldur (quote (450)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4550)) :ldur (quote (257)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2150)) :ldur (quote (343)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3550 1550)) :ldur (quote (225 225)) :lvel (quote (62 59)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2950)) :ldur (quote (300)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4050)) :ldur (quote (150)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4250 3550)) :ldur (quote (600 600)) :lvel (quote (105 89)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2650)) :ldur (quote (200)) :lvel (quote (83)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1450)) :ldur (quote (75)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1950)) :ldur (quote (400)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3350)) :ldur (quote (600)) :lvel (quote (92)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4250)) :ldur (quote (525)) :lvel (quote (76)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4350)) :ldur (quote (150)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3950)) :ldur (quote (450)) :lvel (quote (76)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3450)) :ldur (quote (300)) :lvel (quote (77)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3650)) :ldur (quote (150)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3450)) :ldur (quote (400)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2750)) :ldur (quote (525)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4250 950)) :ldur (quote (1200 1200)) :lvel (quote (53 60)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3350)) :ldur (quote (300)) :lvel (quote (54)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3550)) :ldur (quote (150)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3150 450)) :ldur (quote (257 257)) :lvel (quote (59 57)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3550)) :ldur (quote (343)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3650)) :ldur (quote (150)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4350)) :ldur (quote (400)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (650)) :ldur (quote (257)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4050)) :ldur (quote (343)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3550)) :ldur (quote (525)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (850)) :ldur (quote (100)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3350)) :ldur (quote (200)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2850)) :ldur (quote (225)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4250)) :ldur (quote (300)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2850)) :ldur (quote (257)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3150)) :ldur (quote (257)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1350)) :ldur (quote (200)) :lvel (quote (54)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4250)) :ldur (quote (225)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (750)) :ldur (quote (150)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4150)) :ldur (quote (257)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2650 450)) :ldur (quote (86 86)) :lvel (quote (57 52)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3250)) :ldur (quote (200)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3650)) :ldur (quote (400)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4350)) :ldur (quote (100)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4050)) :ldur (quote (225)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2550)) :ldur (quote (75)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4250)) :ldur (quote (257)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4250)) :ldur (quote (100)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4150)) :ldur (quote (225)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (650)) :ldur (quote (225)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4150)) :ldur (quote (400)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1450)) :ldur (quote (400)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3750)) :ldur (quote (257)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3850 1150)) :ldur (quote (86 86)) :lvel (quote (52 52)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4150)) :ldur (quote (75)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4350)) :ldur (quote (400)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4250)) :ldur (quote (200)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3250)) :ldur (quote (225)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4250)) :ldur (quote (300)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 100) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (199/4 (((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-1 (1 (-7 1)) 2.0)) ((4 4) (1.0 (1 (1.0 3)) 1.0 (1 (2.0 4)))) ((4 4) ((1 (4.0 3)) 2.0 (1 (7.0 1)))) ((4 4) (2.0 (1 (3.0 3 1)) (1 (4.0 2)))) ((4 4) ((1 (1.0 1)) (1 (3.0 1)) (1 (1.0 3 3)) 1)) ((4 4) (1.0 (1 (7.0 1)) 2.0)) ((4 4) ((1 (3.0 4)) (1 (4.0 2)) (1 (7.0 1)) 1.0)) ((4 4) (1.0 (1 (3.0 4)) (1 (1.0 3)) (1 (1.0 1)))) ((4 4) ((1 (3.0 1)) (1 (4.0 3)) 2.0)) ((4 4) (1.0 (1 (2.0 4)) 2.0)) ((4 4) (1.0 (1 (1.0 7)) 1.0 (1 (4.0 3)))) ((4 4) (1.0 (1 (2.0 3 3)) (1 (4.0 3 1)) 1.0)) ((4 4) ((1 (4.0 3)) (1 (3.0 4)) (1 (4.0 2)) 1.0)) ((4 4) (3.0 (1 (4.0 2)))) ((4 4) ((1 (7.0 1)) (1 (2.0 4)) 1.0 1)) ((4 4) ((1 (4.0 2)) 2.0 (1 (1.0 4 1.0)))) ((4 4) ((1 (3.0 4)) (1 (1.0 3)) 1.0 (1 (3.0 1)))) ((4 4) ((1 (1.0 4 1.0)) (1 (4.0 1.0 1)) 1.0 (1 (1.0 6 1)))) ((4 4) ((1 (2.0 4)) 2.0 (1 (4.0 2)))) ((4 4) (2.0 (1 (1.0 4 1.0)) (1 (4.0 1.0 1)))) ((4 4) (2.0 (1 (2.0 4)) (1 (1.0 4 1.0)))) ((4 4) ((1 (4.0 1.0 1)) (1 (4.0 2)) (1 (7.0 1)) 1.0)) ((4 4) (1.0 (1 (3.0 4)) (1 (4.0 2)) 1.0)) ((4 4) (1.0 (1 (1.0 4 1.0)) (1 (4.0 1.0 1)) (1 (1.0 3)))) ((4 4) ((1 (1.0 1)) (1 (2.0 4)) 1.0 (1 (4.0 1.0 1)))) ((3 4) (1.0 (1 (1.0 7)) (1 (3.0 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8050 7350 6850 6350)) :ldur (quote (75 75 75 75)) :lvel (quote (50 50 68 51)) :loffset (quote (0 0 0 0)) :lchan (quote (3 3 3 3))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (450)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (400)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (257)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (75)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (257)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (86)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6350 6150)) :ldur (quote (200 200)) :lvel (quote (51 54)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (300)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6550)) :ldur (quote (150)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5950)) :ldur (quote (257)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5250)) :ldur (quote (257)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5950)) :ldur (quote (600)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5250)) :ldur (quote (75)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5950)) :ldur (quote (343)) :lvel (quote (54)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5950)) :ldur (quote (200)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5850)) :ldur (quote (75)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5950)) :ldur (quote (343)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6150)) :ldur (quote (450)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6350)) :ldur (quote (300)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (150)) :lvel (quote (54)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6650)) :ldur (quote (257)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6050)) :ldur (quote (400)) :lvel (quote (54)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5250)) :ldur (quote (525)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6450)) :ldur (quote (257)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5250)) :ldur (quote (225)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6550)) :ldur (quote (225)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5250)) :ldur (quote (225)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6450)) :ldur (quote (75)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6450)) :ldur (quote (257)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6050)) :ldur (quote (343)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5250)) :ldur (quote (200)) :lvel (quote (54)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (200)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5250)) :ldur (quote (75)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6350)) :ldur (quote (400)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6350)) :ldur (quote (600)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5250)) :ldur (quote (200)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6550)) :ldur (quote (400)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6450)) :ldur (quote (343)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6550)) :ldur (quote (450)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6350)) :ldur (quote (150)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (400)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6550)) :ldur (quote (100)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5250)) :ldur (quote (450)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6450)) :ldur (quote (75)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5250)) :ldur (quote (400)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (200)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6350)) :ldur (quote (400)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6550)) :ldur (quote (100)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5250)) :ldur (quote (400)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6550)) :ldur (quote (400)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5250)) :ldur (quote (100)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5850)) :ldur (quote (200)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5850)) :ldur (quote (75)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5850)) :ldur (quote (343)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5850)) :ldur (quote (200)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5850)) :ldur (quote (400)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6350)) :ldur (quote (100)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5250)) :ldur (quote (450)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5250)) :ldur (quote (300)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5550)) :ldur (quote (400)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6350)) :ldur (quote (100)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (525)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 100) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.01 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (list (quote gf) (quote gf) (quote gf)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (2 2 2))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 1363 691) (om-make-point 400 44) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 50))) (om-make-point 584 207) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE 3" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 438 222) (om-make-point 111 53) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (50 (((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-1 (1 (-7 1)) (1 (3.0 3 2)) 1.0)) ((4 4) (2 (1 (1.0 6 1)) 1.0)) ((4 4) (1.0 (1 (3.0 4)) (1 (4.0 2)) (1 (7.0 1)))) ((4 4) (1.0 (1 (4.0 3)) 1 (1 (4.0 2)))) ((4 4) ((1 (1.0 7)) (1 (2.0 4)) 1.0 (1 (3 4)))) ((4 4) ((1 (1.0 3)) (1 (1.0 7)) (1 (3.0 1)) 1.0)) ((4 4) ((1 (3.0 3 1)) (1 (1.0 3)) 2.0)) ((4 4) (1.0 (1 (3 4)) 1.0 (1 (1.0 3 4)))) ((4 4) ((1 (3.0 1)) 1.0 1 (1 (4.0 2)))) ((4 4) ((1 (7.0 1)) 1.0 (1 (1.0 4 1.0)) 1)) ((4 4) (1.0 (1 (1.0 7)) (1 (3.0 1)) 1.0)) ((4 4) (1.0 (1 (1.0 3)) (1 (1.0 1)) (1 (3.0 1)))) ((4 4) ((1 (1.0 4 1.0)) 2.0 (1 (1.0 7)))) ((4 4) (2.0 2)) ((4 4) ((1 (1.0 1)) (1 (3.0 1)) 1.0 (1 (3 4)))) ((4 4) (2.0 (1 (3.0 1)) (1 (1.0 4 1.0)))) ((4 4) ((1 (3 4)) 1.0 (1 (1.0 7)) 1.0)) ((4 4) (1.0 (1 (4.0 1.0 1)) (1 (4.0 2)) (1 (1.0 3 4)))) ((4 4) (1.0 (1 (1.0 3 3)) 1.0 (1 (4.0 2)))) ((4 4) (1.0 (1 (3.0 3 2)) 1.0 (1 (3.0 3 1)))) ((4 4) ((1 (4.0 2)) 2.0 (1 (1.0 4 1.0)))) ((4 4) ((1 (4.0 1.0 1)) 1.0 (1 (4.0 3 1)) 1.0)) ((4 4) ((1 (4.0 3)) (1 (4.0 1.0 1)) (1 (2.0 3 3)) 1.0)) ((4 4) ((1 (2.0 4)) (1 (1.0 4 1.0)) (1 (3.0 3 1)) 1.0)) ((4 4) ((1 (7.0 1)) (1 (2.0 4)) 2.0)) ((4 4) ((1 (4.0 2)) (1 (1.0 3 4)) 1.0 (1 (1.0 -4 -1.0))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4050)) :ldur (quote (75)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2950 950)) :ldur (quote (225 225)) :lvel (quote (65 60)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4150)) :ldur (quote (150)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4050)) :ldur (quote (1200)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1750)) :ldur (quote (450)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3550 1850)) :ldur (quote (75 75)) :lvel (quote (66 71)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3150)) :ldur (quote (343)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4250)) :ldur (quote (200)) :lvel (quote (79)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4550 4150 3150)) :ldur (quote (75 75 75)) :lvel (quote (81 69 69)) :loffset (quote (0 0 0)) :lchan (quote (3 3 3))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3750)) :ldur (quote (257)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4150)) :ldur (quote (600)) :lvel (quote (79)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2850)) :ldur (quote (200)) :lvel (quote (75)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4350)) :ldur (quote (525)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4250)) :ldur (quote (400)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4050 2650)) :ldur (quote (257 257)) :lvel (quote (66 66)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3150)) :ldur (quote (343)) :lvel (quote (75)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4250)) :ldur (quote (450)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4250)) :ldur (quote (525)) :lvel (quote (82)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4250 3250)) :ldur (quote (150 150)) :lvel (quote (79 72)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2950 1750)) :ldur (quote (257 257)) :lvel (quote (68 59)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4550)) :ldur (quote (86)) :lvel (quote (83)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3250)) :ldur (quote (450)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4550)) :ldur (quote (257)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2150)) :ldur (quote (343)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3550 1550)) :ldur (quote (225 225)) :lvel (quote (62 59)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2950)) :ldur (quote (300)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4050)) :ldur (quote (150)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4250 3550)) :ldur (quote (600 600)) :lvel (quote (105 89)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2650)) :ldur (quote (200)) :lvel (quote (83)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1450)) :ldur (quote (75)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1950)) :ldur (quote (400)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3350)) :ldur (quote (600)) :lvel (quote (92)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4250)) :ldur (quote (525)) :lvel (quote (76)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4350)) :ldur (quote (150)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3950)) :ldur (quote (450)) :lvel (quote (76)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3450)) :ldur (quote (300)) :lvel (quote (77)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3650)) :ldur (quote (150)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3450)) :ldur (quote (400)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2750)) :ldur (quote (525)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4250 950)) :ldur (quote (1200 1200)) :lvel (quote (53 60)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3350)) :ldur (quote (300)) :lvel (quote (54)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3550)) :ldur (quote (150)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3150 450)) :ldur (quote (257 257)) :lvel (quote (59 57)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3550)) :ldur (quote (343)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3650)) :ldur (quote (150)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4350)) :ldur (quote (400)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (650)) :ldur (quote (257)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4050)) :ldur (quote (343)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3550)) :ldur (quote (525)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (850)) :ldur (quote (100)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3350)) :ldur (quote (200)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2850)) :ldur (quote (225)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4250)) :ldur (quote (300)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2850)) :ldur (quote (257)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3150)) :ldur (quote (257)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1350)) :ldur (quote (200)) :lvel (quote (54)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4250)) :ldur (quote (225)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (750)) :ldur (quote (150)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4150)) :ldur (quote (257)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2650 450)) :ldur (quote (86 86)) :lvel (quote (57 52)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3250)) :ldur (quote (200)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3650)) :ldur (quote (400)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4350)) :ldur (quote (100)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4050)) :ldur (quote (225)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2550)) :ldur (quote (75)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4250)) :ldur (quote (257)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4250)) :ldur (quote (100)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4150)) :ldur (quote (225)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (650)) :ldur (quote (225)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4150)) :ldur (quote (400)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1450)) :ldur (quote (400)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3750)) :ldur (quote (257)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3850 1150)) :ldur (quote (86 86)) :lvel (quote (52 52)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4150)) :ldur (quote (75)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4350)) :ldur (quote (400)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4250)) :ldur (quote (200)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3250)) :ldur (quote (225)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4250)) :ldur (quote (300)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 100) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 1257 560) (om-make-point 400 44) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 41 45) (quote "+50$") "" (om-make-point 491 71) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE 2" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 102) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 438 137) (om-make-point 111 53) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (50 (((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((4 4) (-1 (1 (-7 1)) (1 (3.0 3 2)) 1.0)) ((4 4) (2 (1 (1.0 6 1)) 1.0)) ((4 4) (1.0 (1 (3.0 4)) (1 (4.0 2)) (1 (7.0 1)))) ((4 4) (1.0 (1 (4.0 3)) 1 (1 (4.0 2)))) ((4 4) ((1 (1.0 7)) (1 (2.0 4)) 1.0 (1 (3 4)))) ((4 4) ((1 (1.0 3)) (1 (1.0 7)) (1 (3.0 1)) 1.0)) ((4 4) ((1 (3.0 3 1)) (1 (1.0 3)) 2.0)) ((4 4) (1.0 (1 (3 4)) 1.0 (1 (1.0 3 4)))) ((4 4) ((1 (3.0 1)) 1.0 1 (1 (4.0 2)))) ((4 4) ((1 (7.0 1)) 1.0 (1 (1.0 4 1.0)) 1)) ((4 4) (1.0 (1 (1.0 7)) (1 (3.0 1)) 1.0)) ((4 4) (1.0 (1 (1.0 3)) (1 (1.0 1)) (1 (3.0 1)))) ((4 4) ((1 (1.0 4 1.0)) 2.0 (1 (1.0 7)))) ((4 4) (2.0 2)) ((4 4) ((1 (1.0 1)) (1 (3.0 1)) 1.0 (1 (3 4)))) ((4 4) (2.0 (1 (3.0 1)) (1 (1.0 4 1.0)))) ((4 4) ((1 (3 4)) 1.0 (1 (1.0 7)) 1.0)) ((4 4) (1.0 (1 (4.0 1.0 1)) (1 (4.0 2)) (1 (1.0 3 4)))) ((4 4) (1.0 (1 (1.0 3 3)) 1.0 (1 (4.0 2)))) ((4 4) (1.0 (1 (3.0 3 2)) 1.0 (1 (3.0 3 1)))) ((4 4) ((1 (4.0 2)) 2.0 (1 (1.0 4 1.0)))) ((4 4) ((1 (4.0 1.0 1)) 1.0 (1 (4.0 3 1)) 1.0)) ((4 4) ((1 (4.0 3)) (1 (4.0 1.0 1)) (1 (2.0 3 3)) 1.0)) ((4 4) ((1 (2.0 4)) (1 (1.0 4 1.0)) (1 (3.0 3 1)) 1.0)) ((4 4) ((1 (7.0 1)) (1 (2.0 4)) 2.0)) ((4 4) ((1 (4.0 2)) (1 (1.0 3 4)) 1.0 (1 (1.0 -4 -1.0))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (75)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2900 900)) :ldur (quote (225 225)) :lvel (quote (65 60)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (150)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (1200)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1700)) :ldur (quote (450)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3500 1800)) :ldur (quote (75 75)) :lvel (quote (66 71)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3100)) :ldur (quote (343)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (200)) :lvel (quote (79)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500 4100 3100)) :ldur (quote (75 75 75)) :lvel (quote (81 69 69)) :loffset (quote (0 0 0)) :lchan (quote (3 3 3))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3700)) :ldur (quote (257)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (600)) :lvel (quote (79)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2800)) :ldur (quote (200)) :lvel (quote (75)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (525)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (400)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000 2600)) :ldur (quote (257 257)) :lvel (quote (66 66)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3100)) :ldur (quote (343)) :lvel (quote (75)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (450)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (525)) :lvel (quote (82)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200 3200)) :ldur (quote (150 150)) :lvel (quote (79 72)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2900 1700)) :ldur (quote (257 257)) :lvel (quote (68 59)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (86)) :lvel (quote (83)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3200)) :ldur (quote (450)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (257)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2100)) :ldur (quote (343)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3500 1500)) :ldur (quote (225 225)) :lvel (quote (62 59)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2900)) :ldur (quote (300)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (150)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200 3500)) :ldur (quote (600 600)) :lvel (quote (105 89)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2600)) :ldur (quote (200)) :lvel (quote (83)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1400)) :ldur (quote (75)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1900)) :ldur (quote (400)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3300)) :ldur (quote (600)) :lvel (quote (92)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (525)) :lvel (quote (76)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (150)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3900)) :ldur (quote (450)) :lvel (quote (76)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3400)) :ldur (quote (300)) :lvel (quote (77)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3600)) :ldur (quote (150)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3400)) :ldur (quote (400)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2700)) :ldur (quote (525)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200 900)) :ldur (quote (1200 1200)) :lvel (quote (53 60)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3300)) :ldur (quote (300)) :lvel (quote (54)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3500)) :ldur (quote (150)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3100 400)) :ldur (quote (257 257)) :lvel (quote (59 57)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3500)) :ldur (quote (343)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3600)) :ldur (quote (150)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (400)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (600)) :ldur (quote (257)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (343)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3500)) :ldur (quote (525)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (800)) :ldur (quote (100)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3300)) :ldur (quote (200)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2800)) :ldur (quote (225)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (300)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2800)) :ldur (quote (257)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3100)) :ldur (quote (257)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1300)) :ldur (quote (200)) :lvel (quote (54)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (225)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (700)) :ldur (quote (150)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (257)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2600 400)) :ldur (quote (86 86)) :lvel (quote (57 52)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3200)) :ldur (quote (200)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3600)) :ldur (quote (400)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (100)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (225)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2500)) :ldur (quote (75)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (257)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (100)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (225)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (600)) :ldur (quote (225)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (400)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1400)) :ldur (quote (400)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3700)) :ldur (quote (257)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3800 1100)) :ldur (quote (86 86)) :lvel (quote (52 52)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (75)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (400)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (200)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3200)) :ldur (quote (225)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (300)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 100) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.01 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 1257 560) (om-make-point 400 44) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 115 190) (om-make-point 121 53) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (367/4 (((4 4) (-3 (1 (-1 6)))) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (2.0 (1 (4.0 3)) 1.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (3.0 1)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (2.0 (1 (7.0 1)) 1.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (3.0 (1 (1.0 4 1.0)))) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (1.0 (1 (3.0 1)) 2.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (1.0 3)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (2.0 (1 (7.0 1)) 1.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (3.0 (1 (3.0 4)))) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((3 4) ((1 (7.0 1)) 1.0 -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8700 2600 5700)) :ldur (quote (756 756 756)) :lvel (quote (61 100 61)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200 8900)) :ldur (quote (378 378)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000 8800 7000)) :ldur (quote (882 882 882)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200 9000)) :ldur (quote (3529 3529)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (110)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100 8000)) :ldur (quote (588 588)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3700 4600 7400)) :ldur (quote (221 221 221)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200 7600 4100)) :ldur (quote (2647 2647 2647)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300 8000 5500 5400)) :ldur (quote (110 110 110 110)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3700)) :ldur (quote (504)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200 4100 7600 7700)) :ldur (quote (110 110 110 110)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 68) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 1257 560) (om-make-point 400 44) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "fisherman +0.mid" (quote midifile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 141 65) (om-make-point 50 72) (let ((newobj (load-midi (om-make-pathname :directory (quote (:absolute "Users" "samdvorin" "Desktop" "stagnation" "midi outs")) :device nil :host nil :name "fisherman +0" :type "mid")))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "fisherman +0.mid") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (outport player winpos winsize deltapict zoom obj-mode cmnpref notechancolor? grillestep mode show-stems scale)) (list 0 (quote :midi-player) (om-make-point 10 44) (om-make-point 1316 521) (om-make-point 0 0) 1 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 (quote t) nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 3 0 nil 0) (3 1 5 1 nil 0) (6 0 5 2 nil 0) (3 3 5 3 nil 0) (3 4 5 4 nil 0) (3 5 5 5 nil 0) (3 2 6 0 nil 0) (1 0 7 0 nil 0) (7 1 9 1 nil 0) (10 0 9 2 nil 0) (7 3 9 3 nil 0) (7 4 9 4 nil 0) (7 5 9 5 nil 0) (7 2 10 0 nil 0) (9 0 11 0 nil 0) (14 0 11 1 nil 0) (5 0 11 2 nil 0) (11 0 12 1 nil 0) (16 2 13 0 nil 0) (16 1 14 1 nil 0) (13 0 14 2 nil 0) (16 3 14 3 nil 0) (16 4 14 4 nil 0) (16 5 14 5 nil 0) (0 0 16 0 nil 0) (18 0 17 0 nil 0))) nil 7.01))
