; OM File Header - Saved 2024/02/06 13:56:41
; (7.01 :patc (om-make-point 186 126) (om-make-point 0 44) (om-make-point 1800 1036) "" 183 0 "2023/07/18 14:33:42" "2023/09/05 08:59:21")
; End File Header
; External resources 
; (list (list (quote :sdif) "#P\"../../../../stagnation/audio outs to analyze/woman feedback to orc.sdif\"" "#P\"../../../../stagnation/audio outs to analyze/high prom flickers.sdif\"" "#P\"../../../../stagnation/audio outs to analyze/high prom ring.sdif\"" "#P\"../../../../stagnation/audio outs to analyze/sheppard end feedback.sdif\"" "#P\"../../../../stagnation/audio outs to analyze/click delay chord.sdif\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "promDrone" (quote ((let ((box (om-load-editor-box1 "NOTE 2" (quote note) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitch (midicents)" "midic" 6000) (om-load-inputfun (quote input-funbox) "velocity (0-127)" "vel" 80) (om-load-inputfun (quote input-funbox) "duration (ms)" "dur" 1000) (om-load-inputfun (quote input-funbox) "MIDI channel (1-16)" "chan" 1))) (om-make-point 1472 412) (om-make-point 60 60) (if (find-class (quote note) nil) (let ((newobj (make-instance (quote note) :midic 8030 :vel 80 :dur 1000 :chan 1 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point 300 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "F->MC 2" (quote f->mc) (quote ((om-load-inputfun (quote input-funbox) "frequency (Hz)" "FREQ" 845))) (om-make-point 1348 320) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "getting chords" (om-load-patch-abs1 "getting chords" (quote ((let ((box (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list 1 1 1 1 1 1 1 1 1 1)) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 966 803) (om-make-point 130 70) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (10 (((4 4) (4)) ((4 4) (4)) ((4 4) (4)) ((4 4) (4)) ((4 4) (4)) ((4 4) (4)) ((4 4) (4)) ((4 4) (4)) ((4 4) (4)) ((4 4) (4))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7032 6362 5542 9634 4896 6174 8844 9066 7958 7526 9434 8570 7422 6752 9728 3108 9558 8248 9160 8394 8504 7598 9390 9018 5244)) :ldur (quote (4000 4000 4000 4000 4000 4000 4000 4000 4000 4000 4000 4000 4000 4000 4000 4000 4000 4000 4000 4000 4000 4000 4000 4000 4000)) :lvel (quote (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5176 6932 9774 4558 8638 7494 9528 9236 8010 9680 9638 10008 8972 6442 9418 9736 9136 9358 7264 8280 9200 8880 8614 10124 5988)) :ldur (quote (4000 4000 4000 4000 4000 4000 4000 4000 4000 4000 4000 4000 4000 4000 4000 4000 4000 4000 4000 4000 4000 4000 4000 4000 4000)) :lvel (quote (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7808 7502 6132 7694 9086 9054 8906 7072 6970 9218 6298 8510 8136 8246 6676 5604 8370 7368 8744 8044 8810 6480 8596 6822 5218 8532 5662)) :ldur (quote (4000 4000 4000 4000 4000 4000 4000 4000 4000 4000 4000 4000 4000 4000 4000 4000 4000 4000 4000 4000 4000 4000 4000 4000 4000 4000 4000)) :lvel (quote (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8332 7976 7374 7690 6574 4446 6014)) :ldur (quote (4000 4000 4000 4000 4000 4000 4000)) :lvel (quote (100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5176 6794 7186 7700 5936 6502 7432 3538)) :ldur (quote (4000 4000 4000 4000 4000 4000 4000 4000)) :lvel (quote (100 100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7268 5110 5666 6022 7748 7046 7384 8076 6774 7892 4836 7280 6854 4568 3988 5400 6332)) :ldur (quote (4000 4000 4000 4000 4000 4000 4000 4000 4000 4000 4000 4000 4000 4000 4000 4000 4000)) :lvel (quote (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7032 3170 6776 8266 7418 7736 5184 5736 8364 6312)) :ldur (quote (4000 4000 4000 4000 4000 4000 4000 4000 4000 4000)) :lvel (quote (100 100 100 100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7028 4714 5732 3078 6086 6734)) :ldur (quote (4000 4000 4000 4000 4000 4000)) :lvel (quote (100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7028 4714 5732 3078 6086 6734)) :ldur (quote (4000 4000 4000 4000 4000 4000)) :lvel (quote (100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7028 4714 5732 3078 6086 6734)) :ldur (quote (4000 4000 4000 4000 4000 4000)) :lvel (quote (100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.01 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 1385 689) (om-make-point 400 44) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 4" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 519 861) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7032 6362 5542 9634 4896 6174 8844 9066 7958 7526 9434 8570 7422 6752 9728 3108 9558 8248 9160 8394 8504 7598 9390 9018 5244) (5176 6932 9774 4558 8638 7494 9528 9236 8010 9680 9638 10008 8972 6442 9418 9736 9136 9358 7264 8280 9200 8880 8614 10124 5988) (7808 7502 6132 7694 9086 9054 8906 7072 6970 9218 6298 8510 8136 8246 6676 5604 8370 7368 8744 8044 8810 6480 8596 6822 5218 8532 5662) (8332 7976 7374 7690 6574 4446 6014) (5176 6794 7186 7700 5936 6502 7432 3538) (7268 5110 5666 6022 7748 7046 7384 8076 6774 7892 4836 7280 6854 4568 3988 5400 6332) (7032 3170 6776 8266 7418 7736 5184 5736 8364 6312) (7028 4714 5732 3078 6086 6734))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000)) :ldur (quotelvel (quote ((100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100))) :loffset (quote ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0))) :lchan (quote ((1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 732 283) (om-make-point 400 44) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 3" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 445 740) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7032 6362 5542 9634 4896 6174 8844 9066 7958 7526 9434 8570 7422 6752 9728 3108 9558 8248 9160 8394 8504 7598 9390 9018 5244) (5176 6932 9774 4558 8638 7494 9528 9236 8010 9680 9638 10008 8972 6442 9418 9736 9136 9358 7264 8280 9200 8880 8614 10124 5988) (7808 7502 6132 7694 9086 9054 8906 7072 6970 9218 6298 8510 8136 8246 6676 5604 8370 7368 8744 8044 8810 6480 8596 6822 5218 8532 5662) (8332 7976 7374 7690 6574 4446 6014) (5176 6794 7186 7700 5936 6502 7432 3538) (7268 5110 5666 6022 7748 7046 7384 8076 6774 7892 4836 7280 6854 4568 3988 5400 6332) (7032 3170 6776 8266 7418 7736 5184 5736 8364 6312) (7028 4714 5732 3078 6086 6734))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000)) :ldur (quotelvel (quote ((100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100))) :loffset (quote ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0))) :lchan (quote ((1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.01 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 48 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 1800 1038) (om-make-point 0 44) 0 0 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 437 650) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7032 6362 5542 10204 9634 10066 10578 10156 4896 11380 9302 12502 10982 11218 12348 11134 11732 10288 12186 6174 10878 12294 8844 9066 8756 12394 7958 7526 9434 8930 9950 8570 7422 12058 10134 11540 6752 9894 10004 10620 10724 9728 3108 12326 9558 12524 11308 11318 10294 11412 12244 11160 10080 8248 12460 11028 10526 12350 10552 10466 9160 8394 11092 9246 7982 8504 7598 10106 9390 9018 5244) (5276 7032 10874 11790 11752 9874 12134 12082 4658 10786 10008 10494 8738 7594 11110 9628 8226 11352 11332 10390 11134 9336 12396 11862 8110 9780 12038 10752 9738 10390 10298 10108 7984 9072 11886 10984 6542 10576 9518 10816 11808 10542 9836 11176 10614 9236 9458 11834 10272 10134 7364 8380 9300 8980 8714 10224 3154 6088) (8708 5560 8402 7032 8594 9986 10622 9954 10532 3380 9806 7972 7870 10118 7198 9410 9036 9146 7576 6504 9270 10924 8268 9644 10268 8944 9710 7380 9496 4722 7722 6118 5532 9432 6562) (7032 9178 9778 11216 11062 10620 10868 9006 9738 7640 7944 11242 8562 10154 10386 8712 9346 8364 10986 9462 6676 11180 10814 10538 9920 11364 8264 8872 9990 6074 10920 9410 10576 6390 8924 9772 9586 10114 8440 7360 5274 3146 9876 8082 10788 4714 9158 7668 8776) (7882 10504 9262 10300 9594 10320 9738 7540 9780 10354 9390 9530 9084 9446 10120 8228 4776 8744 8964 10612 10634 6394 6786 10550 7984 9886 9976 7984 8486 9866 8498 9162 7300 8088 9742 5536 6102 7032 3138) (8908 9152 9750 9060 9222 10388 10314 7860 9580 9878 9624 9232 9504 9974 10618 10472 10500 6968 4810 8586 5366 8728 10796 9696 5722 10038 7448 9834 9008 6746 8816 7084 10382 7776 9916 6474 7592 8652 8420 9526 7942 4536 8990 6980 9384 10286 8710 10858 9726 6554 8860 8478 9660 9474 9126 7934 10096 8336 8076 4268 8208 3688 9304 8782 5100 6032) (7032 8798 3170 6776 8266 7418 8488 7736 5184 5736 8364 6312 8388) (7028 4714 5732 3078 6086 6734))) :lonset (quote (2000 3867 5000 7417 8900 10534 12250 14783 15783)) :ldur (quotelvel (quote ((100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100))) :loffset (quote ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0))) :lchan (quote ((1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.01 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 20 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 1292 576) (om-make-point 329 249) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 702 664) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "dragged 8" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 985 477) (om-make-point 60 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (7028 4714 5732 3078 6086 6734)) :ldur (quote (12600 17400 12475 15663 20950 14175)) :lvel (quote (50 50 50 50 50 50)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 0 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "dragged 7" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 720 442) (om-make-point 60 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (7032 8798 3170 6776 8266 7418 8488 7736 5184 5736 8364 6312 8388)) :ldur (quote (42637 21113 25750 20800 20988 20813 20425 20375 21462 23975 19375 21212 22012)) :lvel (quote (50 50 50 50 50 50 50 50 50 50 50 50 50)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 0 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "dragged 6" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 886 467) (om-make-point 60 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (8708 5560 8402 7032 8594 9986 10622 9954 10532 3380 9806 7972 7870 10118 7198 9410 9036 9146 7576 6504 9270 10924 8268 9644 10268 8944 9710 7380 9496 4722 7722 6118 5532 9432 6562)) :ldur (quote (35100 20463 26350 35100 20088 18562 18437 19162 19650 22525 18512 18412 18500 18437 18500 19062 18237 17825 19912 17275 19487 16887 17975 17125 0 19175 21112 17500 19400 35100 25500 33975 17288 19150 20187)) :lvel (quote (51 51 51 53 50 50 50 50 50 51 50 50 50 50 50 50 50 50 50 51 50 50 50 50 50 50 50 51 50 51 51 52 51 50 51)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 0 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "dragged 5" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 512 426) (om-make-point 60 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (7032 9178 9778 11216 11062 10620 10868 9006 9738 7640 7944 11242 8562 10154 10386 8712 9346 8364 10986 9462 6676 11180 10814 10538 9920 11364 8264 8872 9990 6074 10920 9410 10576 6390 8924 9772 9586 10114 8440 7360 5274 3146 9876 8082 10788 4714 9158 7668 8776)) :ldur (quote (27000 15612 18212 16175 14875 16125 16125 14575 14175 15075 14287 14875 17262 13387 13662 13625 14475 27000 14387 14300 13412 14587 13037 13187 14937 15712 14962 17475 16037 17575 13175 14737 12737 13062 26725 14512 20700 12687 13137 15762 27000 27000 12850 13112 13775 15900 12725 21387 27000)) :lvel (quote (65 51 51 50 50 50 50 51 51 53 51 50 51 50 50 52 51 55 50 51 55 50 50 50 50 50 52 51 51 60 50 51 50 55 52 51 50 50 53 54 55 58 50 51 50 59 51 54 59)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 0 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "dragged 4" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 1063 479) (om-make-point 60 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (5276 7032 10874 11790 11752 9874 12134 12082 4658 10786 10008 10494 8738 7594 11110 9628 8226 11352 11332 10390 11134 9336 12396 11862 8110 9780 12038 10752 9738 10390 10298 10108 7984 9072 11886 10984 6542 10576 9518 10816 11808 10542 9836 11176 10614 9236 9458 11834 10272 10134 7364 8380 9300 8980 8714 10224 3154 6088)) :ldur (quote (21737 21737 11412 11812 12462 11125 11050 11087 11075 11112 16175 11225 21737 11187 11037 10787 13262 11137 10637 10212 10387 11187 11675 10037 12612 21737 9775 12075 10875 9325 10400 10362 10200 13762 10187 16762 10637 12037 9925 10762 9325 11275 12275 10287 10262 12112 14600 9350 9412 0 10737 14425 10100 9612 9900 14137 19250 9262)) :lvel (quote (64 92 50 50 50 51 50 50 73 50 51 50 62 57 50 51 56 50 50 50 50 53 50 50 56 54 50 50 52 50 50 51 52 52 50 50 55 50 52 50 50 50 52 50 50 52 53 50 51 50 60 63 54 53 55 50 69 70)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 0 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "dragged 3" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 625 438) (om-make-point 60 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (7032 6362 5542 10204 9634 10066 10578 10156 4896 11380 9302 12502 10982 11218 12348 11134 11732 10288 12186 6174 10878 12294 8844 9066 8756 12394 7958 7526 9434 8930 9950 8570 7422 12058 10134 11540 6752 9894 10004 10620 10724 9728 3108 12326 9558 12524 11308 11318 10294 11412 12244 11160 10080 8248 12460 11028 10526 12350 10552 10466 9160 8394 11092 9246 7982 8504 7598 10106 9390 9018 5244)) :ldur (quote (20612 10987 14812 10550 12075 15350 13462 12825 20612 14512 13150 11712 13650 11562 11850 11850 12037 11037 10937 13187 11100 11637 18637 11375 18637 10612 10475 10875 11225 11712 10662 11262 10275 10962 13112 10412 13050 13025 15087 11750 11187 10725 13200 11250 11475 10450 14250 10187 10125 10025 13187 10237 10037 10100 10637 12825 10350 10187 12250 10087 10337 12775 12950 10037 18312 18112 13650 11275 11562 11700 11975)) :lvel (quote (127 67 68 51 51 53 51 52 79 50 58 50 51 50 50 50 50 51 50 82 51 50 65 53 89 50 53 57 57 60 51 56 61 50 53 50 77 52 52 52 51 55 75 50 53 50 50 50 51 50 50 50 52 54 50 50 51 50 51 50 53 60 50 52 58 62 63 53 53 54 69)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 0 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "dragged 2" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 813 467) (om-make-point 60 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (9908 10152 10750 10060 10222 11388 11314 8860 10580 10878 10624 10232 10504 10974 11618 11472 11500 7968 5810 9586 6366 9728 11796 10696 6722 11038 8448 10834 10008 7746 9816 8084 11382 8776 10916 7474 8592 9652 9420 10526 8942 5536 9990 7980 10384 11286 9710 11858 10726 7554 9860 9478 10660 10474 10126 8934 11096 9336 9076 5268 9208 4688 10304 9782 6100 7032)) :ldur (quote (7463 11325 7425 8313 10563 8900 8013 11000 8425 7538 8000 12500 8538 9600 8650 7400 11325 12500 7038 9163 7500 6738 7125 7913 7800 7225 6463 9163 6688 12500 8113 7513 6025 12500 6438 9163 8313 6025 12500 9900 5525 9950 5588 5513 6450 5738 5563 0 5863 6713 6300 5425 5575 6688 5663 5900 6388 8038 8938 12500 6400 12500 8100 12500 12500 12500)) :lvel (quote (50 50 50 51 50 50 50 52 50 50 50 51 50 50 50 50 50 51 51 50 53 51 50 50 52 50 51 50 50 54 51 51 50 57 50 51 51 50 52 50 51 52 50 50 50 50 50 50 50 51 50 50 50 50 50 51 50 51 50 53 50 55 50 52 59 63)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 0 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "dragged" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 446 422) (om-make-point 60 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (7882 10504 9262 10300 9594 10320 9738 7540 9780 10354 9390 9530 9084 9446 10120 8228 4776 8744 8964 10612 10634 6394 6786 10550 7984 9886 9976 7984 8486 9866 8498 9162 7300 8088 9742 5536 6102 7032 3138)) :ldur (quote (4775 6675 4813 6675 4363 4325 6363 4475 6675 6675 5688 3825 4075 6513 4025 3100 3162 3888 3075 6325 3325 3888 4275 4088 2600 5538 4413 4675 4325 3212 2700 5463 2900 6675 2675 3350 6675 6675 6675)) :lvel (quote (50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 51 51 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 52 52 51)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 0 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 67 105) (om-make-point 1311 289) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((3136) (7030) (6102) (6380) (5422) (7384) (4728) (8754) (9432) (6376) (7640) (5176) (6754) (8236) (9744) (8712) (7760 6374) (5782) (7894) (8606) (9778) (8820) (8300) (8488) (8748) (9330) (9410) (9246) (7432) (7996) (7736) (6400) (8238) (9924) (9148) (9836) (9314) (7360) (8890) (9186) (9816) (9338) (8230) (8406) (7522) (8998) (9650) (5804) (9902) (8556 7758) (7882 10504 9262 10300 9594 10320 9738 7540 9780 10354 9390 9530 9084 9446 10120 8228 4776 8744 8964 10612 10634 6394 6786 10550 7984 9886 9976 7984 8486 9866 8498 9162 7300 8088 9742 5536 6102 7032 3138) (9334) (7342) (8186) (10884) (7198) (4680) (8566) (10748) (5538) (10142) (10692) (8778) (10028) (10186) (8836) (10808) (10252) (9190 9074) (5078) (8408) (9662) (10418) (6738) (8600) (11276) (5828) (7880) (8714) (10468) (7372) (9700) (10698) (9136) (9324) (9418 9250) (10546) (10682) (9368) (10002) (9608) (11360) (7226) (6366) (10802) (8218) (8300) (9086) (10268 10134) (10624) (9908 10152 10750 10060 10222 11388 11314 8860 10580 10878 10624 10232 10504 10974 11618 11472 11500 7968 5810 9586 6366 9728 11796 10696 6722 11038 8448 10834 10008 7746 9816 8084 11382 8776 10916 7474 8592 9652 9420 10526 8942 5536 9990 7980 10384 11286 9710 11858 10726 7554 9860 9478 10660 10474 10126 8934 11096 9336 9076 5268 9208 4688 10304 9782 6100 7032) (10852) (11358) (8880) (9194) (10426) (9032) (7278) (8364) (11092) (10092) (11188) (9502) (9716 8954) (11580) (9244) (10786) (10004) (11556) (10546) (11526) (10758) (10724 3216) (8640) (11044 8106) (11742) (9846) (6784) (8248) (11474 5770) (10940 6374) (11448) (10102) (11796) (10050) (10874) (9914) (11520) (11288 7490) (9378) (9294) (10622 10578) (10528) (11786) (8712) (12172 9990 9572) (10916) (11630) (12068) (11378) (10788) (11602) (11896 8836) (12040 11748) (11690) (10968 8180) (11010) (10980) (7338) (11664) (10756) (11088) (9038) (9522) (11146) (10292) (9348) (10830) (10376) (5158) (9874) (11554) (8084) (10424) (8470) (11252) (11126) (10856) (11308) (10572) (11210) (6756) (9936) (10550) (11510) (11190) (10330) (10956) (11046) (10694) (10134) (9662) (10786 10052) (9726) (7762) (9158) (7224) (11812) (11660) (11358) (11488) (11712) (10008) (11870) (11906) (8904) (12308) (11280) (9470) (11058) (12084) (11096) (12048 11604) (8602) (7032 6362 5542 10204 9634 10066 10578 10156 4896 11380 9302 12502 10982 11218 12348 11134 11732 10288 12186 6174 10878 12294 8844 9066 8756 12394 7958 7526 9434 8930 9950 8570 7422 12058 10134 11540 6752 9894 10004 10620 10724 9728 3108 12326 9558 12524 11308 11318 10294 11412 12244 11160 10080 8248 12460 11028 10526 12350 10552 10466 9160 8394 11092 9246 7982 8504 7598 10106 9390 9018 5244) (10806 9312 6504 9206 11954) (9752 10784 11348) (12478 11588 10088 7916) (7236) (12380 10754) (9780) (12408) (11752) (10528) (10378) (8710) (12036) (10490 10212) (12222) (11244) (10272) (10964) (12022) (10010) (9108) (11428) (12568) (12452) (11192) (8574) (9712) (9432) (9488) (11410) (11872 8646) (12496) (7710) (12242) (12126) (10626) (11910) (8930) (12058) (12350) (5276) (11474) (10946) (11058 10194) (8408) (10874) (11316 8242) (12430 12070) (12394) (9322) (11934) (8202) (9848) (10758) (12098 7574) (10552) (12320 12014) (6066) (9406) (12296) (11162) (10128) (10722 10466) (9032) (6752) (6378) (11552) (8092) (11504) (3630) (12020) (10812) (10688) (10580) (11786) (10324) (10524) (10006) (8992) (9238) (12184 12154 7382) (12270 11882) (6528) (10394) (9556) (10992) (11790) (12074) (12592 12138) (9646) (12486) (11624) (9556) (12340) (12276) (12326) (12610 9076) (10272) (10146) (9948) (5536) (9688) (11042) (12222) (11246) (12008) (11578) (9712) (10070) (9424) (7588 7456) (11404) (11100) (10488) (7712) (12358) (12242) (8776) (12182 11452 3136) (8036) (11214) (12104) (11944) (12054 8488) (11130) (9226) (9478) (10540) (10366) (11992) (10916) (6374) (11666) (5792) (10998) (11814 11758) (10210) (9294) (9780) (10964) (12080) (9874) (9876) (9138) (12398) (12144) (6780) (7946) (4636) (9924) (8836) (12240 7358) (7740) (11962) (11906) (11978) (11040) (11232 8612) (8138) (8474) (10832) (12126 7190) (11644) (11876 8396) (12104 12068) (11438) (9458) (11174) (12042) (11836) (10608) (8236) (12314 11098) (9438) (9562) (9732) (10530) (8714) (11926) (9246) (10698) (12470) (12330) (10050) (11684) (7502) (11582) (6408) (10622) (11502) (9988) (10950) (8182) (10036) (10180) (11966) (11816) (5276 7032 10874 11790 11752 9874 12134 12082 4658 10786 10008 10494 8738 7594 11110 9628 8226 11352 11332 10390 11134 9336 12396 11862 8110 9780 12038 10752 9738 10390 10298 10108 7984 9072 11886 10984 6542 10576 9518 10816 11808 10542 9836 11176 10614 9236 9458 11834 10272 10134 7364 8380 9300 8980 8714 10224 3154 6088) (10660 7196) (9120) (11038) (12186) (11880) (11646) (10284) (8470 7684) (10408) (11854) (5624) (11728) (9696) (6384) (11624) (10500) (7356) (10542) (8724) (10612) (9040) (10836) (6090) (11412) (11688) (8356) (4676) (10374 6812) (11944) (11934) (8490) (11850) (11328) (10852) (11988) (8894) (11490) (9238) (11706 10760) (9940 9616) (8622) (11602) (10806) (12026) (11738) (7838) (8776) (11276) (6498) (10186) (11010 9476) (11158 9740) (11956) (10104) (9132) (6602) (12086) (11728) (10318) (10270) (11506) (11652) (6758) (10616) (10870) (10110) (10480) (7360) (9258) (11076) (11616) (9520) (10532) (8298) (9686) (9834) (9708) (11544) (10000) (10164) (12170) (7492) (8538) (9432 5730) (10402) (8820) (11288) (10640) (11810) (10848) (8150) (11106) (11188) (11444) (11686) (9116) (5558) (10058) (9460) (10268) (8396) (11152) (10308) (10764) (10528) (9294) (7864) (11452) (11852) (11206) (10828 9574) (9202) (11516) (11404 9924) (11784) (10030) (10982) (6490) (11748 10902) (11624) (11086 9744) (11028) (11878) (9050) (9138) (6370) (10680) (9854 9520) (9690) (9956) (8244) (11648 11378) (8426) (4206) (10574) (7974) (9810) (11356) (10738) (10620) (7738) (10084) (6808) (8626) (10872) (8360) (10494) (11624) (11682) (10950) (11292) (9296) (10276) (9616) (9972) (10042) (9140) (7764) (11124) (11556) (11188) (11650) (11708) (10976) (9572) (9808) (10134) (11592) (11798) (8822) (7470) (10772) (7032 9178 9778 11216 11062 10620 10868 9006 9738 7640 7944 11242 8562 10154 10386 8712 9346 8364 10986 9462 6676 11180 10814 10538 9920 11364 8264 8872 9990 6074 10920 9410 10576 6390 8924 9772 9586 10114 8440 7360 5274 3146 9876 8082 10788 4714 9158 7668 8776) (7492) (5702) (10320) (11394) (11012) (9082) (11038) (10266) (6710) (10492) (10570) (6346) (10360) (10974 10548) (10112) (11278) (9686) (10786) (10804) (10418) (9818 7866) (11094) (10174) (9018 9088) (11016) (8500) (11452) (10002 9424 7780) (10734) (9240) (10052) (9350) (9630) (7362) (7490) (4738) (10118 9292) (10866) (11204) (8080) (7798) (11280 9434 8686) (10784) (9020) (5706) (9826) (10650) (8242) (9056) (10698 7966) (10280) (11356) (6676) (9896) (10396) (11380 10544) (8556) (10432) (10166) (9720) (8596) (9152) (10622) (4720) (10500) (6164) (9034) (11036) (10004) (7692) (9514) (10810) (8514) (9334) (7908) (9822) (9292) (10734) (6690) (11280) (9576) (11222) (8710) (8272) (10180) (7182) (8138) (9706) (9868) (9946) (9234) (9780) (6278) (10260) (9406) (6014) (8414) (9666) (9472) (10574) (6898) (11070) (9002) (9346) (7642) (11278) (10180) (10802) (8492) (10438) (11214) (11094) (10300) (11404 9236) (8844) (8708 7762) (9836) (10872 9406) (9898) (10370) (10392) (10734) (11058) (10616) (9900) (8256) (10268) (9636) (10992) (10950 7198) (9782) (6424) (8132) (11036) (10162) (10108) (10916) (8932) (10786) (1362) (7866) (9242) (10442) (7352) (8636 6290 5648) (10858) (8430) (10248 9408) (9870) (10006) (10042) (6726) (9290) (9134) (10076) (11324) (9690) (10534) (10958) (9572) (9514) (3176) (8708 5560 8402 7032 8594 9986 10622 9954 10532 3380 9806 7972 7870 10118 7198 9410 9036 9146 7576 6504 9270 10924 8268 9644 10268 8944 9710 7380 9496 4722 7722 6118 5532 9432 6562) (6926) (9876) (8890) (10210) (6730 5382) (7394) (9640) (10136) (8204) (9486) (8490) (6402) (9260) (9960) (9294) (9890) (9432) (7658) (9404) (8236) (8778) (5278) (3198) (6408) (9784) (8618) (9508) (7358) (9924) (9242) (9150) (7986) (5572) (6484) (6726) (9674) (8118) (8256) (9372) (6780) (8570) (9012) (10042) (7764) (1406) (9434) (8828) (9932) (9816) (9506) (9342) (9150) (8488) (7476) (8116) (5570) (6390) (10160) (10106) (10030) (9408) (8544) (7646) (8396) (9192) (9662) (8926) (9770) (7950) (7482) (3386) (8810) (7666) (1572) (10158) (3324) (8936 6676) (9574) (8606) (9074) (9358) (8444) (5682) (8150) (7870) (8348) (9926) (8776) (7236) (6774) (9154) (9024) (8572) (8024) (9718) (9776) (9356) (8234) (9764) (8388) (9142) (3494) (7758) (7950) (9192) (8566) (9782) (9424) (9760) (6324) (6102) (6848) (9624) (7032 8798 3170 6776 8266 7418 8488 7736 5184 5736 8364 6312 8388) (7728) (8712) (6752) (7400) (8786) (8396) (8262) (6180) (7986) (5206) (6482) (7864) (8364) (7656) (6746) (6298) (6838) (6094) (7632) (8780) (5232) (4600) (3228) (7690) (8364) (8278) (6558) (7360) (8712) (5616) (7988) (6748) (4992) (7396) (5646) (4764) (7648) (8252) (8776) (6872) (8238) (6110) (7360) (5568) (8776) (7738) (8708) (7704) (3058) (6930) (5078) (5674) (7634) (6200) (4594) (6086) (5200) (4724) (7028 4714 5732 3078 6086 6734))) :lonset (quote (1285 1848 2723 4073 4785 6198 6673 6710 6823 7060 7685 7985 8148 8360 8685 8785 8898 9410 9598 9773 9948 10160 10773 10860 10998 11010 11098 11435 11535 11648 12198 12360 12473 13035 13323 13423 13435 13698 13723 14085 14210 14423 14610 14923 14985 15010 15148 15210 15573 15610 15773 18348 18398 18448 18573 18660 18748 18760 19010 19048 19298 19335 19348 19360 19373 19510 19560 19585 19685 19698 19885 19898 20023 20035 20173 20323 20485 20523 20610 20660 20760 20848 21085 21198 21248 21348 21435 21448 21460 21535 21598 22048 22098 22123 22135 22185 22273 22410 22423 22435 22448 27885 28060 28273 28310 28323 28335 28498 28523 28660 28710 28760 28798 28823 28835 28898 28910 28923 28935 28960 28998 29110 29160 29185 29435 29460 29573 29623 29710 29735 29948 30023 30073 30098 30298 30385 30535 30610 30723 30760 30860 30885 30910 30948 30973 30998 31123 31185 31310 31323 31385 31398 31435 31523 31548 31560 31573 31760 31773 31785 31835 31848 31860 31948 32010 32023 32173 32373 32385 32398 32560 32623 32635 32660 32785 32848 32873 32910 32973 33035 33110 33135 33210 33273 33285 33360 33423 33548 33610 33660 33685 33735 33848 33860 33935 33985 34010 34048 34098 34160 34210 34285 34323 34410 34560 34585 34598 34610 34635 34660 34810 34835 34873 34923 34948 44923 44935 44948 44960 45135 45198 45210 45235 45260 45273 45310 45323 45385 45460 45535 45573 45685 45735 45748 45773 45810 45873 45935 45960 45985 45998 46023 46060 46073 46110 46148 46310 46348 46398 46435 46498 46535 46660 46748 46848 46923 46985 47023 47035 47048 47060 47123 47160 47298 47423 47435 47460 47510 47610 47623 47635 47648 47673 47698 47710 47723 47748 47823 47923 48035 48048 48123 48135 48148 48185 48223 48248 48298 48323 48335 48385 48410 48435 48448 48485 48498 48535 48560 48673 48710 48810 48898 48910 48923 48985 49210 49223 49310 49335 49348 49385 49398 49560 49660 49735 49848 49973 50123 50135 50148 50185 50273 50285 50323 50360 50385 50448 50548 50585 50598 50635 50685 50698 50723 50785 50960 51085 51098 51210 51310 51335 51398 51448 51460 51535 51560 51585 51598 51635 51660 51773 51835 51885 51910 51960 51985 52023 52123 52335 52423 52435 52685 52723 52785 52823 52910 52948 53010 53148 53173 53223 53373 53398 53410 53485 53510 53548 53573 53585 53598 53710 53760 53798 53898 53998 54060 54085 54110 54210 54235 54248 54260 54298 54310 54323 54385 54398 54410 54473 54498 54748 54885 54898 54985 55048 55123 55160 55198 55223 55260 55348 55560 64823 64835 64935 64998 65010 65185 65285 65298 65323 65685 65835 66110 66335 66385 66398 66410 66535 66685 66710 66723 66935 66985 67173 67323 67398 67410 67435 67510 67735 67748 67848 67873 67885 67948 68060 68148 68210 68323 68435 68523 68560 68573 68610 68648 68660 68698 68873 68885 68948 68998 69035 69110 69185 69235 69298 69423 69498 69510 69573 69710 69748 69910 69923 69948 69960 70010 70085 70098 70148 70273 70298 70323 70348 70435 70473 70510 70585 70598 70610 70635 70660 70735 70773 70898 71135 71173 71223 71460 71573 71635 71735 71798 71910 71985 71998 72148 72185 72285 72360 72373 72460 72485 72498 72810 72948 73198 73223 73273 73323 73398 73560 73623 73660 73723 73748 73785 73798 73985 73998 74085 74098 74123 74148 74160 74235 74385 74435 74448 74460 74473 74485 74523 74648 74685 74735 74823 74848 74885 75098 75148 75210 75310 75323 75510 75535 75560 75585 75785 75835 75848 75998 76110 76223 76323 76385 76423 76473 76510 76523 76585 76598 76698 76710 76760 76885 76923 77010 77023 77098 77173 77185 77198 77298 89685 89710 89810 89860 89973 90010 90110 90235 90310 90373 90435 90523 90573 90585 90598 90673 90735 90760 91023 91348 91573 91635 91660 91735 91835 92173 92235 92273 92310 92423 92548 92760 92810 92823 92985 93335 93385 93448 93460 93623 93635 93923 93948 94060 94110 94135 94323 94360 94398 94410 94485 94498 94535 94560 94673 94810 94985 95035 95148 95248 95273 95435 95598 95623 95635 95973 95998 96335 96410 96523 96560 96623 96660 96748 96835 96948 96973 96998 97173 97185 97248 97285 97448 97548 97560 97623 97723 97748 97798 97835 97848 97985 98110 98173 98323 98373 98385 98398 98610 98623 98660 98685 99035 99148 99223 99360 99448 99485 99598 99623 99748 99860 99885 100048 100060 100323 100348 100448 100523 100635 100660 100760 100785 100798 100973 101048 101123 101135 101173 101260 101323 101335 101485 101510 101523 101748 101835 102123 102323 102360 102398 102435 102498 102585 102610 102623 102735 102773 102973 103198 103223 103398 103598 103610 103635 103735 103835 103948 104060 104160 104235 104248 104298 120948 120960 121373 121498 121535 121673 121810 122098 122148 122323 122373 122560 122848 122860 123048 123173 123373 123385 123398 123685 123723 124060 124498 124685 124785 124910 124948 125198 125248 125510 125585 125873 125885 126360 126435 126448 126635 127023 127160 127273 127298 127898 128085 128210 128273 128298 128423 128535 128573 128760 128860 128873 128935 129048 129298 129635 129760 129960 129985 130073 130135 130460 130510 130598 130635 130810 130948 131048 131060 131210 131223 131860 132035 132573 132948 132960 133310 133360 133660 133673 133735 133835 133848 133873 134148 134298 134323 134473 134498 134560 134923 134998 135248 135298 135385 135423 136198 136235 136373 136735 136823 136973 136998 137223 137585 137873 137898 138023 138198 138348 138398 139235 139385 139398 159485 159710 159798 160073 160173 160260 160360 160523 160610 160798 160898 160910 161410 161485 161535 161985 162798 163260 163585 164360 164460 164635 164948 166010 166098 166235 166473 166835 166848 167085 167410 167723 168723 169348 169535 169560 169823 170173 171023 171260 172773 173435 173585 173873 174423 174935 175748 176498 176723 176760 177048 177223 177435 178060 179323 179335 179835 181435 182035 202985)) :ldur (quote ((14487) (13925) (13050) (2950) (10987) (5625) (8962) (3025) (8950) (2025) (3063) (2150) (7625) (2137) (7087) (3587) (2250 2600) (3262) (6175) (5775) (3112) (2112) (2037) (2187) (4775) (2412) (2450) (2963) (2412) (2587) (3575) (2413) (2225) (2637) (2450) (2350) (2112) (2075) (2050) (1687) (1562) (1350) (1163) (850) (788) (763) (625) (563) (200) (163 163) (4775 6675 4813 6675 4363 4325 6363 4475 6675 6675 5688 3825 4075 6513 4025 3100 3162 3888 3075 6325 3325 3888 4275 4088 2600 5538 4413 4675 4325 3212 2700 5463 2900 6675 2675 3350 6675 6675 6675) (2050) (2038) (3125) (3875) (3513) (3700) (3688) (2638) (3400) (3150) (2162) (3100) (2262) (3075) (2938) (2063) (2862) (2763 2750) (2750) (2563) (2175) (2100) (2412) (2175) (2125) (1962) (1925) (1837) (1787) (1688) (1600) (1362) (1250) (1200) (1100 1087) (1013) (1000) (987) (912) (850) (400) (350) (325) (313) (263) (175) (37) (25 25) (13) (7463 11325 7425 8313 10563 8900 8013 11000 8425 7538 8000 12500 8538 9600 8650 7400 11325 12500 7038 9163 7500 6738 7125 7913 7800 7225 6463 9163 6688 12500 8113 7513 6025 12500 6438 9163 8313 6025 12500 9900 5525 9950 5588 5513 6450 5738 5563 0 5863 6713 6300 5425 5575 6688 5663 5900 6388 8038 8938 12500 6400 12500 8100 12500 12500 12500) (4613) (2488) (2100) (6638) (6625) (2963) (2725) (2025) (2463) (2988) (3363) (2025) (6100 3313) (2188) (2775) (2600) (2300) (3438) (4875) (2163) (2788) (5788 5788) (4063) (2050 3300) (2100) (2750) (3513) (2763) (5213 5200) (2050 4775) (4088) (4875) (3400) (3288) (2200) (3225) (2313) (2000 3837) (2300) (3225) (4063 2525) (2163) (3825) (3975) (2875 2988 2938) (3825) (3063) (3638) (3625) (2150) (3400) (2550 3513) (2125 2287) (2137) (2550 3050) (3375) (2850) (3175) (2188) (3112) (2450) (2012) (2650) (2938) (2925) (2712) (2575) (2563) (2550) (2388) (2325) (2313) (2087) (2162) (2100) (2075) (2037) (1975) (1912) (1837) (1813) (1737) (1675) (1662) (1587) (1525) (1400) (1337) (1287) (1263) (1212) (1100 1100) (1087) (1013) (962) (938) (900) (850) (787) (737) (662) (625) (537) (388) (362) (350) (337) (313) (287) (138) (112) (75 75) (25) (20612 10987 14812 10550 12075 15350 13462 12825 20612 14512 13150 11712 13650 11562 11850 11850 12037 11037 10937 13187 11100 11637 18637 11375 18637 10612 10475 10875 11225 11712 10662 11262 10275 10962 13112 10412 13050 13025 15087 11750 11187 10725 13200 11250 11475 10450 14250 10187 10125 10025 13187 10237 10037 10100 10637 12825 10350 10187 12250 10087 10337 12775 12950 10037 18312 18112 13650 11275 11562 11700 11975) (2037 2362 2612 2912 1875) (63 4825 4125) (2813 2938 2575 2237) (5763) (4200 2250) (5150) (2438) (3462) (3175) (3037) (5375) (2413) (2975 2288) (2300) (2225) (2100) (2463) (3275) (2688) (2088) (4463) (2025) (7237) (3088) (5325) (4738) (3800) (6025) (2213) (3025 3325) (2450) (4113) (4975) (2612) (2413) (3688) (3650) (2712) (4388) (5675) (2975) (2987) (3350 3625) (2888) (2175) (3288 2238) (4137 2763) (4325) (3137) (3225) (5012) (2763) (2013) (3425 2425) (4650) (2125 5312) (7912) (2125) (7862) (4188) (2300) (2150 2725) (2788) (3675) (3438) (2037) (3200) (7087) (2388) (2963) (2325) (7313) (4275) (2150) (3850) (2600) (7150) (5262) (2000) (3312 2162 2100) (2575 5662) (2125) (2275) (2438) (3013) (2950) (2037) (3525 2600) (2375) (5900) (2350) (3900) (2987) (3962) (5037) (3975 6175) (2325) (6000) (2825) (5825) (2537) (2900) (3662) (2175) (5412) (3125) (5287) (3837) (4888) (2362 5200) (2725) (3187) (3837) (4787) (4412) (2062) (4875) (4862 4850 4862) (2050) (2075) (3875) (3162) (2175 2662) (2313) (4250) (2587) (2775) (2150) (2550) (2275) (2612) (2037) (2562) (2225) (3862 2850) (2225) (3725) (3675) (3650) (2012) (3575) (2112) (2425) (3225) (3137) (2300) (2362) (2838) (2450) (2737) (2650 2650) (2025) (2550) (2412) (2388) (2338) (2150 2188) (2162) (2150) (2075) (2050 2025) (2012) (1987 1987) (1975 1975) (1963) (1850) (1800) (1762) (1662) (1563) (1500) (1475 1475) (1450) (1350) (1325) (1313) (1300) (1262) (1250) (1237) (1175) (1162) (1150) (1088) (1063) (813) (675) (662) (575) (513) (438) (400) (362) (338) (300) (213) (21737 21737 11412 11812 12462 11125 11050 11087 11075 11112 16175 11225 21737 11187 11037 10787 13262 11137 10637 10212 10387 11187 11675 10037 12612 21737 9775 12075 10875 9325 10400 10362 10200 13762 10187 16762 10637 12037 9925 10762 9325 11275 12275 10287 10262 12112 14600 9350 9412 0 10737 14425 10100 9612 9900 14137 19250 9262) (2425 1825) (2075) (3438) (2450) (4700) (5262) (3113) (2237 4462) (3875) (2725) (2450) (4012) (4375) (2863) (2213) (4963) (3725) (2463) (2400) (2313) (5625) (4963) (10125) (2200) (2075) (3438) (2200) (3287 2200) (4250) (2287) (2037) (2550) (4700) (2637) (3200) (9150) (2837) (5000) (4150 2112) (2625 5375) (2100) (2037) (2325) (2237) (6875) (5825) (8425) (3500) (5937) (2125) (3488 3262) (2013 5713) (2725) (3500) (2350) (2162) (2213) (2037) (3562) (2837) (3200) (2563) (2250) (2937) (2000) (7287) (2637) (7200) (2750) (2750) (4912) (3900) (2813) (2012) (3262) (2675) (3800) (4338) (3225) (2300) (3363) (3687) (4887) (2112 3100) (3000) (2437) (2262) (3012) (2275) (2775) (5563) (2475) (2537) (2038) (2825) (2375) (5113) (2750) (4938) (4175) (2525) (4050) (4800) (4488) (4350) (2425) (2475) (4025) (3975) (2250) (3738 3362) (3675) (2188) (3150 3575) (3112) (2975) (2225) (3313) (2512 2188) (2050) (3200 3200) (3175) (3025) (3138) (2350) (2763) (2550) (2525 2850) (2813) (2125) (2212) (2137 2600) (2012) (2613) (2237) (2225) (2450) (2413) (2200) (2150) (2088) (1988) (1975) (1787) (1738) (1738) (1713) (1513) (1463) (1450) (1300) (1188) (1075) (975) (912) (875) (825) (788) (775) (713) (700) (600) (588) (538) (412) (375) (287) (275) (200) (125) (100) (100) (27000 15612 18212 16175 14875 16125 16125 14575 14175 15075 14287 14875 17262 13387 13662 13625 14475 27000 14387 14300 13412 14587 13037 13187 14937 15712 14962 17475 16037 17575 13175 14737 12737 13062 26725 14512 20700 12687 13137 15762 27000 27000 12850 13112 13775 15900 12725 21387 27000) (787) (2775) (2000) (4037) (2575) (2412) (2325) (3350) (3862) (3275) (5487) (6237) (4250) (2912 2188) (2863) (3400) (2550) (2662) (2012) (2412) (2425 2012) (5812) (2825) (2337 2462) (2212) (2375) (6450) (2825 12025 2600) (2662) (5050) (2263) (2287) (2037) (10487) (2412) (2387) (4850 2700) (3662) (2450) (3225) (5025) (3337 3350 4875) (6462) (2313) (2325) (2187) (2725) (3637) (3275) (2075 2575) (3775) (2313) (3338) (2275) (2100) (2325 2088) (7400) (4650) (2150) (2450) (2237) (4325) (2900) (8675) (2025) (2438) (4175) (3100) (4400) (3063) (6188) (2412) (5262) (2438) (4600) (3287) (4613) (2088) (6637) (2450) (2963) (2575) (2938) (2412) (2387) (2725) (4412) (6550) (2862) (2575) (2500) (2925) (2112) (3037) (2187) (5925) (4775) (2925) (2112) (5650) (2162) (3063) (2575) (4563) (5075) (2050) (4850) (3212) (2050) (2412) (2750) (2700) (2087) (2362 2600) (2225) (3975 3975) (3950) (3850 2300) (3775) (3662) (2225) (2500) (2537) (2412) (2050) (3250) (3175) (3162) (3125) (3037 2862) (2975) (2412) (2813) (2337) (2775) (2425) (2225) (2175) (1975) (1938) (1900) (1863) (1787) (1713) (1688 1688 1688) (1675) (1563) (1525 1525) (1325) (1100) (1075) (900) (700) (688) (662) (563) (463) (350) (238) (138) (63) (50) (35100 20463 26350 35100 20088 18562 18437 19162 19650 22525 18512 18412 18500 18437 18500 19062 18237 17825 19912 17275 19487 16887 17975 17125 0 19175 21112 17500 19400 35100 25500 33975 17288 19150 20187) (2987) (2075) (6150) (2087) (4637 3575) (4050) (2925) (6513) (2425) (2650) (3425) (3075) (4063) (2100) (2788) (2400) (3800) (2237) (2713) (3563) (5000) (15338) (3650) (2225) (4663) (2188) (2700) (10862) (3200) (13888) (3088) (5512) (3850) (5825) (2075) (2575) (3350) (9025) (3013) (2638) (2763) (5912) (2500) (4875) (3600) (6462) (2663) (5650) (2025) (4587) (3025) (6200) (2637) (2000) (2750) (4787) (3650) (2850) (2825) (3625) (3825) (2787) (2375) (4012) (2812) (3162) (2850) (3987) (3850) (3113) (2425) (2688) (7363) (2012) (2087) (2875) (3275 2525) (3613) (3275) (5725) (2575) (2287) (5550) (2100) (2150) (2663) (5037) (4925) (3187) (4837) (2088) (4400) (2112) (2125) (2100) (2288) (3200) (3163) (3025) (2663) (2550) (2425) (2400) (2125) (1813) (1525) (1500) (1375) (1200) (1050) (1000) (163) (12) (42637 21113 25750 20800 20988 20813 20425 20375 21462 23975 19375 21212 22012) (8637) (2887) (2038) (7462) (4213) (6813) (3988) (2150) (3262) (3762) (3650) (5025) (2675) (2175) (2150) (3375) (2438) (9100) (2037) (6788) (3000) (4813) (6125) (3700) (7975) (4463) (2050) (2575) (7988) (2137) (2087) (14313) (2125) (2137) (4988) (10550) (6887) (3025) (3125) (2337) (2000) (5062) (3787) (2650) (3338) (5762) (2375) (3125) (5313) (5275) (2387) (2625) (2600) (2312) (2712) (2700) (2200) (600) (12600 17400 12475 15663 20950 14175))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50 50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50 50) (50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 51 51 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 52 52 51) (50) (50) (50) (50) (50) (51) (50) (50) (50) (50) (50) (51) (50) (50) (51) (50) (50) (50 50) (51) (50) (50) (50) (51) (50) (50) (50) (50) (51) (50) (51) (50) (50) (50) (50) (50 50) (50) (50) (50) (50) (50) (50) (50) (51) (50) (51) (50) (50) (50 50) (50) (50 50 50 51 50 50 50 52 50 50 50 51 50 50 50 50 50 51 51 50 53 51 50 50 52 50 51 50 50 54 51 51 50 57 50 51 51 50 52 50 51 52 50 50 50 50 50 50 50 51 50 50 50 50 50 51 50 51 50 53 50 55 50 52 59 63) (50) (50) (51) (51) (50) (50) (51) (51) (50) (50) (50) (51) (51 51) (50) (51) (50) (50) (50) (51) (50) (50) (50 55) (51) (50 52) (50) (51) (53) (51) (50 52) (50 54) (50) (51) (50) (51) (50) (51) (50) (50 52) (51) (51) (51 50) (50) (50) (52) (50 50 51) (50) (50) (50) (50) (50) (50) (50 54) (50 50) (50) (50 53) (50) (50) (53) (50) (50) (50) (51) (51) (50) (50) (51) (50) (50) (55) (51) (50) (52) (50) (53) (50) (50) (50) (50) (50) (50) (56) (50) (51) (50) (50) (50) (50) (50) (50) (51) (51) (51 51) (52) (57) (51) (51) (50) (50) (50) (50) (50) (50) (50) (50) (52) (50) (50) (53) (50) (50) (50) (50 50) (52) (127 67 68 51 51 53 51 52 79 50 58 50 51 50 50 50 50 51 50 82 51 50 65 53 89 50 53 57 57 60 51 56 61 50 53 50 77 52 52 52 51 55 75 50 53 50 50 50 51 50 50 50 52 54 50 50 51 50 51 50 53 60 50 52 58 62 63 53 53 54 69) (51 55 58 54 50) (53 51 50) (50 50 52 53) (57) (50 50) (59) (50) (50) (51) (51) (61) (50) (51 52) (50) (50) (51) (51) (50) (52) (54) (50) (50) (50) (50) (57) (55) (59) (58) (50) (50 54) (50) (76) (50) (50) (51) (50) (62) (50) (50) (76) (50) (51) (50 51) (62) (51) (50 59) (50 50) (50) (56) (50) (66) (53) (50) (50 61) (51) (50 50) (90) (55) (50) (50) (53) (50 51) (56) (76) (72) (50) (58) (50) (75) (50) (51) (51) (51) (50) (51) (51) (54) (58) (54) (50 50 67) (50 50) (57) (51) (54) (51) (50) (50) (50 50) (53) (50) (50) (53) (50) (50) (50) (50 55) (52) (52) (52) (78) (54) (50) (50) (50) (50) (50) (55) (52) (58) (61 71) (50) (50) (51) (70) (50) (50) (100) (50 50 102) (56) (50) (50) (50) (50 59) (50) (54) (59) (51) (51) (50) (50) (65) (50) (61) (50) (50 50) (51) (56) (60) (50) (50) (52) (52) (53) (50) (50) (71) (56) (78) (52) (58) (50 69) (69) (50) (50) (50) (50) (50 54) (61) (58) (50) (50 55) (50) (50 64) (50 50) (50) (55) (50) (50) (50) (51) (68) (50 50) (56) (52) (54) (51) (61) (50) (55) (51) (50) (50) (52) (50) (61) (50) (63) (51) (50) (51) (50) (62) (51) (51) (50) (50) (64 92 50 50 50 51 50 50 73 50 51 50 62 57 50 51 56 50 50 50 50 53 50 50 56 54 50 50 52 50 50 51 52 52 50 50 55 50 52 50 50 50 52 50 50 52 53 50 51 50 60 63 54 53 55 50 69 70) (50 54) (52) (50) (50) (50) (50) (50) (56 59) (50) (50) (60) (50) (52) (63) (50) (50) (60) (50) (57) (50) (53) (50) (72) (50) (50) (56) (71) (50 64) (50) (50) (54) (50) (50) (50) (50) (52) (50) (52) (50 50) (51 51) (52) (50) (50) (50) (50) (56) (68) (50) (58) (50) (50 53) (50 52) (50) (51) (52) (58) (50) (50) (50) (51) (50) (50) (66) (50) (50) (51) (50) (59) (52) (50) (50) (52) (50) (58) (52) (52) (51) (50) (51) (51) (50) (53) (53) (52 56) (50) (54) (50) (50) (50) (50) (55) (50) (50) (50) (50) (51) (57) (51) (53) (50) (57) (50) (50) (50) (50) (52) (53) (50) (50) (50) (50 51) (51) (50) (50 51) (50) (51) (50) (56) (50 50) (50) (50 51) (50) (50) (52) (52) (57) (50) (51 52) (51) (50) (53) (50 50) (57) (61) (50) (51) (51) (50) (50) (50) (56) (51) (60) (52) (50) (59) (50) (50) (50) (50) (50) (52) (50) (50) (51) (51) (51) (60) (50) (50) (50) (50) (50) (50) (51) (51) (51) (50) (50) (53) (54) (50) (65 51 51 50 50 50 50 51 51 53 51 50 51 50 50 52 51 55 50 51 55 50 50 50 50 50 52 51 51 60 50 51 50 55 52 51 50 50 53 54 55 58 50 51 50 59 51 54 59) (52) (52) (50) (50) (50) (51) (50) (50) (55) (50) (50) (55) (50) (50 50) (50) (50) (50) (50) (50) (50) (51 51) (50) (50) (51 51) (50) (51) (50) (51 51 56) (50) (51) (50) (51) (50) (53) (52) (57) (50 51) (50) (50) (51) (54) (50 51 52) (50) (51) (52) (50) (50) (52) (51) (50 51) (50) (50) (54) (50) (50) (50 50) (51) (50) (50) (50) (51) (51) (50) (56) (50) (57) (51) (50) (50) (54) (50) (50) (51) (50) (51) (51) (51) (50) (54) (50) (50) (50) (52) (51) (50) (51) (51) (50) (50) (50) (51) (51) (55) (50) (51) (55) (53) (50) (51) (50) (53) (50) (51) (50) (52) (50) (50) (50) (51) (50) (50) (50) (50) (50 51) (51) (54 55) (50) (50 50) (50) (50) (50) (50) (50) (50) (50) (51) (50) (50) (50) (50 51) (51) (52) (51) (50) (50) (50) (50) (51) (50) (51) (51) (51) (50) (52) (50 53 52) (50) (51) (50 50) (50) (50) (50) (53) (51) (50) (50) (50) (50) (50) (50) (50) (50) (54) (51 51 51 53 50 50 50 50 50 51 50 50 50 50 50 50 50 50 50 51 50 50 50 50 50 50 50 51 50 51 51 52 51 50 51) (52) (50) (50) (50) (51 51) (51) (50) (50) (51) (50) (50) (51) (50) (50) (50) (50) (50) (50) (50) (50) (51) (51) (51) (51) (50) (50) (50) (51) (50) (50) (50) (50) (51) (51) (51) (50) (50) (50) (50) (51) (50) (50) (50) (51) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (51) (51) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (51) (50) (50) (50) (50) (51) (50 50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (51) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (51) (51) (50) (50) (50 50 50 50 50 50 50 50 50 50 50 50 50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50 50 50 50 50 50))) :loffset (quotelchan (quotelegato 0)))) (load-port-info newobj (quoteinit-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.01 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 174 85) (om-make-point 1518 682) 0 1000 nil 249/100 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 48 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 1 0 2 nil 0) (2 1 1 1 nil 0) (3 1 2 1 nil 0) (4 0 3 1 nil 0) (12 1 4 0 nil 0) (8 1 4 1 nil 0) (10 1 4 2 nil 0) (6 1 4 3 nil 0) (11 1 4 4 nil 0) (7 1 4 5 nil 0) (5 1 4 6 nil 0) (9 1 4 7 nil 0))) 7.01 nil "" (om-make-point 0 44) (om-make-point 1800 1038)) (quote nil) (om-make-point 898 261) nil nil nil "getting chords"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "woman feedback to orc.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 1566 43) (om-make-point 70 50) (let ((newobj (load-sdif-file (om-make-pathname :directory (quote (:absolute "Users" "samdvorin" "Desktop" "stagnation" "audio outs to analyze")) :device nil :host nil :name "woman feedback to orc" :type "sdif")))) (when newobj) newobj) "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 400 500))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "high prom flickers.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 1226 48) (om-make-point 70 50) (let ((newobj (load-sdif-file (om-make-pathname :directory (quote (:absolute "Users" "samdvorin" "Desktop" "stagnation" "audio outs to analyze")) :device nil :host nil :name "high prom flickers" :type "sdif")))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 400 500) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "high prom ring.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 1392 35) (om-make-point 70 50) (let ((newobj (load-sdif-file (om-make-pathname :directory (quote (:absolute "Users" "samdvorin" "Desktop" "stagnation" "audio outs to analyze")) :device nil :host nil :name "high prom ring" :type "sdif")))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 400 500) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "midi tests" (om-load-patch-abs1 "midi tests" (quote ((let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 0) (om-load-inputfun (quote input-funbox) "number or list" "NUM" 50))) (om-make-point 491 360) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE 2" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 188 461) (om-make-point 733 225) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (20 (((4 4) (-2 (1 (-1 1)) (1 (3.0 1)))) ((4 4) (1 (1 (1.0 3)) (1 (2.0 1 1)) (1 (1.0 1)))) ((4 4) ((1 (1.0 2 1)) (1 (1 1)) 2.0)) ((4 4) (2.0 2)) ((4 4) ((1 (3.0 1)) (1 (1 1)) (1 (1 3)) (1 (2 1 1)))) ((4 4) (1.0 1 (1 (1.0 1)) 1.0)) ((4 4) ((1 (1.0 1 1 1)) 1 (1 (1 1)) (1 (1.0 1)))) ((4 4) ((1 (1.0 1)) 1 (1 (1.0 1 1 1)) (1 (1.0 2 1)))) ((4 4) ((1 (1.0 3)) 3.0)) ((4 4) ((1 (1.0 3)) 3.0)) ((4 4) (4.0)) ((4 4) (3.0 (1 (1 2 1)))) ((4 4) ((1 (1 3)) (1 (3.0 1)) (1 (1.0 1 1 1)) (1 (1.0 1)))) ((4 4) (2.0 1 (1 (1 1 2)))) ((4 4) (2.0 (1 (1.0 1 2)) (1 (1.0 3)))) ((4 4) ((1 (1 1 2)) (1 (1.0 3)) (1 (2.0 1 1)) (1 (1 1)))) ((4 4) ((1 (1 3)) (1 (1 1)) (1 (1.0 3)) (1 (2.0 1 1)))) ((4 4) ((1 (2 1 1)) (1 (1 1 1 1)) (1 (1.0 3)) (1 (1 4)))) ((4 4) (1.0 (1 (3.0 1)) 1.0 (1 (1.0 3)))) ((4 4) ((1 (1.0 1 2)) 1.0 (1 (1 1 1 1)) (1 (4 1.0 2))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4450)) :ldur (quote (294)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5250)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4650)) :ldur (quote (588)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6450 5650)) :ldur (quote (441 441)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6850)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7950 7050)) :ldur (quote (294 294)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7450 6950)) :ldur (quote (294 294)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7850 7250)) :ldur (quote (294 294)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (294)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4350)) :ldur (quote (1176)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6450)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7950)) :ldur (quote (294)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6650 5250)) :ldur (quote (294 294)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6850)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5650)) :ldur (quote (441)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5850)) :ldur (quote (294)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7350)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5150 5050)) :ldur (quote (588 588)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5650 5450)) :ldur (quote (294 294)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6150)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6950)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050 6850)) :ldur (quote (147 147)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6950)) :ldur (quote (588)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6950)) :ldur (quote (294)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5750 4850)) :ldur (quote (294 294)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5350)) :ldur (quote (294)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6650)) :ldur (quote (294)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6950)) :ldur (quote (588)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6150)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6350 6250)) :ldur (quote (147 147)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5850)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7150)) :ldur (quote (294)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5350)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7150)) :ldur (quote (441)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7150)) :ldur (quote (441)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5750)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5350)) :ldur (quote (294)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6850 6450)) :ldur (quote (147 147)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7150)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6050)) :ldur (quote (441)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6650)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6750)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5350)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6050)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750 6750)) :ldur (quote (294 294)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6150 6050 6050)) :ldur (quote (588 588 588)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (3 3 3))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6650 6150)) :ldur (quote (147 147)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8150)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8450 7850)) :ldur (quote (294 294)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9150 9050 9050)) :ldur (quote (294 294 294)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (3 3 3))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5350)) :ldur (quote (441)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8750)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9150 6250)) :ldur (quote (147 147)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5750 5450)) :ldur (quote (294 294)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8750)) :ldur (quote (441)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6150)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5450)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6750 5750)) :ldur (quote (294 294)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7550)) :ldur (quote (294)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8950 8150 8050)) :ldur (quote (147 147 147)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (3 3 3))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8850)) :ldur (quote (441)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8950)) :ldur (quote (294)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8850)) :ldur (quote (294)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5950 5850)) :ldur (quote (441 441)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7150 6650 6350)) :ldur (quote (147 147 147)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (3 3 3))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5650)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7350)) :ldur (quote (294)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6050)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6850 6150)) :ldur (quote (147 147)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8950 6350)) :ldur (quote (147 147)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8450)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8050)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6650)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8250)) :ldur (quote (441)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7950)) :ldur (quote (118)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8950)) :ldur (quote (471)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7350 7250 7150)) :ldur (quote (147 147 147)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (3 3 3))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6950)) :ldur (quote (441)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (294)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8150)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7450)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8150)) :ldur (quote (336)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7250)) :ldur (quote (168)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 102) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 219 178) (om-make-point 560 155) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (20 (((4 4) (-2 (1 (-1 1)) (1 (3.0 1)))) ((4 4) (1 (1 (1.0 3)) (1 (2.0 1 1)) (1 (1.0 1)))) ((4 4) ((1 (1.0 2 1)) (1 (1 1)) 2.0)) ((4 4) (2.0 2)) ((4 4) ((1 (3.0 1)) (1 (1 1)) (1 (1 3)) (1 (2 1 1)))) ((4 4) (1.0 1 (1 (1.0 1)) 1.0)) ((4 4) ((1 (1.0 1 1 1)) 1 (1 (1 1)) (1 (1.0 1)))) ((4 4) ((1 (1.0 1)) 1 (1 (1.0 1 1 1)) (1 (1.0 2 1)))) ((4 4) ((1 (1.0 3)) 3.0)) ((4 4) ((1 (1.0 3)) 3.0)) ((4 4) (4.0)) ((4 4) (3.0 (1 (1 2 1)))) ((4 4) ((1 (1 3)) (1 (3.0 1)) (1 (1.0 1 1 1)) (1 (1.0 1)))) ((4 4) (2.0 1 (1 (1 1 2)))) ((4 4) (2.0 (1 (1.0 1 2)) (1 (1.0 3)))) ((4 4) ((1 (1 1 2)) (1 (1.0 3)) (1 (2.0 1 1)) (1 (1 1)))) ((4 4) ((1 (1 3)) (1 (1 1)) (1 (1.0 3)) (1 (2.0 1 1)))) ((4 4) ((1 (2 1 1)) (1 (1 1 1 1)) (1 (1.0 3)) (1 (1 4)))) ((4 4) (1.0 (1 (3.0 1)) 1.0 (1 (1.0 3)))) ((4 4) ((1 (1.0 1 2)) 1.0 (1 (1 1 1 1)) (1 (4 1.0 2))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4400)) :ldur (quote (294)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (588)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 5600)) :ldur (quote (441 441)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900 7000)) :ldur (quote (294 294)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400 6900)) :ldur (quote (294 294)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800 7200)) :ldur (quote (294 294)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (294)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (1176)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (294)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600 5200)) :ldur (quote (294 294)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (441)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (294)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100 5000)) :ldur (quote (588 588)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600 5400)) :ldur (quote (294 294)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000 6800)) :ldur (quote (147 147)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (588)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (294)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 4800)) :ldur (quote (294 294)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (294)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (294)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (588)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300 6200)) :ldur (quote (147 147)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (294)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (441)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (441)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (294)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800 6400)) :ldur (quote (147 147)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (441)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700 6700)) :ldur (quote (294 294)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100 6000 6000)) :ldur (quote (588 588 588)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (3 3 3))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600 6100)) :ldur (quote (147 147)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400 7800)) :ldur (quote (294 294)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100 9000 9000)) :ldur (quote (294 294 294)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (3 3 3))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (441)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100 6200)) :ldur (quote (147 147)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 5400)) :ldur (quote (294 294)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (441)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700 5700)) :ldur (quote (294 294)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (294)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8900 8100 8000)) :ldur (quote (147 147 147)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (3 3 3))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (441)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8900)) :ldur (quote (294)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (294)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 5800)) :ldur (quote (441 441)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 6600 6300)) :ldur (quote (147 147 147)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (3 3 3))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (294)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800 6100)) :ldur (quote (147 147)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8900 6300)) :ldur (quote (147 147)) :lvel (quote (80 80)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (441)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (118)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8900)) :ldur (quote (471)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300 7200 7100)) :ldur (quote (147 147 147)) :lvel (quote (80 80 80)) :loffset (quote (0 0 0)) :lchan (quote (3 3 3))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (441)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (294)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (147)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (336)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (168)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 102) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 44) (om-make-point 986 305) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 2 0 0 nil 0) (2 1 1 1 nil 0) (0 0 1 2 nil 0) (2 3 1 3 nil 0) (2 4 1 4 nil 0) (2 5 1 5 nil 0))) 7.01 nil "" (om-make-point 0 44) (om-make-point 1800 1038)) (quote nil) (om-make-point 398 73) nil nil nil "midi tests"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 1147 625) (om-make-point 343 236) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (29 (((4 4) (-3 (1 (-3 1)))) ((4 4) ((1 (1.0 1 1 1)) (1 (1.0 1 1 1)) (1 (1 1 1 1)) (1 (1.0 1 1 1)))) ((4 4) ((1 (1.0 1)) 3.0)) ((4 4) (1.0 (1 (1.0 1 2)) (1 (1 3)) 1)) ((4 4) (4.0)) ((4 4) ((1 (2.0 1 1)) (1 (1.0 3)) 2.0)) ((4 4) (2.0 (1 (1 3)) (1 (1.0 1 1 1)))) ((4 4) ((1 (1 1)) (1 (1 1)) (1 (1 2 1)) (1 (1 2 1)))) ((4 4) ((1 (1 1 1 1)) 1.0 (1 (2.0 1 1)) (1 (1 1 2)))) ((4 4) ((1 (2 1 1)) (1 (1 3)) (1 (1 1 2)) 1.0)) ((4 4) ((1 (1 2 1)) (1 (1.0 2 1)) (1 (1.0 1)) (1 (3 1)))) ((4 4) ((1 (1 1)) (1 (1.0 1 1 1)) (1 (1 1)) 1)) ((4 4) ((1 (1.0 2 1)) (1 (1.0 1)) 2)) ((4 4) (1.0 (1 (1.0 1)) (1 (1.0 3)) (1 (2.0 1 1)))) ((4 4) ((1 (1.0 2 1)) (1 (2.0 1 1)) (1 (1 1 1 1)) 1.0)) ((4 4) (4)) ((4 4) (1.0 (1 (1 1)) 1 (1 (1.0 3)))) ((4 4) (4.0)) ((4 4) ((1 (1.0 1)) 1.0 (1 (3.0 1)) 1.0)) ((4 4) (3.0 (1 (3.0 1)))) ((4 4) (2.0 (1 (1.0 3)) 1.0)) ((4 4) (3.0 (1 (1.0 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (2 1 1)) (1 (1 1 1 1)) (1 (1 1 2)))) ((4 4) (4.0)) ((4 4) (2.0 (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 2)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)))) ((4 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8268 7578)) :ldur (quote (139 139)) :lvel (quote (58 58)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7734)) :ldur (quote (139)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7194 9178 8086 7860 7420 7954 7232 9096 7552)) :ldur (quote (139 139 139 139 139 139 139 139 139)) :lvel (quote (58 54 54 57 54 57 55 50 58)) :loffset (quote (0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8512 8170 9194 8108)) :ldur (quote (139 139 139 139)) :lvel (quote (53 54 52 53)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7936 9162 8074 9172 8512 7406)) :ldur (quote (139 139 139 139 139 139)) :lvel (quote (55 57 57 69 53 52)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9194 9142 8176)) :ldur (quote (139 139 139)) :lvel (quote (55 54 57)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8202 7608 9142)) :ldur (quote (139 139 139)) :lvel (quote (55 54 54)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8472)) :ldur (quote (139)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7334 9394)) :ldur (quote (139 139)) :lvel (quote (50 57)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7686 8362 9662 8448)) :ldur (quote (139 139 139 139)) :lvel (quote (55 55 52 53)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7768 7168 9216 9346 9154 8476 7298 8962 7730)) :ldur (quote (139 139 139 139 139 139 139 139 139)) :lvel (quote (53 53 70 64 61 75 51 51 58)) :loffset (quote (0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9180 8554 8290 8588)) :ldur (quote (139 139 139 139)) :lvel (quote (55 54 57 51)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8264 8264 7634 8174)) :ldur (quote (139 139 139 139)) :lvel (quote (53 57 52 73)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8144 9364 9404 8536)) :ldur (quote (139 139 139 139)) :lvel (quote (60 57 54 54)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8140 9378)) :ldur (quote (278 278)) :lvel (quote (56 65)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8106 8140)) :ldur (quote (139 139)) :lvel (quote (52 57)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7922 8622)) :ldur (quote (278 278)) :lvel (quote (61 62)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9102 7840 9012)) :ldur (quote (139 139 139)) :lvel (quote (55 63 52)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8568 8978 7796 9708)) :ldur (quote (417 417 417 417)) :lvel (quote (53 55 62 54)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8904)) :ldur (quote (556)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8506 7002 8250 8478 7550 8216)) :ldur (quote (139 139 139 139 139 139)) :lvel (quote (61 57 64 81 64 57)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7964)) :ldur (quote (139)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8260 8270 8080 9168)) :ldur (quote (417 417 417 417)) :lvel (quote (54 61 62 58)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9192 8302)) :ldur (quote (139 139)) :lvel (quote (52 64)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9150)) :ldur (quote (417)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7962)) :ldur (quote (139)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7590 7906)) :ldur (quote (139 139)) :lvel (quote (54 55)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7964)) :ldur (quote (139)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6540 8274 7134 8042 7226 9174 8472)) :ldur (quote (278 278 278 278 278 278 278)) :lvel (quote (54 56 53 58 56 74 76)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8432)) :ldur (quote (278)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9146 8534 7278)) :ldur (quote (278 278 278)) :lvel (quote (55 54 55)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8414 9146 9146)) :ldur (quote (278 278 278)) :lvel (quote (55 57 55)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9162 9148 9146)) :ldur (quote (139 139 139)) :lvel (quote (65 60 59)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8508 8524 9210 8416)) :ldur (quote (278 278 278 278)) :lvel (quote (53 53 54 53)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9386 8466 8160)) :ldur (quote (139 139 139)) :lvel (quote (52 54 50)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8188 8470 8176)) :ldur (quote (139 139 139)) :lvel (quote (53 53 57)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6346)) :ldur (quote (278)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9130 8258 7950 8496 7006 7550 7948 8156)) :ldur (quote (139 139 139 139 139 139 139 139)) :lvel (quote (52 57 59 57 58 63 61 55)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8440 7410 7978 9156 8066)) :ldur (quote (139 139 139 139 139)) :lvel (quote (53 53 56 54 53)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7974 7592 9158 7968 7806)) :ldur (quote (139 139 139 139 139)) :lvel (quote (54 53 55 62 53)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9906 9156 9576 8932)) :ldur (quote (139 139 139 139)) :lvel (quote (54 60 56 55)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9190 7906 9182)) :ldur (quote (139 139 139)) :lvel (quote (52 52 53)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9148 8472 7830 9152 9148)) :ldur (quote (139 139 139 139 139)) :lvel (quote (58 72 51 56 53)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7674 7218 7802 7926)) :ldur (quote (139 139 139 139)) :lvel (quote (64 55 54 54)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8858 8488 8908)) :ldur (quote (139 139 139)) :lvel (quote (58 58 55)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7274 7638 8884)) :ldur (quote (139 139 139)) :lvel (quote (51 57 60)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7296)) :ldur (quote (278)) :lvel (quote (54)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8162)) :ldur (quote (278)) :lvel (quote (78)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9356)) :ldur (quote (139)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8188 8192)) :ldur (quote (139 139)) :lvel (quote (67 59)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8188 8080)) :ldur (quote (139 139)) :lvel (quote (70 54)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (417)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9166 8530)) :ldur (quote (139 139)) :lvel (quote (52 53)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8494 9172)) :ldur (quote (139 139)) :lvel (quote (53 55)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7964)) :ldur (quote (278)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8678 9170 8490 9202)) :ldur (quote (139 139 139 139)) :lvel (quote (56 62 58 52)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9164 9170 7900 8480)) :ldur (quote (278 278 278 278)) :lvel (quote (59 62 54 57)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9214 9200 7924 9184 9194)) :ldur (quote (139 139 139 139 139)) :lvel (quote (57 55 58 58 55)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8038)) :ldur (quote (278)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6888)) :ldur (quote (139)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8520 7722 7330 7696 8504)) :ldur (quote (278 278 278 278 278)) :lvel (quote (56 52 54 52 57)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8540)) :ldur (quote (417)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7420)) :ldur (quote (139)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7002 7696 7894 8536 8434 9386)) :ldur (quote (278 278 278 278 278 278)) :lvel (quote (59 55 53 51 51 67)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8182)) :ldur (quote (278)) :lvel (quote (78)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8358)) :ldur (quote (139)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9400 7646)) :ldur (quote (139 139)) :lvel (quote (56 56)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7676)) :ldur (quote (139)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7314 7818 9180 8476)) :ldur (quote (278 278 278 278)) :lvel (quote (57 54 58 82)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7834 7790)) :ldur (quote (278 278)) :lvel (quote (57 59)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7698)) :ldur (quote (556)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8790 8028 7678 7656 7644 9160 6926)) :ldur (quote (278 278 278 278 278 278 278)) :lvel (quote (51 52 54 54 54 58 54)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7696)) :ldur (quote (139)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7798 7008 8626 9092 9386 7348)) :ldur (quote (278 278 278 278 278 278)) :lvel (quote (56 52 54 55 53 55)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7920 8404)) :ldur (quote (1111 1111)) :lvel (quote (55 59)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7484 8688)) :ldur (quote (278 278)) :lvel (quote (53 59)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8642)) :ldur (quote (417)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7332 7264)) :ldur (quote (139 139)) :lvel (quote (55 56)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8428)) :ldur (quote (139)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7238)) :ldur (quote (278)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9392 9382 8524 8694 9364 8472 7330)) :ldur (quote (139 139 139 139 139 139 139)) :lvel (quote (57 56 53 54 51 54 57)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9400 9400)) :ldur (quote (139 139)) :lvel (quote (53 53)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8038)) :ldur (quote (139)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8738)) :ldur (quote (139)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7862 8634)) :ldur (quote (139 139)) :lvel (quote (54 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7918 7480)) :ldur (quote (139 139)) :lvel (quote (60 52)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8438 7822 8464 7864 7188)) :ldur (quote (139 139 139 139 139)) :lvel (quote (53 58 52 63 60)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8520)) :ldur (quote (2222)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7932)) :ldur (quote (278)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8038)) :ldur (quote (278)) :lvel (quote (54)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9378 7924 8622 8496 8716 9174 7540 7820 7192)) :ldur (quote (556 556 556 556 556 556 556 556 556)) :lvel (quote (53 54 52 55 54 57 54 54 57)) :loffset (quote (0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8484 7974)) :ldur (quote (417 417)) :lvel (quote (55 66)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8008 7904 6536)) :ldur (quote (278 278 278)) :lvel (quote (54 63 52)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7940)) :ldur (quote (139)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7910 7704)) :ldur (quote (139 139)) :lvel (quote (58 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7934 7778)) :ldur (quote (417 417)) :lvel (quote (57 55)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8478)) :ldur (quote (139)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7352 8026 7788 8670)) :ldur (quote (139 139 139 139)) :lvel (quote (53 51 54 54)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7478)) :ldur (quote (139)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8678)) :ldur (quote (139)) :lvel (quote (54)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7370)) :ldur (quote (139)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7454 8658)) :ldur (quote (139 139)) :lvel (quote (51 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9170 7972)) :ldur (quote (139 139)) :lvel (quote (52 59)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7938)) :ldur (quote (278)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8170)) :ldur (quote (139)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8258 10190 8444 8284 6574 8328 9510)) :ldur (quote (139 139 139 139 139 139 139)) :lvel (quote (60 55 54 78 51 58 52)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8276 7772)) :ldur (quote (139 139)) :lvel (quote (77 62)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9474 8322 9484 7660)) :ldur (quote (139 139 139 139)) :lvel (quote (52 58 58 55)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9372 8344 8306)) :ldur (quote (139 139 139)) :lvel (quote (51 59 70)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8322 7682 7822 8268 7714)) :ldur (quote (139 139 139 139 139)) :lvel (quote (59 54 53 58 61)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7804 8320 8476)) :ldur (quote (139 139 139)) :lvel (quote (57 60 52)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7966 7794 8276)) :ldur (quote (139 139 139)) :lvel (quote (52 60 55)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8216 8312)) :ldur (quote (278 278)) :lvel (quote (57 54)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700 7512)) :ldur (quote (139 139)) :lvel (quote (56 52)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6946)) :ldur (quote (139)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8374)) :ldur (quote (139)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8248 8148 8944)) :ldur (quote (139 139 139)) :lvel (quote (58 54 53)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9580 8142 7774 8256 8992 8152)) :ldur (quote (139 139 139 139 139 139)) :lvel (quote (56 57 58 60 53 62)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8230 8772 8116 9412 7728 8798 8378 9408 7716 8270)) :ldur (quote (139 139 139 139 139 139 139 139 139 139)) :lvel (quote (53 54 55 55 56 60 55 55 56 60)) :loffset (quote (0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8210 9402 7686 8342 9388)) :ldur (quote (139 139 139 139 139)) :lvel (quote (56 52 53 58 55)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800 8964 8196 8810 8082)) :ldur (quote (139 139 139 139 139)) :lvel (quote (74 55 52 54 64)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8968 9698 9558 8804 8974 8794 8164 8298)) :ldur (quote (139 139 139 139 139 139 139 139)) :lvel (quote (55 55 55 55 60 50 55 54)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8180 8416 9612 9022 8220 8236 8986)) :ldur (quote (139 139 139 139 139 139 139)) :lvel (quote (53 56 55 55 59 55 59)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8976 8332 8988)) :ldur (quote (139 139 139)) :lvel (quote (54 61 60)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8408 8354 8226)) :ldur (quote (139 139 139)) :lvel (quote (58 63 52)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8342 8340)) :ldur (quote (139 139)) :lvel (quote (55 60)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7924 8212 9040 7912 7816 9726 9016 7632 7684)) :ldur (quote (139 139 139 139 139 139 139 139 139)) :lvel (quote (53 52 61 74 62 52 53 56 53)) :loffset (quote (0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9110 7986 9066 8932 9164 7486 9010)) :ldur (quote (278 278 278 278 278 278 278)) :lvel (quote (57 54 56 51 53 53 72)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9024 9716 9184 9134 7974 8990 9174 7994 9694 9036 9020)) :ldur (quote (139 139 139 139 139 139 139 139 139 139 139)) :lvel (quote (61 59 57 55 86 55 57 68 53 66 63)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9174 7894 7932 9172 9038 7738 9148)) :ldur (quote (139 139 139 139 139 139 139)) :lvel (quote (64 61 82 64 54 54 62)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9148 9150 7896 7740 8058 7762 7936 8998 9102)) :ldur (quote (139 139 139 139 139 139 139 139 139)) :lvel (quote (64 58 59 55 53 55 89 54 56)) :loffset (quote (0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7708 8986 9222 7692 7902 7718)) :ldur (quote (139 139 139 139 139 139)) :lvel (quote (56 55 52 59 86 53)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7940 8064 9204 9146 8230 7918 9144 9196 8038 7918)) :ldur (quote (139 139 139 139 139 139 139 139 139 139)) :lvel (quote (63 54 54 55 57 57 53 53 55 58)) :loffset (quote (0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9150 7864 7910 7556 9150 9712 7914)) :ldur (quote (139 139 139 139 139 139 139)) :lvel (quote (58 55 79 56 53 53 78)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9144 8062 7904 9202 9148)) :ldur (quote (139 139 139 139 139)) :lvel (quote (53 54 78 54 62)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8044 9036 7904 8008 9036 7586)) :ldur (quote (139 139 139 139 139 139)) :lvel (quote (55 57 53 56 55 55)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9006 7996 7892)) :ldur (quote (139 139 139)) :lvel (quote (53 60 61)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8130 9142 7936 7894 7918 9156)) :ldur (quote (139 139 139 139 139 139)) :lvel (quote (57 54 67 52 56 53)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6346 7918 9004 7890 8012)) :ldur (quote (139 139 139 139 139)) :lvel (quote (54 54 54 67 54)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7958 8376 9198 7772)) :ldur (quote (139 139 139 139)) :lvel (quote (67 61 53 54)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7536 8010 6708 7878 7024)) :ldur (quote (139 139 139 139 139)) :lvel (quote (73 53 51 53 55)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8394 7912 7106 9150 8184 7908)) :ldur (quote (139 139 139 139 139 139)) :lvel (quote (52 57 51 54 53 68)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8748 7898 8198 8008)) :ldur (quote (139 139 139 139)) :lvel (quote (53 56 127 54)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7910 8068 9372 8278 7902 9400 8122)) :ldur (quote (139 139 139 139 139 139 139)) :lvel (quote (62 52 57 54 55 62 56)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9102 8254 9414 8152)) :ldur (quote (139 139 139 139)) :lvel (quote (57 71 55 57)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9132 9378 9422 8254 9398 9370)) :ldur (quote (139 139 139 139 139 139)) :lvel (quote (53 54 56 65 57 54)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9464 9386 8240 7916 9426 7570 8064 7894 9352)) :ldur (quote (139 139 139 139 139 139 139 139 139)) :lvel (quote (53 74 72 63 53 55 55 57 54)) :loffset (quote (0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8104 9330 9396 8250 9364 8078 7596)) :ldur (quote (139 139 139 139 139 139 139)) :lvel (quote (67 52 69 80 54 56 53)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9414 9358 7328 7884 7666)) :ldur (quote (139 139 139 139 139)) :lvel (quote (57 54 53 53 55)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9116 9500 9428 7890 9366 7892 9396 7056 8310 8092 8278)) :ldur (quote (139 139 139 139 139 139 139 139 139 139 139)) :lvel (quote (53 56 64 55 65 54 59 55 59 54 113)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8132 9378 9416 7896 9304 9394 8518 8300 8250)) :ldur (quote (139 139 139 139 139 139 139 139 139)) :lvel (quote (54 67 60 57 51 62 54 67 86)) :loffset (quote (0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8302 9406 9460 7610 6990)) :ldur (quote (139 139 139 139 139)) :lvel (quote (60 56 56 61 53)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8324 7910 9408 7538 8346 7632 8074 9366)) :ldur (quote (139 139 139 139 139 139 139 139)) :lvel (quote (59 57 54 69 53 55 54 55)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8092 9432 8196 9074 8248 6406 9416 9366)) :ldur (quote (139 139 139 139 139 139 139 139)) :lvel (quote (56 56 66 51 65 53 56 55)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9418 9490 9368 8224 8190 7674 9408 8332 9484)) :ldur (quote (139 139 139 139 139 139 139 139 139)) :lvel (quote (55 57 60 103 115 54 58 57 53)) :loffset (quote (0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9360 8278 8158 9370 8238 7908 9488 8134)) :ldur (quote (139 139 139 139 139 139 139 139)) :lvel (quote (58 84 57 56 72 56 56 54)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9370 8220 7908 9422 7060)) :ldur (quote (139 139 139 139 139)) :lvel (quote (60 71 54 60 53)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8142 7910 8272 8364 9364 8306 8180)) :ldur (quote (139 139 139 139 139 139 139)) :lvel (quote (59 55 97 54 55 62 71)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8312 9362 8298 9374 8310)) :ldur (quote (139 139 139 139 139)) :lvel (quote (54 60 64 54 58)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8316 8120 9426 7538)) :ldur (quote (139 139 139 139)) :lvel (quote (57 53 58 65)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8132 9368 8238 8166 9384)) :ldur (quote (139 139 139 139 139)) :lvel (quote (62 60 87 59 53)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9424 8278 8194 9474 8120 8334 8256 7530)) :ldur (quote (139 139 139 139 139 139 139 139)) :lvel (quote (56 62 90 56 54 55 61 59)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8158 9400 8272 8138)) :ldur (quote (139 139 139 139)) :lvel (quote (61 58 87 58)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9394 8152 8304 9388 8238 9386)) :ldur (quote (139 139 139 139 139 139)) :lvel (quote (56 58 72 53 82 59)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9428 8150 8120 8466 8246 8194 8358 7666 9364)) :ldur (quote (139 139 139 139 139 139 139 139 139)) :lvel (quote (53 58 52 52 67 61 53 54 57)) :loffset (quote (0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9410 8350 8188 8170 8176)) :ldur (quote (139 139 139 139 139)) :lvel (quote (58 55 65 55 83)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9400 8220 7950 9164 7958 8320 9398 8262)) :ldur (quote (139 139 139 139 139 139 139 139)) :lvel (quote (60 66 55 55 53 56 59 58)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9400 8256 8150 7632)) :ldur (quote (139 139 139 139)) :lvel (quote (54 63 60 60)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8136 9408 8310 9394 9378)) :ldur (quote (139 139 139 139 139)) :lvel (quote (57 57 61 57 55)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8228 7978 8246 8340)) :ldur (quote (139 139 139 139)) :lvel (quote (76 101 61 53)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8316 7550 8162 9502)) :ldur (quote (139 139 139 139)) :lvel (quote (56 60 53 52)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8474 8080 8250 8138)) :ldur (quote (139 139 139 139)) :lvel (quote (60 62 65 53)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8218 7748 7806 6328 7630 8306 8844 7630 8022 8308)) :ldur (quote (139 139 139 139 139 139 139 139 139 139)) :lvel (quote (57 54 57 55 54 58 54 72 55 53)) :loffset (quote (0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8310 7912 8004 7926 8198 7632 8300 7524)) :ldur (quote (139 139 139 139 139 139 139 139)) :lvel (quote (61 54 59 55 86 55 59 54)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8050 7520 8536 7734 8426 8206 8102 9176 7568 7932 8248 9406)) :ldur (quote (139 139 139 139 139 139 139 139 139 139 139 139)) :lvel (quote (55 56 55 58 54 59 62 71 72 59 74 55)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7674 9150 8394 8264 7942 6552 7628 7820)) :ldur (quote (139 139 139 139 139 139 139 139)) :lvel (quote (65 61 56 68 68 55 57 54)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8456 8252 7728 9150 8346 7658)) :ldur (quote (139 139 139 139 139 139)) :lvel (quote (55 64 55 61 54 52)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9206 8224 9392 8064 8308 9150 8212 7778 8456 9154)) :ldur (quote (139 139 139 139 139 139 139 139 139 139)) :lvel (quote (55 53 54 63 59 62 55 58 59 60)) :loffset (quote (0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7724 7682 8328 9136 8456)) :ldur (quote (139 139 139 139 139)) :lvel (quote (56 54 55 55 57)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7572 8308 6532 7686 9156 7938 8196 8290 8224 8320)) :ldur (quote (139 139 139 139 139 139 139 139 139 139)) :lvel (quote (60 56 54 56 57 58 78 55 60 54)) :loffset (quote (0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8150 8300 9200 7888 8024 8444 7548 9136 8146 9152 8320 7536 7812)) :ldur (quote (139 139 139 139 139 139 139 139 139 139 139 139 139)) :lvel (quote (58 56 58 56 54 53 61 54 55 59 54 53 55)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8042 7920 8328 9130 7574 7764 8088 8364 9138)) :ldur (quote (139 139 139 139 139 139 139 139 139)) :lvel (quote (58 63 56 53 68 53 59 55 53)) :loffset (quote (0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7666 9186 7974 8240 7800 8008 7910)) :ldur (quote (139 139 139 139 139 139 139)) :lvel (quote (59 58 56 57 54 58 53)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8028 8520 7674 8166 8248 7696)) :ldur (quote (139 139 139 139 139 139)) :lvel (quote (60 55 63 53 57 53)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 108) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.01 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 44) (om-make-point 1400 534) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "sheppard end feedback.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 827 625) (om-make-point 70 50) (let ((newobj (load-sdif-file (om-make-pathname :directory (quote (:absolute "Users" "samdvorin" "Desktop" "stagnation" "audio outs to analyze")) :device nil :host nil :name "sheppard end feedback" :type "sdif")))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 400 500) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 692 872) (om-make-point 60 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (6756 7918 8018 5656 5622 6010)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 60 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 63/100 nil 1000 1 (om-make-point 782 712) (om-make-point 159 44) 0 0 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 680 736) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SDIF->CHORD-SEQ 4" (quote sdif->chord-seq) (quote ((om-load-inputfun (quote input-funbox) "SDIF file" "SELF" nil))) (om-make-point 615 580) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 4" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 504 648) (om-make-point 130 168) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6756) (7918) (8018) (5656) (5622) (6010))) :lonset (quote (0 125 3199 5797 6947 9571 17330)) :ldur (quote ((17330) (4148) (9496) (1599) (2649) (7084))) :lvel (quote ((127) (50) (76) (83) (89) (107))) :loffset (quote ((0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.01 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 174 85) (om-make-point 1354 499) 0 1000 nil 9/10 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "click delay chord.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 507 561) (om-make-point 70 50) (let ((newobj (load-sdif-file (om-make-pathname :directory (quote (:absolute "Users" "samdvorin" "Desktop" "stagnation" "audio outs to analyze")) :device nil :host nil :name "click delay chord" :type "sdif")))) (when newobj) newobj) "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 400 500))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "F->MC" (quote f->mc) (quote ((om-load-inputfun (quote input-funbox) "frequency (Hz)" "FREQ" 2387))) (om-make-point 973 631) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "NOTE" (quote note) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitch (midicents)" "midic" 6000) (om-load-inputfun (quote input-funbox) "velocity (0-127)" "vel" 80) (om-load-inputfun (quote input-funbox) "duration (ms)" "dur" 1000) (om-load-inputfun (quote input-funbox) "MIDI channel (1-16)" "chan" 1))) (om-make-point 964 696) (om-make-point 92 116) (if (find-class (quote note) nil) (let ((newobj (make-instance (quote note) :midic 9828 :vel 80 :dur 1000 :chan 1 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.01 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 730 320) (om-make-point 300 44) 0 0 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SDIF->CHORD-SEQ 3" (quote sdif->chord-seq) (quote ((om-load-inputfun (quote input-funbox) "SDIF file" "SELF" nil))) (om-make-point 1155 261) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 3" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 1089 364) (om-make-point 130 168) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((3136) (7030) (6102) (6380) (5422) (7384) (4728) (8754) (9432) (6376) (7640) (5176) (6754) (8236) (9744) (8712) (7760 6374) (5782) (7894) (8606) (9778) (8820) (8300) (8488) (8748) (9330) (9410) (9246) (7432) (7996) (7736) (6400) (8238) (9924) (9148) (9836) (9314) (7360) (8890) (9186) (9816) (9338) (8230) (8406) (7522) (8998) (9650) (5804) (9902) (8556 7758) (7882 10504 9262 10300 9594 10320 9738 7540 9780 10354 9390 9530 9084 9446 10120 8228 4776 8744 8964 10612 10634 6394 6786 10550 7984 9886 9976 7984 8486 9866 8498 9162 7300 8088 9742 5536 6102 7032 3138) (9334) (7342) (8186) (10884) (7198) (4680) (8566) (10748) (5538) (10142) (10692) (8778) (10028) (10186) (8836) (10808) (10252) (9190 9074) (5078) (8408) (9662) (10418) (6738) (8600) (11276) (5828) (7880) (8714) (10468) (7372) (9700) (10698) (9136) (9324) (9418 9250) (10546) (10682) (9368) (10002) (9608) (11360) (7226) (6366) (10802) (8218) (8300) (9086) (10268 10134) (10624) (9908 10152 10750 10060 10222 11388 11314 8860 10580 10878 10624 10232 10504 10974 11618 11472 11500 7968 5810 9586 6366 9728 11796 10696 6722 11038 8448 10834 10008 7746 9816 8084 11382 8776 10916 7474 8592 9652 9420 10526 8942 5536 9990 7980 10384 11286 9710 11858 10726 7554 9860 9478 10660 10474 10126 8934 11096 9336 9076 5268 9208 4688 10304 9782 6100 7032) (10852) (11358) (8880) (9194) (10426) (9032) (7278) (8364) (11092) (10092) (11188) (9502) (9716 8954) (11580) (9244) (10786) (10004) (11556) (10546) (11526) (10758) (10724 3216) (8640) (11044 8106) (11742) (9846) (6784) (8248) (11474 5770) (10940 6374) (11448) (10102) (11796) (10050) (10874) (9914) (11520) (11288 7490) (9378) (9294) (10622 10578) (10528) (11786) (8712) (12172 9990 9572) (10916) (11630) (12068) (11378) (10788) (11602) (11896 8836) (12040 11748) (11690) (10968 8180) (11010) (10980) (7338) (11664) (10756) (11088) (9038) (9522) (11146) (10292) (9348) (10830) (10376) (5158) (9874) (11554) (8084) (10424) (8470) (11252) (11126) (10856) (11308) (10572) (11210) (6756) (9936) (10550) (11510) (11190) (10330) (10956) (11046) (10694) (10134) (9662) (10786 10052) (9726) (7762) (9158) (7224) (11812) (11660) (11358) (11488) (11712) (10008) (11870) (11906) (8904) (12308) (11280) (9470) (11058) (12084) (11096) (12048 11604) (8602) (7032 6362 5542 10204 9634 10066 10578 10156 4896 11380 9302 12502 10982 11218 12348 11134 11732 10288 12186 6174 10878 12294 8844 9066 8756 12394 7958 7526 9434 8930 9950 8570 7422 12058 10134 11540 6752 9894 10004 10620 10724 9728 3108 12326 9558 12524 11308 11318 10294 11412 12244 11160 10080 8248 12460 11028 10526 12350 10552 10466 9160 8394 11092 9246 7982 8504 7598 10106 9390 9018 5244) (10806 9312 6504 9206 11954) (9752 10784 11348) (12478 11588 10088 7916) (7236) (12380 10754) (9780) (12408) (11752) (10528) (10378) (8710) (12036) (10490 10212) (12222) (11244) (10272) (10964) (12022) (10010) (9108) (11428) (12568) (12452) (11192) (8574) (9712) (9432) (9488) (11410) (11872 8646) (12496) (7710) (12242) (12126) (10626) (11910) (8930) (12058) (12350) (5276) (11474) (10946) (11058 10194) (8408) (10874) (11316 8242) (12430 12070) (12394) (9322) (11934) (8202) (9848) (10758) (12098 7574) (10552) (12320 12014) (6066) (9406) (12296) (11162) (10128) (10722 10466) (9032) (6752) (6378) (11552) (8092) (11504) (3630) (12020) (10812) (10688) (10580) (11786) (10324) (10524) (10006) (8992) (9238) (12184 12154 7382) (12270 11882) (6528) (10394) (9556) (10992) (11790) (12074) (12592 12138) (9646) (12486) (11624) (9556) (12340) (12276) (12326) (12610 9076) (10272) (10146) (9948) (5536) (9688) (11042) (12222) (11246) (12008) (11578) (9712) (10070) (9424) (7588 7456) (11404) (11100) (10488) (7712) (12358) (12242) (8776) (12182 11452 3136) (8036) (11214) (12104) (11944) (12054 8488) (11130) (9226) (9478) (10540) (10366) (11992) (10916) (6374) (11666) (5792) (10998) (11814 11758) (10210) (9294) (9780) (10964) (12080) (9874) (9876) (9138) (12398) (12144) (6780) (7946) (4636) (9924) (8836) (12240 7358) (7740) (11962) (11906) (11978) (11040) (11232 8612) (8138) (8474) (10832) (12126 7190) (11644) (11876 8396) (12104 12068) (11438) (9458) (11174) (12042) (11836) (10608) (8236) (12314 11098) (9438) (9562) (9732) (10530) (8714) (11926) (9246) (10698) (12470) (12330) (10050) (11684) (7502) (11582) (6408) (10622) (11502) (9988) (10950) (8182) (10036) (10180) (11966) (11816) (5276 7032 10874 11790 11752 9874 12134 12082 4658 10786 10008 10494 8738 7594 11110 9628 8226 11352 11332 10390 11134 9336 12396 11862 8110 9780 12038 10752 9738 10390 10298 10108 7984 9072 11886 10984 6542 10576 9518 10816 11808 10542 9836 11176 10614 9236 9458 11834 10272 10134 7364 8380 9300 8980 8714 10224 3154 6088) (10660 7196) (9120) (11038) (12186) (11880) (11646) (10284) (8470 7684) (10408) (11854) (5624) (11728) (9696) (6384) (11624) (10500) (7356) (10542) (8724) (10612) (9040) (10836) (6090) (11412) (11688) (8356) (4676) (10374 6812) (11944) (11934) (8490) (11850) (11328) (10852) (11988) (8894) (11490) (9238) (11706 10760) (9940 9616) (8622) (11602) (10806) (12026) (11738) (7838) (8776) (11276) (6498) (10186) (11010 9476) (11158 9740) (11956) (10104) (9132) (6602) (12086) (11728) (10318) (10270) (11506) (11652) (6758) (10616) (10870) (10110) (10480) (7360) (9258) (11076) (11616) (9520) (10532) (8298) (9686) (9834) (9708) (11544) (10000) (10164) (12170) (7492) (8538) (9432 5730) (10402) (8820) (11288) (10640) (11810) (10848) (8150) (11106) (11188) (11444) (11686) (9116) (5558) (10058) (9460) (10268) (8396) (11152) (10308) (10764) (10528) (9294) (7864) (11452) (11852) (11206) (10828 9574) (9202) (11516) (11404 9924) (11784) (10030) (10982) (6490) (11748 10902) (11624) (11086 9744) (11028) (11878) (9050) (9138) (6370) (10680) (9854 9520) (9690) (9956) (8244) (11648 11378) (8426) (4206) (10574) (7974) (9810) (11356) (10738) (10620) (7738) (10084) (6808) (8626) (10872) (8360) (10494) (11624) (11682) (10950) (11292) (9296) (10276) (9616) (9972) (10042) (9140) (7764) (11124) (11556) (11188) (11650) (11708) (10976) (9572) (9808) (10134) (11592) (11798) (8822) (7470) (10772) (7032 9178 9778 11216 11062 10620 10868 9006 9738 7640 7944 11242 8562 10154 10386 8712 9346 8364 10986 9462 6676 11180 10814 10538 9920 11364 8264 8872 9990 6074 10920 9410 10576 6390 8924 9772 9586 10114 8440 7360 5274 3146 9876 8082 10788 4714 9158 7668 8776) (7492) (5702) (10320) (11394) (11012) (9082) (11038) (10266) (6710) (10492) (10570) (6346) (10360) (10974 10548) (10112) (11278) (9686) (10786) (10804) (10418) (9818 7866) (11094) (10174) (9018 9088) (11016) (8500) (11452) (10002 9424 7780) (10734) (9240) (10052) (9350) (9630) (7362) (7490) (4738) (10118 9292) (10866) (11204) (8080) (7798) (11280 9434 8686) (10784) (9020) (5706) (9826) (10650) (8242) (9056) (10698 7966) (10280) (11356) (6676) (9896) (10396) (11380 10544) (8556) (10432) (10166) (9720) (8596) (9152) (10622) (4720) (10500) (6164) (9034) (11036) (10004) (7692) (9514) (10810) (8514) (9334) (7908) (9822) (9292) (10734) (6690) (11280) (9576) (11222) (8710) (8272) (10180) (7182) (8138) (9706) (9868) (9946) (9234) (9780) (6278) (10260) (9406) (6014) (8414) (9666) (9472) (10574) (6898) (11070) (9002) (9346) (7642) (11278) (10180) (10802) (8492) (10438) (11214) (11094) (10300) (11404 9236) (8844) (8708 7762) (9836) (10872 9406) (9898) (10370) (10392) (10734) (11058) (10616) (9900) (8256) (10268) (9636) (10992) (10950 7198) (9782) (6424) (8132) (11036) (10162) (10108) (10916) (8932) (10786) (1362) (7866) (9242) (10442) (7352) (8636 6290 5648) (10858) (8430) (10248 9408) (9870) (10006) (10042) (6726) (9290) (9134) (10076) (11324) (9690) (10534) (10958) (9572) (9514) (3176) (8708 5560 8402 7032 8594 9986 10622 9954 10532 3380 9806 7972 7870 10118 7198 9410 9036 9146 7576 6504 9270 10924 8268 9644 10268 8944 9710 7380 9496 4722 7722 6118 5532 9432 6562) (6926) (9876) (8890) (10210) (6730 5382) (7394) (9640) (10136) (8204) (9486) (8490) (6402) (9260) (9960) (9294) (9890) (9432) (7658) (9404) (8236) (8778) (5278) (3198) (6408) (9784) (8618) (9508) (7358) (9924) (9242) (9150) (7986) (5572) (6484) (6726) (9674) (8118) (8256) (9372) (6780) (8570) (9012) (10042) (7764) (1406) (9434) (8828) (9932) (9816) (9506) (9342) (9150) (8488) (7476) (8116) (5570) (6390) (10160) (10106) (10030) (9408) (8544) (7646) (8396) (9192) (9662) (8926) (9770) (7950) (7482) (3386) (8810) (7666) (1572) (10158) (3324) (8936 6676) (9574) (8606) (9074) (9358) (8444) (5682) (8150) (7870) (8348) (9926) (8776) (7236) (6774) (9154) (9024) (8572) (8024) (9718) (9776) (9356) (8234) (9764) (8388) (9142) (3494) (7758) (7950) (9192) (8566) (9782) (9424) (9760) (6324) (6102) (6848) (9624) (7032 8798 3170 6776 8266 7418 8488 7736 5184 5736 8364 6312 8388) (7728) (8712) (6752) (7400) (8786) (8396) (8262) (6180) (7986) (5206) (6482) (7864) (8364) (7656) (6746) (6298) (6838) (6094) (7632) (8780) (5232) (4600) (3228) (7690) (8364) (8278) (6558) (7360) (8712) (5616) (7988) (6748) (4992) (7396) (5646) (4764) (7648) (8252) (8776) (6872) (8238) (6110) (7360) (5568) (8776) (7738) (8708) (7704) (3058) (6930) (5078) (5674) (7634) (6200) (4594) (6086) (5200) (4724) (7028 4714 5732 3078 6086 6734))) :lonset (quote (1285 1848 2723 4073 4785 6198 6673 6710 6823 7060 7685 7985 8148 8360 8685 8785 8898 9410 9598 9773 9948 10160 10773 10860 10998 11010 11098 11435 11535 11648 12198 12360 12473 13035 13323 13423 13435 13698 13723 14085 14210 14423 14610 14923 14985 15010 15148 15210 15573 15610 15773 18348 18398 18448 18573 18660 18748 18760 19010 19048 19298 19335 19348 19360 19373 19510 19560 19585 19685 19698 19885 19898 20023 20035 20173 20323 20485 20523 20610 20660 20760 20848 21085 21198 21248 21348 21435 21448 21460 21535 21598 22048 22098 22123 22135 22185 22273 22410 22423 22435 22448 27885 28060 28273 28310 28323 28335 28498 28523 28660 28710 28760 28798 28823 28835 28898 28910 28923 28935 28960 28998 29110 29160 29185 29435 29460 29573 29623 29710 29735 29948 30023 30073 30098 30298 30385 30535 30610 30723 30760 30860 30885 30910 30948 30973 30998 31123 31185 31310 31323 31385 31398 31435 31523 31548 31560 31573 31760 31773 31785 31835 31848 31860 31948 32010 32023 32173 32373 32385 32398 32560 32623 32635 32660 32785 32848 32873 32910 32973 33035 33110 33135 33210 33273 33285 33360 33423 33548 33610 33660 33685 33735 33848 33860 33935 33985 34010 34048 34098 34160 34210 34285 34323 34410 34560 34585 34598 34610 34635 34660 34810 34835 34873 34923 34948 44923 44935 44948 44960 45135 45198 45210 45235 45260 45273 45310 45323 45385 45460 45535 45573 45685 45735 45748 45773 45810 45873 45935 45960 45985 45998 46023 46060 46073 46110 46148 46310 46348 46398 46435 46498 46535 46660 46748 46848 46923 46985 47023 47035 47048 47060 47123 47160 47298 47423 47435 47460 47510 47610 47623 47635 47648 47673 47698 47710 47723 47748 47823 47923 48035 48048 48123 48135 48148 48185 48223 48248 48298 48323 48335 48385 48410 48435 48448 48485 48498 48535 48560 48673 48710 48810 48898 48910 48923 48985 49210 49223 49310 49335 49348 49385 49398 49560 49660 49735 49848 49973 50123 50135 50148 50185 50273 50285 50323 50360 50385 50448 50548 50585 50598 50635 50685 50698 50723 50785 50960 51085 51098 51210 51310 51335 51398 51448 51460 51535 51560 51585 51598 51635 51660 51773 51835 51885 51910 51960 51985 52023 52123 52335 52423 52435 52685 52723 52785 52823 52910 52948 53010 53148 53173 53223 53373 53398 53410 53485 53510 53548 53573 53585 53598 53710 53760 53798 53898 53998 54060 54085 54110 54210 54235 54248 54260 54298 54310 54323 54385 54398 54410 54473 54498 54748 54885 54898 54985 55048 55123 55160 55198 55223 55260 55348 55560 64823 64835 64935 64998 65010 65185 65285 65298 65323 65685 65835 66110 66335 66385 66398 66410 66535 66685 66710 66723 66935 66985 67173 67323 67398 67410 67435 67510 67735 67748 67848 67873 67885 67948 68060 68148 68210 68323 68435 68523 68560 68573 68610 68648 68660 68698 68873 68885 68948 68998 69035 69110 69185 69235 69298 69423 69498 69510 69573 69710 69748 69910 69923 69948 69960 70010 70085 70098 70148 70273 70298 70323 70348 70435 70473 70510 70585 70598 70610 70635 70660 70735 70773 70898 71135 71173 71223 71460 71573 71635 71735 71798 71910 71985 71998 72148 72185 72285 72360 72373 72460 72485 72498 72810 72948 73198 73223 73273 73323 73398 73560 73623 73660 73723 73748 73785 73798 73985 73998 74085 74098 74123 74148 74160 74235 74385 74435 74448 74460 74473 74485 74523 74648 74685 74735 74823 74848 74885 75098 75148 75210 75310 75323 75510 75535 75560 75585 75785 75835 75848 75998 76110 76223 76323 76385 76423 76473 76510 76523 76585 76598 76698 76710 76760 76885 76923 77010 77023 77098 77173 77185 77198 77298 89685 89710 89810 89860 89973 90010 90110 90235 90310 90373 90435 90523 90573 90585 90598 90673 90735 90760 91023 91348 91573 91635 91660 91735 91835 92173 92235 92273 92310 92423 92548 92760 92810 92823 92985 93335 93385 93448 93460 93623 93635 93923 93948 94060 94110 94135 94323 94360 94398 94410 94485 94498 94535 94560 94673 94810 94985 95035 95148 95248 95273 95435 95598 95623 95635 95973 95998 96335 96410 96523 96560 96623 96660 96748 96835 96948 96973 96998 97173 97185 97248 97285 97448 97548 97560 97623 97723 97748 97798 97835 97848 97985 98110 98173 98323 98373 98385 98398 98610 98623 98660 98685 99035 99148 99223 99360 99448 99485 99598 99623 99748 99860 99885 100048 100060 100323 100348 100448 100523 100635 100660 100760 100785 100798 100973 101048 101123 101135 101173 101260 101323 101335 101485 101510 101523 101748 101835 102123 102323 102360 102398 102435 102498 102585 102610 102623 102735 102773 102973 103198 103223 103398 103598 103610 103635 103735 103835 103948 104060 104160 104235 104248 104298 120948 120960 121373 121498 121535 121673 121810 122098 122148 122323 122373 122560 122848 122860 123048 123173 123373 123385 123398 123685 123723 124060 124498 124685 124785 124910 124948 125198 125248 125510 125585 125873 125885 126360 126435 126448 126635 127023 127160 127273 127298 127898 128085 128210 128273 128298 128423 128535 128573 128760 128860 128873 128935 129048 129298 129635 129760 129960 129985 130073 130135 130460 130510 130598 130635 130810 130948 131048 131060 131210 131223 131860 132035 132573 132948 132960 133310 133360 133660 133673 133735 133835 133848 133873 134148 134298 134323 134473 134498 134560 134923 134998 135248 135298 135385 135423 136198 136235 136373 136735 136823 136973 136998 137223 137585 137873 137898 138023 138198 138348 138398 139235 139385 139398 159485 159710 159798 160073 160173 160260 160360 160523 160610 160798 160898 160910 161410 161485 161535 161985 162798 163260 163585 164360 164460 164635 164948 166010 166098 166235 166473 166835 166848 167085 167410 167723 168723 169348 169535 169560 169823 170173 171023 171260 172773 173435 173585 173873 174423 174935 175748 176498 176723 176760 177048 177223 177435 178060 179323 179335 179835 181435 182035 202985)) :ldur (quote ((14487) (13925) (13050) (2950) (10987) (5625) (8962) (3025) (8950) (2025) (3063) (2150) (7625) (2137) (7087) (3587) (2250 2600) (3262) (6175) (5775) (3112) (2112) (2037) (2187) (4775) (2412) (2450) (2963) (2412) (2587) (3575) (2413) (2225) (2637) (2450) (2350) (2112) (2075) (2050) (1687) (1562) (1350) (1163) (850) (788) (763) (625) (563) (200) (163 163) (4775 6675 4813 6675 4363 4325 6363 4475 6675 6675 5688 3825 4075 6513 4025 3100 3162 3888 3075 6325 3325 3888 4275 4088 2600 5538 4413 4675 4325 3212 2700 5463 2900 6675 2675 3350 6675 6675 6675) (2050) (2038) (3125) (3875) (3513) (3700) (3688) (2638) (3400) (3150) (2162) (3100) (2262) (3075) (2938) (2063) (2862) (2763 2750) (2750) (2563) (2175) (2100) (2412) (2175) (2125) (1962) (1925) (1837) (1787) (1688) (1600) (1362) (1250) (1200) (1100 1087) (1013) (1000) (987) (912) (850) (400) (350) (325) (313) (263) (175) (37) (25 25) (13) (7463 11325 7425 8313 10563 8900 8013 11000 8425 7538 8000 12500 8538 9600 8650 7400 11325 12500 7038 9163 7500 6738 7125 7913 7800 7225 6463 9163 6688 12500 8113 7513 6025 12500 6438 9163 8313 6025 12500 9900 5525 9950 5588 5513 6450 5738 5563 0 5863 6713 6300 5425 5575 6688 5663 5900 6388 8038 8938 12500 6400 12500 8100 12500 12500 12500) (4613) (2488) (2100) (6638) (6625) (2963) (2725) (2025) (2463) (2988) (3363) (2025) (6100 3313) (2188) (2775) (2600) (2300) (3438) (4875) (2163) (2788) (5788 5788) (4063) (2050 3300) (2100) (2750) (3513) (2763) (5213 5200) (2050 4775) (4088) (4875) (3400) (3288) (2200) (3225) (2313) (2000 3837) (2300) (3225) (4063 2525) (2163) (3825) (3975) (2875 2988 2938) (3825) (3063) (3638) (3625) (2150) (3400) (2550 3513) (2125 2287) (2137) (2550 3050) (3375) (2850) (3175) (2188) (3112) (2450) (2012) (2650) (2938) (2925) (2712) (2575) (2563) (2550) (2388) (2325) (2313) (2087) (2162) (2100) (2075) (2037) (1975) (1912) (1837) (1813) (1737) (1675) (1662) (1587) (1525) (1400) (1337) (1287) (1263) (1212) (1100 1100) (1087) (1013) (962) (938) (900) (850) (787) (737) (662) (625) (537) (388) (362) (350) (337) (313) (287) (138) (112) (75 75) (25) (20612 10987 14812 10550 12075 15350 13462 12825 20612 14512 13150 11712 13650 11562 11850 11850 12037 11037 10937 13187 11100 11637 18637 11375 18637 10612 10475 10875 11225 11712 10662 11262 10275 10962 13112 10412 13050 13025 15087 11750 11187 10725 13200 11250 11475 10450 14250 10187 10125 10025 13187 10237 10037 10100 10637 12825 10350 10187 12250 10087 10337 12775 12950 10037 18312 18112 13650 11275 11562 11700 11975) (2037 2362 2612 2912 1875) (63 4825 4125) (2813 2938 2575 2237) (5763) (4200 2250) (5150) (2438) (3462) (3175) (3037) (5375) (2413) (2975 2288) (2300) (2225) (2100) (2463) (3275) (2688) (2088) (4463) (2025) (7237) (3088) (5325) (4738) (3800) (6025) (2213) (3025 3325) (2450) (4113) (4975) (2612) (2413) (3688) (3650) (2712) (4388) (5675) (2975) (2987) (3350 3625) (2888) (2175) (3288 2238) (4137 2763) (4325) (3137) (3225) (5012) (2763) (2013) (3425 2425) (4650) (2125 5312) (7912) (2125) (7862) (4188) (2300) (2150 2725) (2788) (3675) (3438) (2037) (3200) (7087) (2388) (2963) (2325) (7313) (4275) (2150) (3850) (2600) (7150) (5262) (2000) (3312 2162 2100) (2575 5662) (2125) (2275) (2438) (3013) (2950) (2037) (3525 2600) (2375) (5900) (2350) (3900) (2987) (3962) (5037) (3975 6175) (2325) (6000) (2825) (5825) (2537) (2900) (3662) (2175) (5412) (3125) (5287) (3837) (4888) (2362 5200) (2725) (3187) (3837) (4787) (4412) (2062) (4875) (4862 4850 4862) (2050) (2075) (3875) (3162) (2175 2662) (2313) (4250) (2587) (2775) (2150) (2550) (2275) (2612) (2037) (2562) (2225) (3862 2850) (2225) (3725) (3675) (3650) (2012) (3575) (2112) (2425) (3225) (3137) (2300) (2362) (2838) (2450) (2737) (2650 2650) (2025) (2550) (2412) (2388) (2338) (2150 2188) (2162) (2150) (2075) (2050 2025) (2012) (1987 1987) (1975 1975) (1963) (1850) (1800) (1762) (1662) (1563) (1500) (1475 1475) (1450) (1350) (1325) (1313) (1300) (1262) (1250) (1237) (1175) (1162) (1150) (1088) (1063) (813) (675) (662) (575) (513) (438) (400) (362) (338) (300) (213) (21737 21737 11412 11812 12462 11125 11050 11087 11075 11112 16175 11225 21737 11187 11037 10787 13262 11137 10637 10212 10387 11187 11675 10037 12612 21737 9775 12075 10875 9325 10400 10362 10200 13762 10187 16762 10637 12037 9925 10762 9325 11275 12275 10287 10262 12112 14600 9350 9412 0 10737 14425 10100 9612 9900 14137 19250 9262) (2425 1825) (2075) (3438) (2450) (4700) (5262) (3113) (2237 4462) (3875) (2725) (2450) (4012) (4375) (2863) (2213) (4963) (3725) (2463) (2400) (2313) (5625) (4963) (10125) (2200) (2075) (3438) (2200) (3287 2200) (4250) (2287) (2037) (2550) (4700) (2637) (3200) (9150) (2837) (5000) (4150 2112) (2625 5375) (2100) (2037) (2325) (2237) (6875) (5825) (8425) (3500) (5937) (2125) (3488 3262) (2013 5713) (2725) (3500) (2350) (2162) (2213) (2037) (3562) (2837) (3200) (2563) (2250) (2937) (2000) (7287) (2637) (7200) (2750) (2750) (4912) (3900) (2813) (2012) (3262) (2675) (3800) (4338) (3225) (2300) (3363) (3687) (4887) (2112 3100) (3000) (2437) (2262) (3012) (2275) (2775) (5563) (2475) (2537) (2038) (2825) (2375) (5113) (2750) (4938) (4175) (2525) (4050) (4800) (4488) (4350) (2425) (2475) (4025) (3975) (2250) (3738 3362) (3675) (2188) (3150 3575) (3112) (2975) (2225) (3313) (2512 2188) (2050) (3200 3200) (3175) (3025) (3138) (2350) (2763) (2550) (2525 2850) (2813) (2125) (2212) (2137 2600) (2012) (2613) (2237) (2225) (2450) (2413) (2200) (2150) (2088) (1988) (1975) (1787) (1738) (1738) (1713) (1513) (1463) (1450) (1300) (1188) (1075) (975) (912) (875) (825) (788) (775) (713) (700) (600) (588) (538) (412) (375) (287) (275) (200) (125) (100) (100) (27000 15612 18212 16175 14875 16125 16125 14575 14175 15075 14287 14875 17262 13387 13662 13625 14475 27000 14387 14300 13412 14587 13037 13187 14937 15712 14962 17475 16037 17575 13175 14737 12737 13062 26725 14512 20700 12687 13137 15762 27000 27000 12850 13112 13775 15900 12725 21387 27000) (787) (2775) (2000) (4037) (2575) (2412) (2325) (3350) (3862) (3275) (5487) (6237) (4250) (2912 2188) (2863) (3400) (2550) (2662) (2012) (2412) (2425 2012) (5812) (2825) (2337 2462) (2212) (2375) (6450) (2825 12025 2600) (2662) (5050) (2263) (2287) (2037) (10487) (2412) (2387) (4850 2700) (3662) (2450) (3225) (5025) (3337 3350 4875) (6462) (2313) (2325) (2187) (2725) (3637) (3275) (2075 2575) (3775) (2313) (3338) (2275) (2100) (2325 2088) (7400) (4650) (2150) (2450) (2237) (4325) (2900) (8675) (2025) (2438) (4175) (3100) (4400) (3063) (6188) (2412) (5262) (2438) (4600) (3287) (4613) (2088) (6637) (2450) (2963) (2575) (2938) (2412) (2387) (2725) (4412) (6550) (2862) (2575) (2500) (2925) (2112) (3037) (2187) (5925) (4775) (2925) (2112) (5650) (2162) (3063) (2575) (4563) (5075) (2050) (4850) (3212) (2050) (2412) (2750) (2700) (2087) (2362 2600) (2225) (3975 3975) (3950) (3850 2300) (3775) (3662) (2225) (2500) (2537) (2412) (2050) (3250) (3175) (3162) (3125) (3037 2862) (2975) (2412) (2813) (2337) (2775) (2425) (2225) (2175) (1975) (1938) (1900) (1863) (1787) (1713) (1688 1688 1688) (1675) (1563) (1525 1525) (1325) (1100) (1075) (900) (700) (688) (662) (563) (463) (350) (238) (138) (63) (50) (35100 20463 26350 35100 20088 18562 18437 19162 19650 22525 18512 18412 18500 18437 18500 19062 18237 17825 19912 17275 19487 16887 17975 17125 0 19175 21112 17500 19400 35100 25500 33975 17288 19150 20187) (2987) (2075) (6150) (2087) (4637 3575) (4050) (2925) (6513) (2425) (2650) (3425) (3075) (4063) (2100) (2788) (2400) (3800) (2237) (2713) (3563) (5000) (15338) (3650) (2225) (4663) (2188) (2700) (10862) (3200) (13888) (3088) (5512) (3850) (5825) (2075) (2575) (3350) (9025) (3013) (2638) (2763) (5912) (2500) (4875) (3600) (6462) (2663) (5650) (2025) (4587) (3025) (6200) (2637) (2000) (2750) (4787) (3650) (2850) (2825) (3625) (3825) (2787) (2375) (4012) (2812) (3162) (2850) (3987) (3850) (3113) (2425) (2688) (7363) (2012) (2087) (2875) (3275 2525) (3613) (3275) (5725) (2575) (2287) (5550) (2100) (2150) (2663) (5037) (4925) (3187) (4837) (2088) (4400) (2112) (2125) (2100) (2288) (3200) (3163) (3025) (2663) (2550) (2425) (2400) (2125) (1813) (1525) (1500) (1375) (1200) (1050) (1000) (163) (12) (42637 21113 25750 20800 20988 20813 20425 20375 21462 23975 19375 21212 22012) (8637) (2887) (2038) (7462) (4213) (6813) (3988) (2150) (3262) (3762) (3650) (5025) (2675) (2175) (2150) (3375) (2438) (9100) (2037) (6788) (3000) (4813) (6125) (3700) (7975) (4463) (2050) (2575) (7988) (2137) (2087) (14313) (2125) (2137) (4988) (10550) (6887) (3025) (3125) (2337) (2000) (5062) (3787) (2650) (3338) (5762) (2375) (3125) (5313) (5275) (2387) (2625) (2600) (2312) (2712) (2700) (2200) (600) (12600 17400 12475 15663 20950 14175))) :lvel (quote ((50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50 50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50 50) (50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 51 51 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 52 52 51) (50) (50) (50) (50) (50) (51) (50) (50) (50) (50) (50) (51) (50) (50) (51) (50) (50) (50 50) (51) (50) (50) (50) (51) (50) (50) (50) (50) (51) (50) (51) (50) (50) (50) (50) (50 50) (50) (50) (50) (50) (50) (50) (50) (51) (50) (51) (50) (50) (50 50) (50) (50 50 50 51 50 50 50 52 50 50 50 51 50 50 50 50 50 51 51 50 53 51 50 50 52 50 51 50 50 54 51 51 50 57 50 51 51 50 52 50 51 52 50 50 50 50 50 50 50 51 50 50 50 50 50 51 50 51 50 53 50 55 50 52 59 63) (50) (50) (51) (51) (50) (50) (51) (51) (50) (50) (50) (51) (51 51) (50) (51) (50) (50) (50) (51) (50) (50) (50 55) (51) (50 52) (50) (51) (53) (51) (50 52) (50 54) (50) (51) (50) (51) (50) (51) (50) (50 52) (51) (51) (51 50) (50) (50) (52) (50 50 51) (50) (50) (50) (50) (50) (50) (50 54) (50 50) (50) (50 53) (50) (50) (53) (50) (50) (50) (51) (51) (50) (50) (51) (50) (50) (55) (51) (50) (52) (50) (53) (50) (50) (50) (50) (50) (50) (56) (50) (51) (50) (50) (50) (50) (50) (50) (51) (51) (51 51) (52) (57) (51) (51) (50) (50) (50) (50) (50) (50) (50) (50) (52) (50) (50) (53) (50) (50) (50) (50 50) (52) (127 67 68 51 51 53 51 52 79 50 58 50 51 50 50 50 50 51 50 82 51 50 65 53 89 50 53 57 57 60 51 56 61 50 53 50 77 52 52 52 51 55 75 50 53 50 50 50 51 50 50 50 52 54 50 50 51 50 51 50 53 60 50 52 58 62 63 53 53 54 69) (51 55 58 54 50) (53 51 50) (50 50 52 53) (57) (50 50) (59) (50) (50) (51) (51) (61) (50) (51 52) (50) (50) (51) (51) (50) (52) (54) (50) (50) (50) (50) (57) (55) (59) (58) (50) (50 54) (50) (76) (50) (50) (51) (50) (62) (50) (50) (76) (50) (51) (50 51) (62) (51) (50 59) (50 50) (50) (56) (50) (66) (53) (50) (50 61) (51) (50 50) (90) (55) (50) (50) (53) (50 51) (56) (76) (72) (50) (58) (50) (75) (50) (51) (51) (51) (50) (51) (51) (54) (58) (54) (50 50 67) (50 50) (57) (51) (54) (51) (50) (50) (50 50) (53) (50) (50) (53) (50) (50) (50) (50 55) (52) (52) (52) (78) (54) (50) (50) (50) (50) (50) (55) (52) (58) (61 71) (50) (50) (51) (70) (50) (50) (100) (50 50 102) (56) (50) (50) (50) (50 59) (50) (54) (59) (51) (51) (50) (50) (65) (50) (61) (50) (50 50) (51) (56) (60) (50) (50) (52) (52) (53) (50) (50) (71) (56) (78) (52) (58) (50 69) (69) (50) (50) (50) (50) (50 54) (61) (58) (50) (50 55) (50) (50 64) (50 50) (50) (55) (50) (50) (50) (51) (68) (50 50) (56) (52) (54) (51) (61) (50) (55) (51) (50) (50) (52) (50) (61) (50) (63) (51) (50) (51) (50) (62) (51) (51) (50) (50) (64 92 50 50 50 51 50 50 73 50 51 50 62 57 50 51 56 50 50 50 50 53 50 50 56 54 50 50 52 50 50 51 52 52 50 50 55 50 52 50 50 50 52 50 50 52 53 50 51 50 60 63 54 53 55 50 69 70) (50 54) (52) (50) (50) (50) (50) (50) (56 59) (50) (50) (60) (50) (52) (63) (50) (50) (60) (50) (57) (50) (53) (50) (72) (50) (50) (56) (71) (50 64) (50) (50) (54) (50) (50) (50) (50) (52) (50) (52) (50 50) (51 51) (52) (50) (50) (50) (50) (56) (68) (50) (58) (50) (50 53) (50 52) (50) (51) (52) (58) (50) (50) (50) (51) (50) (50) (66) (50) (50) (51) (50) (59) (52) (50) (50) (52) (50) (58) (52) (52) (51) (50) (51) (51) (50) (53) (53) (52 56) (50) (54) (50) (50) (50) (50) (55) (50) (50) (50) (50) (51) (57) (51) (53) (50) (57) (50) (50) (50) (50) (52) (53) (50) (50) (50) (50 51) (51) (50) (50 51) (50) (51) (50) (56) (50 50) (50) (50 51) (50) (50) (52) (52) (57) (50) (51 52) (51) (50) (53) (50 50) (57) (61) (50) (51) (51) (50) (50) (50) (56) (51) (60) (52) (50) (59) (50) (50) (50) (50) (50) (52) (50) (50) (51) (51) (51) (60) (50) (50) (50) (50) (50) (50) (51) (51) (51) (50) (50) (53) (54) (50) (65 51 51 50 50 50 50 51 51 53 51 50 51 50 50 52 51 55 50 51 55 50 50 50 50 50 52 51 51 60 50 51 50 55 52 51 50 50 53 54 55 58 50 51 50 59 51 54 59) (52) (52) (50) (50) (50) (51) (50) (50) (55) (50) (50) (55) (50) (50 50) (50) (50) (50) (50) (50) (50) (51 51) (50) (50) (51 51) (50) (51) (50) (51 51 56) (50) (51) (50) (51) (50) (53) (52) (57) (50 51) (50) (50) (51) (54) (50 51 52) (50) (51) (52) (50) (50) (52) (51) (50 51) (50) (50) (54) (50) (50) (50 50) (51) (50) (50) (50) (51) (51) (50) (56) (50) (57) (51) (50) (50) (54) (50) (50) (51) (50) (51) (51) (51) (50) (54) (50) (50) (50) (52) (51) (50) (51) (51) (50) (50) (50) (51) (51) (55) (50) (51) (55) (53) (50) (51) (50) (53) (50) (51) (50) (52) (50) (50) (50) (51) (50) (50) (50) (50) (50 51) (51) (54 55) (50) (50 50) (50) (50) (50) (50) (50) (50) (50) (51) (50) (50) (50) (50 51) (51) (52) (51) (50) (50) (50) (50) (51) (50) (51) (51) (51) (50) (52) (50 53 52) (50) (51) (50 50) (50) (50) (50) (53) (51) (50) (50) (50) (50) (50) (50) (50) (50) (54) (51 51 51 53 50 50 50 50 50 51 50 50 50 50 50 50 50 50 50 51 50 50 50 50 50 50 50 51 50 51 51 52 51 50 51) (52) (50) (50) (50) (51 51) (51) (50) (50) (51) (50) (50) (51) (50) (50) (50) (50) (50) (50) (50) (50) (51) (51) (51) (51) (50) (50) (50) (51) (50) (50) (50) (50) (51) (51) (51) (50) (50) (50) (50) (51) (50) (50) (50) (51) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (51) (51) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (51) (50) (50) (50) (50) (51) (50 50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (51) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (51) (51) (50) (50) (50 50 50 50 50 50 50 50 50 50 50 50 50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50) (50 50 50 50 50 50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0) (0 0 0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0 0 0 0 0 0 0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0 0 0))) :lchan (quotelegato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0) (0 0 0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0 0 0 0 0 0 0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.01 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 174 85) (om-make-point 1518 682) 0 1000 nil 13/100 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 48 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 737 408) (om-make-point 130 168) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8076 7960 5996) (8696 8360 7504 7524 7350) (6806 5574 3482 7206) (4322) (6218 4772) (6566) (4274) (7178) (6992) (6216) (6552) (7868 7510) (3400) (7244) (6986) (4236) (3084) (7242) (4656) (7172) (1810) (6532) (6216) (4788) (2870) (6204) (6628) (4030) (2944) (4094) (6556) (2468) (6226) (4294) (7368) (3260) (4340) (4938) (3128) (6222) (2706) (4478) (6048) (6058) (3052) (4516) (4270) (4322) (6054) (4890) (6038) (3010) (4780) (6094) (7308) (7114) (6496) (4542) (4278) (4864) (6192) (4286) (3146) (4860) (6086) (6138) (3096) (4798) (6018) (4542) (4876) (4362) (3014) (5548) (4832) (4684) (6084) (5646) (7332) (4234) (5234) (5598) (5574) (4652) (3142) (5570) (4964) (3036) (6490) (4134) (4586) (3126) (4292) (4956) (8460 7820) (4518) (3926) (4826) (5408) (7138) (7026) (8774) (6554) (3922) (7932 7774) (9264 8200) (5566) (7718) (6982) (8052 4902) (7612) (8660 6474) (9220) (8474) (7314) (4568) (7150) (5092) (6994) (7216) (8090) (6826) (4932) (4520) (4560) (7970 7042) (6034) (3104) (7214) (6522) (4256) (7056) (3210) (6522) (7276) (6226) (4380) (7562) (7810) (6480) (8118) (7490) (7350) (8038) (4646) (7022) (6456) (6580) (3856) (6490) (5974) (7112) (4862) (4320) (3460) (3210) (5580) (6012) (4152) (6540) (6210) (3182) (4944) (5056) (4444) (3034) (6214) (3936) (4956) (4718) (3782) (4062) (4622) (5974) (4042) (6198) (4942) (6214) (3942) (6202) (4748) (3442) (4266) (6208) (3078) (4190) (2926) (4138) (3944) (3810) (6212) (3804) (4492) (4248) (3272) (2912) (4132) (3084) (4684) (6626) (2850) (4220) (6484) (2612) (4294) (3708) (6090) (3222) (4830) (5356) (4632) (4338) (3256) (4562) (5560 4820) (3590) (2916) (5594) (4236) (2978) (3864) (4876) (5590) (4852) (4160) (3920) (5132) (5508) (4542) (2996) (4892) (3006) (6114) (4870) (6176) (4356) (7002) (3514) (6062) (5928) (4762) (4386) (6570) (5482) (3376) (4702) (3882) (4050) (4412) (6606) (6188) (3316) (5118) (9540 6466) (3400) (6144) (6480) (3402) (5488))) :lonset (quote (0 2 6 19 89 136 375 391 550 657 814 891 1226 1314 1388 1421 1713 1847 1871 2021 2438 2459 2532 2629 2714 2856 2915 2958 3399 3418 3516 3720 3883 3961 4240 4271 4335 4542 4776 4996 5073 5177 5446 6190 6531 7090 7294 7897 8042 8305 8387 8795 8809 8841 8854 9219 9230 9343 9727 9886 9927 10228 10285 10530 10703 11743 11778 11867 12121 12440 12756 13282 13484 13521 14684 15017 15465 15679 15715 15918 16310 16355 16803 16998 17380 17528 18226 18414 18473 18790 19286 19783 19966 20025 20401 20433 20538 20968 21129 21209 21376 21513 21523 21815 21941 21952 21992 22057 22070 22096 22164 22174 22267 22366 22415 22497 22570 22757 22785 22807 22914 23006 23140 23168 23489 23529 23677 23792 23913 24085 24251 24366 24643 24658 24682 24734 24862 25065 25180 25189 25264 25282 25579 25674 25714 25763 25841 25977 26307 26439 26486 26732 26744 26788 26873 27363 27693 27810 27935 28187 28309 28416 28812 28943 29061 29162 29248 29402 29484 29833 30049 30298 30525 30611 31344 31434 31694 32175 32472 32768 32793 32859 33494 33703 33755 34568 34707 34937 35165 35582 35816 36105 36696 37231 37291 37689 37796 38100 38403 38431 38492 39976 40106 40172 40469 40566 40685 41200 41518 41750 41823 42492 43079 43476 43646 43783 44199 44262 44461 44996 45097 45284 46206 46398 46509 46741 47303 47931 48571 48726 49411 49875 50419 50826 51171 51214 52130 52307 52602 52657 52709 52841 52970 52988 53461 53595 53807 54334 54866 54897 55572 55649 55856 55967 56055 56121 56362 56607 56693 57000)) :ldur (quote ((1131 498 4996) (2298 1566 1442 619 703) (24201 13658 1106 472) (403) (580 1434) (583) (411) (710) (442) (856) (1269) (770 3563) (521) (718) (1263) (890) (410) (3448) (2699) (1358) (313) (566) (333) (387) (640) (343) (453) (451) (308) (358) (1117) (626) (312) (385) (937) (497) (1120) (442) (343) (550) (410) (1956) (482) (496) (323) (366) (603) (1058) (397) (498) (383) (371) (580) (1171) (1083) (321) (485) (554) (558) (355) (845) (2179) (396) (605) (1013) (345) (591) (788) (1065) (1513) (533) (2183) (330) (2444) (408) (2271) (8257) (619) (6668) (392) (465) (376) (335) (2704) (416) (3528) (413) (450) (3023) (425) (528) (393) (365) (486) (2185 1551) (378) (1046) (904) (957) (349) (912) (1272) (519) (558) (1521 365) (345 882) (5774) (489) (671) (828 456) (2920) (2134 856) (2818) (315) (2157) (662) (320) (509) (745) (345) (640) (33981) (329) (553) (1192) (525 326) (2792) (300) (917) (602) (775) (1539) (519) (542) (743) (322) (901) (377) (923) (485) (681) (1082) (366) (2613) (650) (1120) (313) (585) (513) (1442) (1235) (321) (435) (1280) (317) (420) (15953) (3008) (1194) (950) (394) (491) (317) (368) (436) (716) (325) (671) (525) (758) (356) (1087) (2322) (10169) (373) (358) (598) (593) (321) (379) (4361) (388) (464) (367) (733) (364) (357) (306) (432) (313) (3990) (415) (1797) (433) (440) (382) (335) (415) (2948) (1071) (596) (492) (409) (306) (484) (1517) (9721) (317) (468) (310) (1231) (1165) (420) (1799) (704 491) (577) (303) (1885) (630) (866) (1644) (1016) (1198) (1177) (399) (1843) (2094) (5897) (4050) (1149) (344) (1172) (656) (388) (1353) (1586) (4870) (1138) (4385) (324) (317) (444) (1741) (2833) (326) (1279) (473) (328) (2016) (390) (537) (319) (1135) (1032 315) (439) (761) (491) (380) (307))) :lvel (quote ((50 50 79) (50 50 51 51 51) (61 87 98 51) (109) (63 127) (52) (117) (52) (52) (61) (51) (50 50) (99) (50) (51) (92) (91) (50) (98) (50) (82) (50) (55) (80) (87) (59) (51) (83) (79) (81) (51) (83) (58) (100) (50) (105) (90) (63) (89) (51) (116) (84) (51) (50) (101) (62) (61) (56) (50) (53) (51) (58) (52) (51) (50) (50) (51) (53) (52) (51) (50) (51) (53) (51) (50) (50) (52) (51) (50) (51) (50) (51) (51) (50) (50) (51) (52) (50) (50) (51) (51) (50) (51) (52) (53) (51) (51) (54) (50) (51) (52) (54) (53) (52) (50 50) (54) (57) (56) (53) (50) (51) (50) (51) (59) (50 50) (50 50) (60) (50) (51) (50 57) (50) (50 51) (50) (50) (50) (56) (51) (53) (51) (50) (50) (62) (53) (56) (56) (50 51) (53) (58) (50) (51) (56) (50) (57) (51) (50) (51) (60) (50) (50) (51) (50) (50) (50) (50) (60) (50) (50) (51) (63) (50) (56) (50) (66) (68) (67) (65) (86) (53) (63) (50) (51) (60) (55) (54) (57) (60) (50) (56) (54) (61) (57) (60) (67) (62) (63) (52) (60) (53) (63) (53) (92) (61) (76) (53) (69) (77) (71) (85) (79) (77) (54) (75) (87) (80) (75) (81) (73) (75) (100) (50) (75) (93) (50) (78) (89) (81) (54) (78) (66) (57) (66) (63) (64) (63) (63 65) (65) (65) (63) (64) (63) (61) (61) (54) (54) (55) (53) (52) (55) (54) (54) (53) (56) (51) (52) (51) (53) (51) (55) (95) (57) (55) (55) (50) (80) (54) (64) (60) (61) (92) (50) (69) (80) (104) (50 51) (76) (82) (51) (92) (68))) :loffset (quote ((0 0 0) (0 0 0 0 0) (0 0 0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0))) :lchan (quote ((1 1 1) (1 1 1 1 1) (1 1 1 1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1 1) (1) (1) (1) (1 1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0) (0 0 0 0 0) (0 0 0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.01 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 174 85) (om-make-point 1354 499) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SDIF->CHORD-SEQ 2" (quote sdif->chord-seq) (quote ((om-load-inputfun (quote input-funbox) "SDIF file" "SELF" nil))) (om-make-point 691 248) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "to analzye drone 2.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 659 97) (om-make-point 70 50) (let ((newobj (make-instance (quote sdiffile)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 400 500) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 334 377) (om-make-point 130 168) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7396) (8380) (8064) (4748) (7370) (6344) (5580) (4068) (6826) (5984) (7024) (2926) (960) (4174) (3204) (6286) (2288) (4038) (6284) (2896) (3994) (6232) (3800) (5120) (1760) (2812) (1868) (3542) (6226) (4088) (4192) (2876) (6236) (3126) (6218) (3188) (4228) (5132) (3022) (4828) (6292) (4552) (6260) (4168) (3174) (4814) (6602) (5132) (6210) (3760) (714) (6216) (4154) (6218) (6228) (4190) (5112) (6234) (6336) (2864) (4868) (6164) (4356) (4900) (3082) (6238) (5044) (4256) (4670) (6560) (1122) (5958) (3492) (2000) (5242) (4038) (5946) (2638) (3164) (5044) (4238) (4518) (5594) (5108) (4240) (6212) (5258) (4814) (5922) (4840) (4252) (4306) (3228) (4940) (6506) (2798) (6222) (4760) (4898) (2930) (5936) (1750) (5892) (4556) (3270) (6618) (5960) (4494) (6608) (5868) (5050) (5924) (5190) (5892) (5916) (3516) (4574) (5004) (5942) (2128) (6290) (5004) (6140) (5126) (5880) (3548) (1560) (6078) (4768) (2972) (6360) (3398) (4310) (6266) (4058) (3680) (6632) (4262) (3540) (3282) (5280) (2206) (4220) (2674) (3408) (3884) (1454) (5176) (6034) (1930) (4006) (3326) (6100) (6322) (4200) (3018) (6422) (4866) (3614) (5244) (4268) (3290) (4332) (3880) (6524) (4294) (3212) (6432) (2322) (4776) (4832) (4384) (5274) (3972) (6562) (6388) (2098) (5264) (3444) (5580) (4306) (6446) (4916) (6190) (3628) (2016) (3458) (4700) (4098) (3094) (6438) (2804) (5308) (6072) (1984) (4934) (6394) (3802) (1788) (5254) (4414) (4282) (2768) (4742) (3424) (4232) (958) (4080) (6078) (6324) (6266) (5986) (1676) (3374) (2494) (5248) (4736) (6346) (3896) (976) (3530) (4738) (6356) (4308) (468) (3138) (3532) (6086) (4856) (6300) (6598) (5264) (3476) (4414) (4824) (3672) (4344) (6572) (4106) (660) (6444) (4032) (3114) (6556) (3548) (6294) (4280) (3818) (4782) (6354) (3906) (6230) (4378) (2892) (702) (6554) (828) (6294) (3488) (888) (3348) (2850) (5242) (4272) (6472) (5236) (1418) (6404) (2852) (4216) (3888) (3154) (4888) (5812) (6090) (4748) (3186) (1340) (6254) (4286) (3118) (4258) (6320) (764) (6352) (3480) (3004) (6290) (4152) (6560) (468) (2674) (3230) (2190) (5496) (3422) (5268) (4992) (3664) (6552) (3484) (4840) (2304) (5576) (4180) (4348) (5246) (6090) (4880) (5838) (3402) (4050) (782) (2554) (5836) (3984) (4692) (878) (5912) (3490) (4250) (4946) (722) (6492) (4824) (3114) (5870) (4238) (4144) (658) (5870) (4114) (4748) (4146) (5320) (6312) (4822) (5864) (1438) (5282) (3396) (4406) (3762) (3874) (1146) (6332) (4394) (6324) (3398) (5240) (6520) (5302) (5260) (2904) (4140) (4356) (4082) (5574) (6512) (3318) (508) (2678) (4878) (4906) (6334) (3384) (4226) (6232) (3228) (6502) (4228) (2804) (4584) (6310) (3090) (7214) (5310) (7136) (5940) (4878) (4418) (6452) (804) (4920) (6246) (6338) (2904) (4984) (6340) (6352) (3046) (6286) (6296) (4934) (6282) (4354) (4880) (3194) (4976) (6268) (3094) (5058) (5220) (5036) (6306) (4944) (878) (6118) (5142) (3106) (4938) (6348) (4290) (948) (6360) (5064) (4922) (6338) (2986) (6000) (6498) (4966) (7326) (4994) (4936) (6316) (3422) (2740) (4916) (7520) (5558) (6196) (3064) (8214) (7248) (7026) (778) (3196) (6616) (5978) (3826) (6446) (7212) (7918) (3152) (4932) (7232) (4316) (4342) (6446) (4322) (6516) (4314) (3198) (5928) (2608) (4290) (6050) (6382) (790) (6154) (7682) (7916) (9840) (7048) (6560) (3258) (8922) (6048) (9900) (8648) (5956) (7358) (688) (6220) (4228) (8610) (7046) (5986) (6468) (6012) (2894) (720) (6046) (2840) (2780) (3502) (6562) (3168) (3244) (4656) (5986) (7024) (980) (7214) (8186) (5018) (3522) (5040) (1676) (6280) (6132) (7018) (4282) (3204) (6152) (5904) (3422) (7936) (7326) (4840) (4858) (7666) (5248) (6200) (6328) (5828) (3512) (6430) (5878) (4672) (3708) (6536) (5878) (4416) (6400) (6148) (7944) (6572) (3414) (5940) (4940) (5924) (4266) (6496) (4786) (3576) (4946) (6522) (4360) (5890) (3562) (5942) (4456) (3160) (4620) (5928) (3822) (6490) (4052) (3470) (4946) (3252) (6430) (5806) (4726) (3504) (6652) (5170) (930) (4808) (3576) (5718) (7020) (6534) (5978) (6378) (3756) (6510) (4590) (5942) (5184) (4282) (3694) (6512) (4988) (3300) (4248) (6222) (6564) (4854) (7018) (3520) (4376) (6214) (4644) (2478) (6068) (6526) (6316) (2278) (6574) (5144) (6284) (1812) (5896) (5442) (3366) (5658) (6194) (7018) (6470) (5204) (6214) (4506) (4126) (3332) (6458) (5196) (2796) (5482) (6244) (6570) (6274) (3344) (6292) (5688) (6422) (3028) (7020) (6082) (3252) (4842) (6260) (6668) (4192) (6354) (6194) (4350) (5190) (3312) (6536) (6184) (5168) (9540) (2882) (5508) (1686) (3804) (4378) (6434) (3994) (5542) (10488) (5556) (2738) (6510) (5542) (3144) (1494) (5554) (6610) (5560) (6262) (3156) (4084) (5454) (6120) (6484) (3124) (6494) (5518) (6386) (6064) (5570) (6298) (5666) (5846) (5172) (6074) (3956) (6390) (5688) (6394) (3042) (6604) (5068) (6544) (9550) (5712) (5902) (3382) (6100) (4298) (5558) (6278))) :lonset (quoteldur (quote ((6583) (2425) (748) (2952) (1229) (222) (7034) (264) (60970) (5621) (254) (252) (115) (200) (362) (328) (110) (382) (379) (498) (275) (194) (373) (142) (124) (180) (213) (436) (433) (179) (991) (104) (352) (394) (404) (207) (525) (107) (242) (221) (152) (1651) (451) (129) (1213) (201) (262) (128) (195) (101) (126) (160) (294) (152) (228) (120) (252) (179) (208) (333) (174) (273) (298) (130) (554) (1590) (359) (201) (1310) (351) (126) (297) (277) (101) (220) (154) (643) (141) (1138) (231) (126) (869) (9215) (158) (193) (644) (175) (123) (600) (149) (806) (121) (285) (109) (416) (273) (2124) (110) (207) (484) (138) (103) (291) (627) (1312) (156) (295) (1005) (304) (144) (206) (278) (110) (141) (131) (739) (1020) (256) (231) (111) (419) (153) (473) (175) (132) (184) (101) (2939) (3450) (119) (248) (454) (186) (126) (194) (291) (166) (522) (273) (209) (130) (111) (698) (160) (294) (705) (256) (112) (137) (271) (484) (471) (3547) (125) (343) (348) (478) (1176) (542) (122) (341) (155) (112) (394) (197) (107) (823) (173) (194) (1176) (162) (159) (198) (418) (111) (313) (167) (106) (382) (12614) (573) (503) (277) (102) (145) (120) (100) (649) (442) (156) (134) (199) (323) (1925) (360) (474) (316) (399) (124) (202) (989) (401) (440) (1895) (530) (177) (101) (943) (1993) (131) (134) (121) (169) (106) (242) (132) (731) (264) (370) (171) (605) (785) (310) (103) (101) (284) (710) (4996) (1039) (131) (127) (101) (604) (104) (1755) (690) (213) (284) (189) (122) (308) (631) (282) (445) (510) (128) (317) (329) (3077) (177) (907) (290) (181) (239) (122) (771) (105) (109) (239) (115) (731) (103) (154) (692) (409) (104) (105) (389) (158) (104) (178) (408) (330) (108) (3906) (2878) (833) (121) (126) (256) (476) (772) (127) (112) (272) (191) (442) (106) (1110) (519) (103) (265) (293) (128) (694) (277) (103) (502) (1195) (1864) (129) (432) (139) (4924) (182) (449) (173) (10937) (1058) (101) (307) (469) (108) (121) (144) (402) (134) (113) (112) (386) (218) (345) (124) (671) (1516) (1527) (102) (141) (123) (129) (122) (208) (138) (822) (126) (192) (2508) (123) (130) (130) (149) (149) (653) (168) (177) (106) (105) (113) (613) (110) (117) (102) (144) (239) (138) (119) (662) (8747) (333) (556) (101) (130) (209) (1408) (119) (216) (288) (104) (306) (405) (319) (416) (1228) (131) (1305) (222) (137) (3611) (101) (126) (2432) (164) (139) (520) (117) (152) (410) (693) (118) (113) (1161) (149) (185) (327) (171) (2461) (239) (220) (260) (400) (1184) (106) (108) (402) (198) (135) (106) (1885) (176) (813) (168) (150) (2229) (174) (188) (116) (423) (113) (1015) (113) (266) (310) (199) (192) (299) (552) (262) (214) (762) (841) (11840) (1980) (176) (263) (350) (402) (113) (128) (126) (139) (248) (224) (480) (119) (736) (3264) (1803) (158) (105) (125) (166) (626) (827) (532) (221) (611) (845) (235) (115) (156) (626) (1659) (1091) (179) (661) (366) (312) (199) (129) (124) (605) (101) (2096) (114) (726) (1035) (6183) (898) (121) (190) (135) (163) (161) (1597) (112) (106) (162) (2160) (102) (341) (1153) (111) (353) (173) (110) (743) (171) (180) (118) (199) (324) (151) (1852) (427) (242) (1624) (221) (392) (1033) (4162) (1680) (126) (3150) (161) (121) (173) (117) (400) (116) (244) (317) (912) (144) (122) (201) (182) (5352) (3958) (867) (648) (219) (393) (114) (402) (243) (184) (326) (812) (988) (320) (166) (268) (102) (2550) (156) (170) (120) (157) (478) (227) (104) (494) (105) (130) (111) (235) (299) (169) (164) (105) (115) (482) (158) (1490) (516) (109) (111) (717) (188) (569) (114) (172) (208) (172) (158) (392) (348) (215) (125) (438) (451) (1078) (890) (101) (124) (1085) (160) (675) (224) (225) (105) (255) (176) (160) (100) (4406) (816) (480) (154) (159) (733) (330) (212) (239) (1009) (151) (168) (185) (1051) (179) (123) (133) (188) (132) (185) (110) (232) (143) (215) (4823) (101) (329) (203) (151) (114) (129) (111) (609) (1062) (532) (657) (328) (1636) (2717) (2980) (120) (196) (151) (130) (526) (131) (1197) (125) (2954) (104) (145) (281) (104) (372) (134) (235) (384) (107) (290) (144) (1192) (182) (831) (109) (662) (219) (106) (217) (103) (137) (101) (151) (519) (612) (779) (881) (118) (154) (110) (419) (181) (1757) (327) (1742) (116) (1127) (511) (387) (714) (109) (104))) :lvel (quote ((50) (50) (50) (98) (50) (51) (127) (65) (68) (61) (50) (65) (60) (61) (67) (52) (67) (67) (52) (70) (62) (52) (70) (54) (65) (71) (71) (66) (52) (63) (72) (56) (53) (69) (52) (62) (79) (59) (63) (69) (51) (81) (52) (69) (69) (68) (50) (55) (54) (62) (58) (52) (79) (51) (52) (60) (55) (52) (51) (75) (59) (54) (62) (61) (80) (53) (61) (65) (81) (50) (54) (56) (64) (56) (55) (66) (55) (66) (75) (58) (72) (93) (126) (58) (82) (54) (62) (62) (57) (73) (79) (73) (72) (60) (50) (67) (53) (70) (62) (68) (54) (59) (58) (83) (72) (50) (59) (82) (50) (58) (56) (56) (56) (52) (57) (77) (85) (61) (59) (60) (52) (67) (52) (55) (58) (62) (59) (69) (111) (61) (51) (67) (64) (54) (62) (75) (50) (105) (89) (82) (56) (53) (67) (83) (78) (69) (59) (54) (54) (60) (83) (92) (66) (51) (90) (78) (50) (88) (86) (52) (76) (61) (63) (77) (50) (76) (83) (51) (71) (66) (70) (68) (62) (76) (50) (50) (68) (60) (77) (68) (66) (50) (61) (52) (68) (70) (61) (62) (65) (66) (50) (68) (53) (55) (59) (57) (50) (68) (61) (54) (60) (62) (64) (66) (61) (53) (60) (63) (54) (50) (51) (51) (60) (54) (58) (53) (59) (50) (61) (59) (64) (56) (50) (52) (57) (59) (62) (55) (62) (50) (50) (51) (62) (52) (63) (60) (55) (50) (57) (57) (50) (64) (58) (50) (73) (51) (58) (59) (63) (50) (67) (51) (56) (60) (56) (50) (56) (50) (72) (60) (61) (55) (53) (68) (50) (53) (63) (50) (58) (54) (56) (57) (59) (51) (54) (63) (63) (54) (51) (53) (60) (56) (51) (60) (50) (55) (59) (50) (65) (50) (52) (57) (59) (54) (53) (58) (52) (54) (56) (50) (59) (52) (59) (54) (53) (53) (51) (51) (53) (50) (59) (55) (58) (55) (50) (54) (51) (55) (50) (54) (53) (54) (52) (50) (54) (55) (50) (51) (52) (53) (50) (52) (51) (52) (51) (50) (51) (50) (55) (51) (53) (51) (52) (52) (52) (50) (51) (50) (53) (50) (50) (50) (50) (54) (51) (51) (52) (55) (50) (52) (51) (52) (51) (52) (50) (52) (51) (50) (52) (50) (51) (52) (52) (50) (52) (50) (50) (50) (50) (51) (55) (50) (51) (51) (50) (50) (53) (52) (50) (50) (53) (50) (50) (52) (50) (58) (52) (52) (50) (50) (55) (50) (51) (51) (50) (50) (53) (51) (51) (56) (50) (50) (55) (52) (50) (50) (51) (50) (54) (50) (50) (51) (50) (50) (51) (50) (53) (54) (51) (50) (67) (51) (52) (50) (50) (50) (55) (52) (50) (50) (53) (50) (50) (50) (53) (53) (50) (51) (51) (50) (51) (50) (53) (52) (50) (52) (53) (51) (50) (51) (52) (50) (50) (50) (50) (50) (52) (50) (50) (50) (50) (51) (50) (53) (51) (55) (50) (50) (50) (50) (51) (51) (51) (53) (50) (50) (51) (50) (51) (52) (54) (51) (50) (52) (50) (50) (51) (52) (52) (51) (51) (51) (50) (53) (52) (63) (55) (53) (50) (50) (55) (51) (50) (52) (53) (51) (52) (55) (50) (53) (53) (57) (50) (52) (54) (50) (87) (50) (50) (57) (52) (54) (52) (55) (50) (52) (56) (58) (50) (56) (51) (53) (51) (61) (53) (56) (52) (53) (50) (55) (54) (59) (51) (50) (53) (58) (58) (50) (54) (51) (55) (57) (52) (50) (51) (53) (51) (62) (50) (61) (52) (56) (59) (56) (50) (63) (56) (59) (69) (50) (61) (50) (62) (54) (70) (75) (54) (71) (50) (55) (54) (50) (63) (55) (55) (112) (75) (63) (58) (57) (50) (51) (63) (57) (85) (59) (56) (50) (91) (53) (62) (59) (51) (54) (57) (55) (60) (52) (56) (51) (65) (78) (77) (57) (50) (68) (54) (66) (88) (90) (71) (50) (66) (98) (50) (60) (57) (56) (61) (110) (51) (101) (56) (50) (53) (62) (51) (56) (64) (55) (58) (50) (56) (65) (66) (87) (60) (77) (51) (88) (51) (57) (54) (71) (53) (58) (64) (91) (104) (98) (85) (52) (65) (53) (88) (51) (62) (51) (50) (61) (85) (72) (112) (59) (58) (60))) :loffset (quotelchan (quotelegato 0)))) (load-port-info newobj (quoteinit-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.01 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 174 85) (om-make-point 1354 499) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SDIF->CHORD-SEQ" (quote sdif->chord-seq) (quote ((om-load-inputfun (quote input-funbox) "SDIF file" "SELF" nil))) (om-make-point 288 217) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "promeDroneSDIF.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 216 57) (om-make-point 70 50) (let ((newobj (make-instance (quote sdiffile)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 400 500) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 1 nil 0) (17 0 7 0 nil 0) (10 0 9 1 nil 0) (12 1 10 0 nil 0) (8 0 11 0 nil 0) (11 0 12 0 nil 0) (14 0 15 1 nil 0) (3 0 16 0 nil 0) (16 0 17 0 nil 0) (19 0 18 0 nil 0) (20 0 19 0 nil 0) (22 0 21 0 nil 0) (23 0 22 0 nil 0))) nil 7.01))
