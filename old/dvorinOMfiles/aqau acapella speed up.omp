; OM File Header - Saved 2024/02/06 13:56:41
; (7.01 :patc (om-make-point 388 110) (om-make-point 0 44) (om-make-point 956 1035) "" 183 0 "2023/11/01 14:30:03" "2023/11/02 11:28:07")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "aqau acapella speed up" (quote ((let ((box (om-load-editor-box1 "VOICE 3" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 167 822) (om-make-point 130 70) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (99/4 (((4 4) (2 (1 (4.0 1.0 2)) 1.0)) ((4 4) (1.0 (1 (1.0 2)) 2.0)) ((4 4) (3 (1 (4.0 1.0 3)))) ((4 4) (2.0 (1 (1.0 7)) 1.0)) ((4 4) ((1 (3.0 1)) 2.0 (1 (1.0 2)))) ((4 4) (1.0 (1 (4.0 3)) 1.0 (1 (3.0 1)))) ((4 4) (1.0 (1 (3.0 4)) 2.0)) ((4 4) (2 (1 (4.0 1.0 2)) 1.0)) ((4 4) ((1 (3.0 1)) 1.0 (1 (7.0 1)) 1.0)) ((4 4) ((1 (4.0 1.0 3)) 1.0 (1 (4.0 3)) 1.0)) ((4 4) ((1 (3.0 4 1.0)) 1.0 (1 (1.0 7)) (1 (4.0 1.0 1)))) ((4 4) (1.0 (1 (2.0 4 1.0)) 1.0 1)) ((4 4) ((1 (3.0 4)) 1.0 1 1)) ((4 4) ((1 (2.0 4 1.0)) (1 (3.0 4)) (1 (4.0 1.0 1)) (1 (3.0 1)))) ((4 4) ((1 (3.0 3 2)) 1.0 (1 (1 1)) (1 (1.0 6 1)))) ((4 4) (1.0 (1 (4 1.0 1)) 1.0 1)) ((4 4) ((1 (1.0 7)) (1 (1.0 3)) (1 (2.0 4 1.0 1)) (1 (4.0 1.0 1)))) ((4 4) (1.0 (1 (1.0 4 1.0)) (1 (3.0 4)) 1.0)) ((4 4) ((1 (1.0 1 3 3)) (1 (1 2 1)) (1 (1 1 1 1)) (1 (4.0 1.0 1)))) ((4 4) ((1 (4.0 1 1)) (1 (2.0 2 1 2)) (1 (1.0 1 1 3 1)) (1 (7.0 1)))) ((4 4) ((1 (2 1 1 3 1)) (1 (1 1 3 1)) (1 (2.0 1 1 1 2)) (1 (1 1 3 2 1)))) ((4 4) ((1 (2.0 3 2 1)) (1 (3 1 1 1)) (1 (1 3 1 1 1 1)) (1 (1 2 2 1 2)))) ((4 4) ((1 (1.0 1 1 1 4)) (1 (2 1 1 1 1)) (1 (2 2 1 2)) (1 (1 2 4 1)))) ((4 4) ((1 (1 2 1)) (1 (2.0 1 2 2 1)) (1 (3 1)) (1 (1 2 1)))) ((3 4) ((1 (1.0 1 2 3)) (1 (1 1)) 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6450 5700 4630)) :ldur (quote (2308 2308 2308)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5138)) :ldur (quote (330)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6396 5800 4630)) :ldur (quote (769 769 769)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4916 6098)) :ldur (quote (3462 3462)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5828 6414 4646)) :ldur (quote (433 433 433)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5906)) :ldur (quote (1010)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4532 5784)) :ldur (quote (288 288)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5976)) :ldur (quote (769)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4606)) :ldur (quote (495)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6162 4904)) :ldur (quote (288 288)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6256)) :ldur (quote (659)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4512 5632 6606 6410)) :ldur (quote (2308 2308 2308 2308)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5748)) :ldur (quote (330)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6552 4704 5706 6342)) :ldur (quote (288 288 288 288)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6640)) :ldur (quote (144)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5758 6400 4506)) :ldur (quote (433 433 433)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6614)) :ldur (quote (495)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6528 4730 6122)) :ldur (quote (577 577 577)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5762)) :ldur (quote (1010)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6458)) :ldur (quote (192)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6148)) :ldur (quote (659)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5748 6142 4800)) :ldur (quote (1154 1154 1154)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6290)) :ldur (quote (659)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5796)) :ldur (quote (1154)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6468)) :ldur (quote (1154)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6434 5060)) :ldur (quote (659 659)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6430 5728 4520)) :ldur (quote (659 659 659)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5740 4978 6476)) :ldur (quote (192 192 192)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6606)) :ldur (quote (288)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4770)) :ldur (quote (433)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6050)) :ldur (quote (288)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4458)) :ldur (quote (577)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5716)) :ldur (quote (577)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4666)) :ldur (quote (865)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6486)) :ldur (quote (144)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6388)) :ldur (quote (769)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5028)) :ldur (quote (192)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5974 4772 6532)) :ldur (quote (1154 1154 1154)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6406)) :ldur (quote (1010)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5316)) :ldur (quote (865)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6660)) :ldur (quote (577)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6444 5734 6670 5166)) :ldur (quote (144 144 144 144)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4538)) :ldur (quote (192)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5346 6406 5850)) :ldur (quote (769 769 769)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5650)) :ldur (quote (659)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4630 5700 6450)) :ldur (quote (144 144 144)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5138)) :ldur (quote (433)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4630 5800 6396)) :ldur (quote (433 433 433)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6098 4916)) :ldur (quote (288 288)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4646 6414 5828 5906)) :ldur (quote (577 577 577 577)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5784 4532)) :ldur (quote (288 288)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5976 4606)) :ldur (quote (288 288)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4904 6162 6256)) :ldur (quote (288 288 288)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6410 6606 5632 4512)) :ldur (quote (288 288 288 288)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5748)) :ldur (quote (288)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6342 5706 4704 6552)) :ldur (quote (192 192 192 192)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6640)) :ldur (quote (192)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4506 6400 5758 6614)) :ldur (quote (192 192 192 192)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6122 4730 6528)) :ldur (quote (330 330 330)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5762 6458)) :ldur (quote (165 165)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6148)) :ldur (quote (330)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800 6142 5748)) :ldur (quote (165 165 165)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6290)) :ldur (quote (165)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5796 6468)) :ldur (quote (495 495)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5060 6434)) :ldur (quote (165 165)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4520 5728 6430)) :ldur (quote (144 144 144)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6476 4978 5740 6606)) :ldur (quote (288 288 288 288)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4770 6050)) :ldur (quote (144 144)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4458)) :ldur (quote (144)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5716)) :ldur (quote (433)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4666 6486 6388)) :ldur (quote (144 144 144)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5028)) :ldur (quote (192)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6532 4772 5974)) :ldur (quote (192 192 192)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6406 5316)) :ldur (quote (577 577)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6660)) :ldur (quote (192)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5166 6670 5734 6444 4538)) :ldur (quote (165 165 165 165 165)) :lvel (quote (100 100 100 100 100)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5850 6406 5346)) :ldur (quote (165 165 165)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5650 6612)) :ldur (quote (165 165)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6098)) :ldur (quote (330)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6450)) :ldur (quote (144)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4536)) :ldur (quote (144)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5728)) :ldur (quote (433)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6462 5418)) :ldur (quote (288 288)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5406 6326 6572 4422)) :ldur (quote (144 144 144 144)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5808)) :ldur (quote (433)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4524 5650 6396)) :ldur (quote (288 288 288)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5246 6420 6134 4138)) :ldur (quote (144 144 144 144)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500 6396 5790)) :ldur (quote (577 577 577)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5170 6152)) :ldur (quote (192 192)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5930 4698 5720)) :ldur (quote (192 192 192)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6652 6350)) :ldur (quote (192 192)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5936 4790 6608)) :ldur (quote (144 144 144)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6190 6488)) :ldur (quote (433 433)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6706 5122)) :ldur (quote (144 144)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5676 6426 4618 5852)) :ldur (quote (144 144 144 144)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5192)) :ldur (quote (144)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6410)) :ldur (quote (144)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6536 5220)) :ldur (quote (144 144)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6324)) :ldur (quote (288)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6654)) :ldur (quote (288)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6632)) :ldur (quote (144)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6384 5236)) :ldur (quote (288 288)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5892)) :ldur (quote (144)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (144)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4748 5962)) :ldur (quote (144 144)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4598 5622)) :ldur (quote (577 577)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6354 5400 6592)) :ldur (quote (385 385 385)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5862 4634)) :ldur (quote (192 192)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4940 6140)) :ldur (quote (192 192)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6418 4706 5752)) :ldur (quote (192 192 192)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5774 4628 5546 6618)) :ldur (quote (192 192 192 192)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6440 6026)) :ldur (quote (330 330)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5810)) :ldur (quote (330)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6390)) :ldur (quote (165)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6476 5772)) :ldur (quote (330 330)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6154 5254)) :ldur (quote (144 144)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5054)) :ldur (quote (288)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4634 5782 6534 5964)) :ldur (quote (577 577 577 577)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5210)) :ldur (quote (144)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6486)) :ldur (quote (288)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5816 6468 4680 6150)) :ldur (quote (577 577 577 577)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6702)) :ldur (quote (288)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4516 6168 6424 5724)) :ldur (quote (144 144 144 144)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5834 6514 5478 4640)) :ldur (quote (288 288 288 288)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6236 6454 6016 5940 4722 5340)) :ldur (quote (288 288 288 288 288 288)) :lvel (quote (100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6686)) :ldur (quote (144)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6526 5822)) :ldur (quote (865 865)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4518 5734 6454)) :ldur (quote (288 288 288)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6396)) :ldur (quote (288)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4724 5924 6520)) :ldur (quote (577 577 577)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6324)) :ldur (quote (288)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6478)) :ldur (quote (165)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6096 4890 5448 4410)) :ldur (quote (330 330 330 330)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4562 5774 6670 6400)) :ldur (quote (495 495 495 495)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5292)) :ldur (quote (577)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5196 6400 6622 5736)) :ldur (quote (577 577 577 577)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5752)) :ldur (quote (1154)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 52) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.01 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 44) (om-make-point 1399 703) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 67 638) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4630 5700 6450) (5138) (4630 5800 6396) (6098 4916) (4646 6414 5828) (5906) (5784 4532) (5976) (4606) (4904 6162) (6256) (6410 6606 5632 4512) (5748) (6342 5706 4704 6552) (6640) (4506 6400 5758) (6614) (6122 4730 6528) (5762) (6458) (6148) (4800 6142 5748) (6290) (5796) (6468) (5060 6434) (4520 5728 6430) (6476 4978 5740) (6606) (4770) (6050) (4458) (5716) (4666) (6486) (6388) (5028) (6532 4772 5974) (6406) (5316) (6660) (5166 6670 5734 6444) (4538) (5850 6406 5346) (5650) (6450 5700 4630) (5138) (6396 5800 4630) (4916 6098) (5906 5828 6414 4646) (4532 5784) (4606 5976) (6256 6162 4904) (4512 5632 6606 6410) (5748) (6552 4704 5706 6342) (6640) (6614 5758 6400 4506) (6528 4730 6122) (6458 5762) (6148) (5748 6142 4800) (6290) (6468 5796) (6434 5060) (6430 5728 4520) (6606 5740 4978 6476) (6050 4770) (4458) (5716) (6388 6486 4666) (5028) (5974 4772 6532) (5316 6406) (6660) (4538 6444 5734 6670 5166) (5346 6406 5850) (6612 5650) (6098) (6450) (4536) (5728) (5418 6462) (4422 6572 6326 5406) (5808) (6396 5650 4524) (4138 6134 6420 5246) (5790 6396 4500) (6152 5170) (5720 4698 5930) (6350 6652) (6608 4790 5936) (6488 6190) (5122 6706) (5852 4618 6426 5676) (5192) (6410) (5220 6536) (6324) (6654) (6632) (5236 6384) (5892) (6524) (5962 4748) (5622 4598) (6592 5400 6354) (4634 5862) (6140 4940) (5752 4706 6418) (6618 5546 4628 5774) (6026 6440) (5810) (6390) (5772 6476) (5254 6154) (5054) (5964 6534 5782 4634) (5210) (6486) (6150 4680 6468 5816) (6702) (5724 6424 6168 4516) (4640 5478 6514 5834) (5340 4722 5940 6016 6454 6236) (6686) (5822 6526) (6454 5734 4518) (6396) (6520 5924 4724) (6324) (6478) (4410 5448 4890 6096) (6400 6670 5774 4562) (5292) (5736 6622 6400 5196) (5752) (5740 4536 6422 5270))) :lonset (quote (0 3125 6143 9250 13400 16286 19333 22286 24875 27400 29333 32286 35429 37833 40250 42250 44500 46571 48600 50571 52250 54250 55875 57667 58833 60333 61625 63250 64333 65000 65500 66875 67500 68200 69125 70375 71333 72667 74000 75286 76429 77167 78250 79833 81250 83250 83375 83750 84250 84500 85167 85333 85667 86000 86250 87500 88400 88600 89125 89500 89625 90125 90250 90500 91000 92125 92250 92625 92750 92875 93333 93500 93667 93833 94500 94875 95125 95250 95500 95750 95875 96000 96500 96750 97250 97625 98000 98125 98750 98875 99000 99200 99400 99800 100000 100125 100250 100375 100500 100875 101125 101250 101625 101875 102000 102143 102714 103000 103333 103500 103667 103833 104250 104500 104625 105000 105125 105375 106000 106167 106500 107125 107625 107750 108000 108375 108500 109429 109571 109857 110500 110875 111125 111500 112000 112500 113000 113125 113750)) :ldur (quote ((3125 3125 3125) (3018) (3107 3107 3107) (4150 4150) (2886 2886 2886) (3047) (2953 2953) (2589) (2525) (1933 1933) (2953) (3143 3143 3143 3143) (2405) (2417 2417 2417 2417) (2000) (2250 2250 2250) (2071) (2029 2029 2029) (1971) (1679) (2000) (1625 1625 1625) (1792) (1167) (1500) (1292 1292) (1625 1625 1625) (1083 1083 1083) (667) (500) (1375) (625) (700) (925) (1250) (958) (1334) (1333 1333 1333) (1286) (1143) (738) (1083 1083 1083 1083) (1584) (1417 1417 1417) (1000) (125 125 125) (375) (500 500 500) (250 250) (667 667 667 667) (167 167) (333 333) (333 333 333) (250 250 250 250) (1250) (900 900 900 900) (200) (525 525 525 525) (375 375 375) (125 125) (500) (125 125 125) (250) (500 500) (1125 1125) (125 125 125) (375 375 375 375) (125 125) (125) (458) (167 167 167) (167) (167 167 167) (667 667) (375) (250 250 250 250 250) (125 125 125) (250 250) (250) (125) (125) (500) (250 250) (500 500 500 500) (375) (375 375 375) (125 125 125 125) (625 625 625) (125 125) (125 125 125) (200 200) (200 200 200) (400 400) (200 200) (125 125 125 125) (125) (125) (125 125) (375) (250) (125) (375 375) (250) (125) (143 143) (571 571) (286 286 286) (333 333) (167 167) (167 167 167) (167 167 167 167) (417 417) (250) (125) (375 375) (125 125) (250) (625 625 625 625) (167) (333) (625 625 625 625) (500) (125 125 125 125) (250 250 250 250) (375 375 375 375 375 375) (125) (929 929) (143 143 143) (286) (643 643 643) (375) (250) (375 375 375 375) (500 500 500 500) (500) (500 500 500 500) (125) (625 625 625 625))) :lvel (quote ((100 100 100) (100) (100 100 100) (100 100) (100 100 100) (100) (100 100) (100) (100) (100 100) (100) (100 100 100 100) (100) (100 100 100 100) (100) (100 100 100) (100) (100 100 100) (100) (100) (100) (100 100 100) (100) (100) (100) (100 100) (100 100 100) (100 100 100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100 100 100) (100) (100) (100) (100 100 100 100) (100) (100 100 100) (100) (100 100 100) (100) (100 100 100) (100 100) (100 100 100 100) (100 100) (100 100) (100 100 100) (100 100 100 100) (100) (100 100 100 100) (100) (100 100 100 100) (100 100 100) (100 100) (100) (100 100 100) (100) (100 100) (100 100) (100 100 100) (100 100 100 100) (100 100) (100) (100) (100 100 100) (100) (100 100 100) (100 100) (100) (100 100 100 100 100) (100 100 100) (100 100) (100) (100) (100) (100) (100 100) (100 100 100 100) (100) (100 100 100) (100 100 100 100) (100 100 100) (100 100) (100 100 100) (100 100) (100 100 100) (100 100) (100 100) (100 100 100 100) (100) (100) (100 100) (100) (100) (100) (100 100) (100) (100) (100 100) (100 100) (100 100 100) (100 100) (100 100) (100 100 100) (100 100 100 100) (100 100) (100) (100) (100 100) (100 100) (100) (100 100 100 100) (100) (100) (100 100 100 100) (100) (100 100 100 100) (100 100 100 100) (100 100 100 100 100 100) (100) (100 100) (100 100 100) (100) (100 100 100) (100) (100) (100 100 100 100) (100 100 100 100) (100) (100 100 100 100) (100) (100 100 100 100))) :loffset (quote ((0 0 0) (0) (0 0 0) (0 0) (0 0 0) (0) (0 0) (0) (0) (0 0) (0) (0 0 0 0) (0) (0 0 0 0) (0) (0 0 0) (0) (0 0 0) (0) (0) (0) (0 0 0) (0) (0) (0) (0 0) (0 0 0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0 0 0 0) (0) (0 0 0) (0) (0 0 0) (0) (0 0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0) (0 0 0 0) (0) (0 0 0 0) (0) (0 0 0 0) (0 0 0) (0 0) (0) (0 0 0) (0) (0 0) (0 0) (0 0 0) (0 0 0 0) (0 0) (0) (0) (0 0 0) (0) (0 0 0) (0 0) (0) (0 0 0 0 0) (0 0 0) (0 0) (0) (0) (0) (0) (0 0) (0 0 0 0) (0) (0 0 0) (0 0 0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0 0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0 0 0) (0 0) (0) (0) (0 0) (0 0) (0) (0 0 0 0) (0) (0) (0 0 0 0) (0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0) (0) (0 0) (0 0 0) (0) (0 0 0) (0) (0) (0 0 0 0) (0 0 0 0) (0) (0 0 0 0) (0) (0 0 0 0))) :lchan (quote ((1 1 1) (1) (1 1 1) (1 1) (1 1 1) (1) (1 1) (1) (1) (1 1) (1) (1 1 1 1) (1) (1 1 1 1) (1) (1 1 1) (1) (1 1 1) (1) (1) (1) (1 1 1) (1) (1) (1) (1 1) (1 1 1) (1 1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1 1) (1) (1) (1) (1 1 1 1) (1) (1 1 1) (1) (1 1 1) (1) (1 1 1) (1 1) (1 1 1 1) (1 1) (1 1) (1 1 1) (1 1 1 1) (1) (1 1 1 1) (1) (1 1 1 1) (1 1 1) (1 1) (1) (1 1 1) (1) (1 1) (1 1) (1 1 1) (1 1 1 1) (1 1) (1) (1) (1 1 1) (1) (1 1 1) (1 1) (1) (1 1 1 1 1) (1 1 1) (1 1) (1) (1) (1) (1) (1 1) (1 1 1 1) (1) (1 1 1) (1 1 1 1) (1 1 1) (1 1) (1 1 1) (1 1) (1 1 1) (1 1) (1 1) (1 1 1 1) (1) (1) (1 1) (1) (1) (1) (1 1) (1) (1) (1 1) (1 1) (1 1 1) (1 1) (1 1) (1 1 1) (1 1 1 1) (1 1) (1) (1) (1 1) (1 1) (1) (1 1 1 1) (1) (1) (1 1 1 1) (1) (1 1 1 1) (1 1 1 1) (1 1 1 1 1 1) (1) (1 1) (1 1 1) (1) (1 1 1) (1) (1) (1 1 1 1) (1 1 1 1) (1) (1 1 1 1) (1) (1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0) (0) (0 0 0) (0 0) (0 0 0) (0) (0 0) (0) (0) (0 0) (0) (0 0 0 0) (0) (0 0 0 0) (0) (0 0 0) (0) (0 0 0) (0) (0) (0) (0 0 0) (0) (0) (0) (0 0) (0 0 0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0 0 0 0) (0) (0 0 0) (0) (0 0 0) (0) (0 0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0) (0 0 0 0) (0) (0 0 0 0) (0) (0 0 0 0) (0 0 0) (0 0) (0) (0 0 0) (0) (0 0) (0 0) (0 0 0) (0 0 0 0) (0 0) (0) (0) (0 0 0) (0) (0 0 0) (0 0) (0) (0 0 0 0 0) (0 0 0) (0 0) (0) (0) (0) (0) (0 0) (0 0 0 0) (0) (0 0 0) (0 0 0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0 0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0 0 0) (0 0) (0) (0) (0 0) (0 0) (0) (0 0 0 0) (0) (0) (0 0 0 0) (0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0) (0) (0 0) (0 0 0) (0) (0 0 0) (0) (0) (0 0 0 0) (0 0 0 0) (0) (0 0 0 0) (0) (0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 44) (om-make-point 1340 677) 0 1000 nil 1/5 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 8)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MULTI-SEQ" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 81 561) (om-make-point 100 70) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4630 5700 6450) (5138) (4630 5800 6396) (6098 4916) (4646 6414 5828) (5906) (5784 4532) (5976) (4606) (4904 6162) (6256) (6410 6606 5632 4512) (5748) (6342 5706 4704 6552) (6640) (4506 6400 5758) (6614) (6122 4730 6528) (5762) (6458) (6148) (4800 6142 5748) (6290) (5796) (6468) (5060 6434) (4520 5728 6430) (6476 4978 5740) (6606) (4770) (6050) (4458) (5716) (4666) (6486) (6388) (5028) (6532 4772 5974) (6406) (5316) (6660) (5166 6670 5734 6444) (4538) (5850 6406 5346) (5650) (6450 5700 4630) (5138) (6396 5800 4630) (4916 6098) (5906 5828 6414 4646) (4532 5784) (4606 5976) (6256 6162 4904) (4512 5632 6606 6410) (5748) (6552 4704 5706 6342) (6640) (6614 5758 6400 4506) (6528 4730 6122) (6458 5762) (6148) (5748 6142 4800) (6290) (6468 5796) (6434 5060) (6430 5728 4520) (6606 5740 4978 6476) (6050 4770) (4458) (5716) (6388 6486 4666) (5028) (5974 4772 6532) (5316 6406) (6660) (4538 6444 5734 6670 5166) (5346 6406 5850) (6612 5650) (6098) (6450) (4536) (5728) (5418 6462) (4422 6572 6326 5406) (5808) (6396 5650 4524) (4138 6134 6420 5246) (5790 6396 4500) (6152 5170) (5720 4698 5930) (6350 6652) (6608 4790 5936) (6488 6190) (5122 6706) (5852 4618 6426 5676) (5192) (6410) (5220 6536) (6324) (6654) (6632) (5236 6384) (5892) (6524) (5962 4748) (5622 4598) (6592 5400 6354) (4634 5862) (6140 4940) (5752 4706 6418) (6618 5546 4628 5774) (6026 6440) (5810) (6390) (5772 6476) (5254 6154) (5054) (5964 6534 5782 4634) (5210) (6486) (6150 4680 6468 5816) (6702) (5724 6424 6168 4516) (4640 5478 6514 5834) (5340 4722 5940 6016 6454 6236) (6686) (5822 6526) (6454 5734 4518) (6396) (6520 5924 4724) (6324) (6478) (4410 5448 4890 6096) (6400 6670 5774 4562) (5292) (5736 6622 6400 5196) (5752) (5740 4536 6422 5270))) :lonset (quote (0 3125 6143 9250 13400 16286 19333 22286 24875 27400 29333 32286 35429 37833 40250 42250 44500 46571 48600 50571 52250 54250 55875 57667 58833 60333 61625 63250 64333 65000 65500 66875 67500 68200 69125 70375 71333 72667 74000 75286 76429 77167 78250 79833 81250 83250 83375 83750 84250 84500 85167 85333 85667 86000 86250 87500 88400 88600 89125 89500 89625 90125 90250 90500 91000 92125 92250 92625 92750 92875 93333 93500 93667 93833 94500 94875 95125 95250 95500 95750 95875 96000 96500 96750 97250 97625 98000 98125 98750 98875 99000 99200 99400 99800 100000 100125 100250 100375 100500 100875 101125 101250 101625 101875 102000 102143 102714 103000 103333 103500 103667 103833 104250 104500 104625 105000 105125 105375 106000 106167 106500 107125 107625 107750 108000 108375 108500 109429 109571 109857 110500 110875 111125 111500 112000 112500 113000 113125 113750)) :ldur (quote ((3125 3125 3125) (3018) (3107 3107 3107) (4150 4150) (2886 2886 2886) (3047) (2953 2953) (2589) (2525) (1933 1933) (2953) (3143 3143 3143 3143) (2405) (2417 2417 2417 2417) (2000) (2250 2250 2250) (2071) (2029 2029 2029) (1971) (1679) (2000) (1625 1625 1625) (1792) (1167) (1500) (1292 1292) (1625 1625 1625) (1083 1083 1083) (667) (500) (1375) (625) (700) (925) (1250) (958) (1334) (1333 1333 1333) (1286) (1143) (738) (1083 1083 1083 1083) (1584) (1417 1417 1417) (1000) (125 125 125) (375) (500 500 500) (250 250) (667 667 667 667) (167 167) (333 333) (333 333 333) (250 250 250 250) (1250) (900 900 900 900) (200) (525 525 525 525) (375 375 375) (125 125) (500) (125 125 125) (250) (500 500) (1125 1125) (125 125 125) (375 375 375 375) (125 125) (125) (458) (167 167 167) (167) (167 167 167) (667 667) (375) (250 250 250 250 250) (125 125 125) (250 250) (250) (125) (125) (500) (250 250) (500 500 500 500) (375) (375 375 375) (125 125 125 125) (625 625 625) (125 125) (125 125 125) (200 200) (200 200 200) (400 400) (200 200) (125 125 125 125) (125) (125) (125 125) (375) (250) (125) (375 375) (250) (125) (143 143) (571 571) (286 286 286) (333 333) (167 167) (167 167 167) (167 167 167 167) (417 417) (250) (125) (375 375) (125 125) (250) (625 625 625 625) (167) (333) (625 625 625 625) (500) (125 125 125 125) (250 250 250 250) (375 375 375 375 375 375) (125) (929 929) (143 143 143) (286) (643 643 643) (375) (250) (375 375 375 375) (500 500 500 500) (500) (500 500 500 500) (125) (625 625 625 625))) :lvel (quote ((100 100 100) (100) (100 100 100) (100 100) (100 100 100) (100) (100 100) (100) (100) (100 100) (100) (100 100 100 100) (100) (100 100 100 100) (100) (100 100 100) (100) (100 100 100) (100) (100) (100) (100 100 100) (100) (100) (100) (100 100) (100 100 100) (100 100 100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100 100 100) (100) (100) (100) (100 100 100 100) (100) (100 100 100) (100) (100 100 100) (100) (100 100 100) (100 100) (100 100 100 100) (100 100) (100 100) (100 100 100) (100 100 100 100) (100) (100 100 100 100) (100) (100 100 100 100) (100 100 100) (100 100) (100) (100 100 100) (100) (100 100) (100 100) (100 100 100) (100 100 100 100) (100 100) (100) (100) (100 100 100) (100) (100 100 100) (100 100) (100) (100 100 100 100 100) (100 100 100) (100 100) (100) (100) (100) (100) (100 100) (100 100 100 100) (100) (100 100 100) (100 100 100 100) (100 100 100) (100 100) (100 100 100) (100 100) (100 100 100) (100 100) (100 100) (100 100 100 100) (100) (100) (100 100) (100) (100) (100) (100 100) (100) (100) (100 100) (100 100) (100 100 100) (100 100) (100 100) (100 100 100) (100 100 100 100) (100 100) (100) (100) (100 100) (100 100) (100) (100 100 100 100) (100) (100) (100 100 100 100) (100) (100 100 100 100) (100 100 100 100) (100 100 100 100 100 100) (100) (100 100) (100 100 100) (100) (100 100 100) (100) (100) (100 100 100 100) (100 100 100 100) (100) (100 100 100 100) (100) (100 100 100 100))) :loffset (quote ((0 0 0) (0) (0 0 0) (0 0) (0 0 0) (0) (0 0) (0) (0) (0 0) (0) (0 0 0 0) (0) (0 0 0 0) (0) (0 0 0) (0) (0 0 0) (0) (0) (0) (0 0 0) (0) (0) (0) (0 0) (0 0 0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0 0 0 0) (0) (0 0 0) (0) (0 0 0) (0) (0 0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0) (0 0 0 0) (0) (0 0 0 0) (0) (0 0 0 0) (0 0 0) (0 0) (0) (0 0 0) (0) (0 0) (0 0) (0 0 0) (0 0 0 0) (0 0) (0) (0) (0 0 0) (0) (0 0 0) (0 0) (0) (0 0 0 0 0) (0 0 0) (0 0) (0) (0) (0) (0) (0 0) (0 0 0 0) (0) (0 0 0) (0 0 0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0 0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0 0 0) (0 0) (0) (0) (0 0) (0 0) (0) (0 0 0 0) (0) (0) (0 0 0 0) (0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0) (0) (0 0) (0 0 0) (0) (0 0 0) (0) (0) (0 0 0 0) (0 0 0 0) (0) (0 0 0 0) (0) (0 0 0 0))) :lchan (quote ((1 1 1) (1) (1 1 1) (1 1) (1 1 1) (1) (1 1) (1) (1) (1 1) (1) (1 1 1 1) (1) (1 1 1 1) (1) (1 1 1) (1) (1 1 1) (1) (1) (1) (1 1 1) (1) (1) (1) (1 1) (1 1 1) (1 1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1 1) (1) (1) (1) (1 1 1 1) (1) (1 1 1) (1) (1 1 1) (1) (1 1 1) (1 1) (1 1 1 1) (1 1) (1 1) (1 1 1) (1 1 1 1) (1) (1 1 1 1) (1) (1 1 1 1) (1 1 1) (1 1) (1) (1 1 1) (1) (1 1) (1 1) (1 1 1) (1 1 1 1) (1 1) (1) (1) (1 1 1) (1) (1 1 1) (1 1) (1) (1 1 1 1 1) (1 1 1) (1 1) (1) (1) (1) (1) (1 1) (1 1 1 1) (1) (1 1 1) (1 1 1 1) (1 1 1) (1 1) (1 1 1) (1 1) (1 1 1) (1 1) (1 1) (1 1 1 1) (1) (1) (1 1) (1) (1) (1) (1 1) (1) (1) (1 1) (1 1) (1 1 1) (1 1) (1 1) (1 1 1) (1 1 1 1) (1 1) (1) (1) (1 1) (1 1) (1) (1 1 1 1) (1) (1) (1 1 1 1) (1) (1 1 1 1) (1 1 1 1) (1 1 1 1 1 1) (1) (1 1) (1 1 1) (1) (1 1 1) (1) (1) (1 1 1 1) (1 1 1 1) (1) (1 1 1 1) (1) (1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0) (0) (0 0 0) (0 0) (0 0 0) (0) (0 0) (0) (0) (0 0) (0) (0 0 0 0) (0) (0 0 0 0) (0) (0 0 0) (0) (0 0 0) (0) (0) (0) (0 0 0) (0) (0) (0) (0 0) (0 0 0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0 0 0 0) (0) (0 0 0) (0) (0 0 0) (0) (0 0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0) (0 0 0 0) (0) (0 0 0 0) (0) (0 0 0 0) (0 0 0) (0 0) (0) (0 0 0) (0) (0 0) (0 0) (0 0 0) (0 0 0 0) (0 0) (0) (0) (0 0 0) (0) (0 0 0) (0 0) (0) (0 0 0 0 0) (0 0 0) (0 0) (0) (0) (0) (0) (0 0) (0 0 0 0) (0) (0 0 0) (0 0 0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0 0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0 0 0) (0 0) (0) (0) (0 0) (0 0) (0) (0 0 0 0) (0) (0) (0 0 0 0) (0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0) (0) (0 0) (0 0 0) (0) (0 0 0) (0) (0) (0 0 0 0) (0 0 0 0) (0) (0 0 0 0) (0) (0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (((0 0 0) (0) (0 0 0) (0 0) (0 0 0) (0) (0 0) (0) (0) (0 0) (0) (0 0 0 0) (0) (0 0 0 0) (0) (0 0 0) (0) (0 0 0) (0) (0) (0) (0 0 0) (0) (0) (0) (0 0) (0 0 0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0 0 0 0) (0) (0 0 0) (0) (0 0 0) (0) (0 0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0) (0 0 0 0) (0) (0 0 0 0) (0) (0 0 0 0) (0 0 0) (0 0) (0) (0 0 0) (0) (0 0) (0 0) (0 0 0) (0 0 0 0) (0 0) (0) (0) (0 0 0) (0) (0 0 0) (0 0) (0) (0 0 0 0 0) (0 0 0) (0 0) (0) (0) (0) (0) (0 0) (0 0 0 0) (0) (0 0 0) (0 0 0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0 0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0 0 0) (0 0) (0) (0) (0 0) (0 0) (0) (0 0 0 0) (0) (0) (0 0 0 0) (0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0) (0) (0 0) (0 0 0) (0) (0 0 0) (0) (0) (0 0 0 0) (0 0 0 0) (0) (0 0 0 0) (0) (0 0 0 0))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 8)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAQUETTE2OBJ" (quote maquette2obj) (quote ((om-load-inputfun (quote input-funbox) "maquette" "SELF" (quote t)) (om-load-inputfunmenu1 (quote input-funmenu) "mode" "MODE" (quote poly) (list (list "poly" (quote (quote poly))) (list "multi-seq" (quote (quote multi-seq))) (list "sound" (quote (quote sound))))))) (om-make-point 59 472) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote maqabs) "mymaquette" (om-load-maq-abs1 "mymaquette" (quote ((let ((box (om-load-tempobj1 "VOICE 2" (quote nil) (list (quote yourobj) (let ((ominst (make-instance (quote ominstance) :name "VOICE 2" :icon 223))) (setf (instance ominst) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (18 (((4 4) (2 (1 (4.0 1.0 2)) 1.0)) ((4 4) (1.0 (1 (2.0 4)) 2.0)) ((4 4) (3 (1 (4.0 1.0 3)))) ((4 4) (2.0 (1 (1.0 7)) 1.0)) ((4 4) ((1 (3.0 1)) 2.0 (1 (2.0 4)))) ((4 4) (1.0 (1 (4.0 3)) 1.0 (1 (3.0 1)))) ((4 4) (1.0 (1 (3.0 4)) 2.0)) ((4 4) (2 (1 (4.0 1.0 2)) 1.0)) ((4 4) ((1 (4.0 1)) 1.0 (1 (7.0 1)) 1.0)) ((4 4) ((1 (3.0 2)) 1.0 (1 (4.0 3)) 1.0)) ((4 4) ((1 (2.0 4)) 1.0 (1 (1.0 7)) (1 (4.0 1)))) ((4 4) (1.0 (1 (2.0 4 1.0)) 1.0 1)) ((4 4) ((1 (3.0 4)) 1.0 1 1)) ((4 4) ((1 (2.0 4 1.0)) (1 (3.0 4)) (1 (4.0 1)) (1 (3.0 1)))) ((4 4) ((1 (3.0 4 1)) 1.0 (1 (1 1)) (1 (1.0 6 1)))) ((4 4) (1.0 (1 (4 1.0 1)) 1.0 1)) ((4 4) ((1 (1.0 6)) (1 (1.0 3)) (1 (2.0 4 1.0 1)) (1 (4.0 1.0 1)))) ((4 4) (1.0 (1 (1.0 4)) (1 (3.0 4)) (1 (2.0 -4 -1.0))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4630 5700 6450)) :ldur (quote (2308 2308 2308)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5138)) :ldur (quote (330)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4630 5800 6396)) :ldur (quote (769 769 769)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6098 4916)) :ldur (quote (3462 3462)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4646 6414 5828)) :ldur (quote (433 433 433)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5906)) :ldur (quote (1010)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5784 4532)) :ldur (quote (288 288)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5976)) :ldur (quote (769)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4606)) :ldur (quote (495)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4904 6162)) :ldur (quote (288 288)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6256)) :ldur (quote (659)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6410 6606 5632 4512)) :ldur (quote (2308 2308 2308 2308)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5748)) :ldur (quote (330)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6342 5706 4704 6552)) :ldur (quote (231 231 231 231)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6640)) :ldur (quote (144)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4506 6400 5758)) :ldur (quote (462 462 462)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6614)) :ldur (quote (495)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6122 4730 6528)) :ldur (quote (769 769 769)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5762)) :ldur (quote (1010)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6458)) :ldur (quote (231)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6148)) :ldur (quote (659)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800 6142 5748)) :ldur (quote (1154 1154 1154)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6290)) :ldur (quote (659)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5796)) :ldur (quote (1154)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6468)) :ldur (quote (1154)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5060 6434)) :ldur (quote (659 659)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4520 5728 6430)) :ldur (quote (659 659 659)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6476 4978 5740)) :ldur (quote (231 231 231)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6606)) :ldur (quote (288)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4770)) :ldur (quote (577)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6050)) :ldur (quote (144)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4458)) :ldur (quote (577)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5716)) :ldur (quote (577)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4666)) :ldur (quote (865)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6486)) :ldur (quote (144)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6388)) :ldur (quote (769)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5028)) :ldur (quote (192)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6532 4772 5974)) :ldur (quote (1154 1154 1154)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6406)) :ldur (quote (989)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5316)) :ldur (quote (865)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6660)) :ldur (quote (577)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5166 6670 5734 6444)) :ldur (quote (144 144 144 144)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4538)) :ldur (quote (192)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5850 6406 5346)) :ldur (quote (923 923 923)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5650)) :ldur (quote (659)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 52) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.01 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (setf (doc ominst) (str-with-nl "")) (setf (edition-params ominst) (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 8))) (setf (create-info ominst) (quote ("2023/11/01 14:33:07" "2023/11/02 11:28:07"))) ominst)) 1 0 83078 (om-make-color 0.5 0.6 0.5) nil t 20 51 1 0 (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 44) (om-make-point 1097 680) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 8)) nil nil t nil nil nil "no documentation"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-tempobj1 "VOICE" (quote nil) (list (quote yourobj) (let ((ominst (make-instance (quote ominstance) :name "VOICE" :icon 223))) (setf (instance ominst) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (43/4 (((4 4) ((1 (-3 1 3)) (1 (1.0 4 1.0 1)) (1 (1.0 4 1.0)) (1 (2 3 3)))) ((4 4) ((1 (1.0 1 3)) 1.0 (1 (1.0 7)) (1 (2.0 2 3)))) ((4 4) ((1 (2.0 4 1 1)) (1 (4.0 1.0 1 2)) (1 (1.0 6 1)) 1.0)) ((4 4) ((1 (2.0 2 3 1)) (1 (1 1 3 1)) (1 (1.0 2 2 3)) (1 (3.0 4 1.0)))) ((4 4) ((1 (2 1 2 1)) (1 (1.0 1 1 3)) (1 (2.0 1 4 1.0)) (1 (1.0 4 3)))) ((4 4) ((1 (1.0 1 6)) (1 (1.0 1 1 2 1)) (1 (4 1.0 1 2)) (1 (1 1 1 4 1)))) ((4 4) ((1 (2 1 3)) (1 (2 1 1 2)) (1 (4.0 3 1)) (1 (2.0 2 2 1 1)))) ((4 4) ((1 (3.0 2 1)) (1 (3 1 2)) (1 (3 1)) (1 (1 1)))) ((4 4) ((1 (2.0 4 1.0)) (1 (1 2 4)) (1 (1 6)) (1 (3.0 1 3 1)))) ((4 4) ((1 (3.0 1)) (1 (2.0 2 3)) (1 (1.0 6 1)) (1 (1.0 1)))) ((3 4) ((1 (2 4 1.0)) (1 (1.0 -4 -1.0)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6450 5700 4630)) :ldur (quote (107 107 107)) :lvel (quote (54 55 75)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5138)) :ldur (quote (321)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6396 5800 4630)) :ldur (quote (429 429 429)) :lvel (quote (56 64 91)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4916 6098)) :ldur (quote (107 107)) :lvel (quote (101 79)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5906 5828 6414 4646)) :ldur (quote (500 500 500 500)) :lvel (quote (52 73 59 112)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4532 5784)) :ldur (quote (188 188)) :lvel (quote (70 60)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4606 5976)) :ldur (quote (281 281)) :lvel (quote (89 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6256 6162 4904)) :ldur (quote (281 281 281)) :lvel (quote (52 66 85)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4512 5632 6606 6410)) :ldur (quote (150 150 150 150)) :lvel (quote (99 59 51 58)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5748)) :ldur (quote (450)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6552 4704 5706 6342)) :ldur (quote (656 656 656 656)) :lvel (quote (56 97 65 64)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6640)) :ldur (quote (214)) :lvel (quote (75)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6614 5758 6400 4506)) :ldur (quote (321 321 321 321)) :lvel (quote (51 66 63 104)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6528 4730 6122)) :ldur (quote (375 375 375)) :lvel (quote (50 116 86)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6458 5762)) :ldur (quote (94 94)) :lvel (quote (70 77)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6148)) :ldur (quote (94)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5748 6142 4800)) :ldur (quote (94 94 94)) :lvel (quote (52 78 111)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6290)) :ldur (quote (188)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6468 5796)) :ldur (quote (562 562)) :lvel (quote (66 73)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6434 5060)) :ldur (quote (94 94)) :lvel (quote (63 68)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6430 5728 4520)) :ldur (quote (188 188 188)) :lvel (quote (73 79 117)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6606 5740 4978 6476)) :ldur (quote (281 281 281 281)) :lvel (quote (51 66 101 69)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6050 4770)) :ldur (quote (94 94)) :lvel (quote (61 53)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4458)) :ldur (quote (125)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5716)) :ldur (quote (125)) :lvel (quote (54)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6388 6486 4666)) :ldur (quote (375 375 375)) :lvel (quote (51 57 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5028)) :ldur (quote (125)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5974 4772 6532)) :ldur (quote (188 188 188)) :lvel (quote (77 108 51)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5316 6406)) :ldur (quote (188 188)) :lvel (quote (51 59)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6660)) :ldur (quote (281)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4538 6444 5734 6670 5166)) :ldur (quote (375 375 375 375 375)) :lvel (quote (93 62 65 51 52)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5346 6406 5850)) :ldur (quote (250 250 250)) :lvel (quote (99 78 51)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6612 5650)) :ldur (quote (125 125)) :lvel (quote (55 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6098)) :ldur (quote (250)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6450)) :ldur (quote (125)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4536)) :ldur (quote (125)) :lvel (quote (95)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5728)) :ldur (quote (125)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5418 6462)) :ldur (quote (375 375)) :lvel (quote (53 66)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4422 6572 6326 5406)) :ldur (quote (94 94 94 94)) :lvel (quote (51 78 52 95)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5808)) :ldur (quote (375)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6396 5650 4524)) :ldur (quote (375 375 375)) :lvel (quote (59 63 82)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4138 6134 6420 5246)) :ldur (quote (281 281 281 281)) :lvel (quote (52 51 73 98)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5790 6396 4500)) :ldur (quote (94 94 94)) :lvel (quote (67 82 88)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6152 5170)) :ldur (quote (562 562)) :lvel (quote (52 68)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5720 4698 5930)) :ldur (quote (125 125 125)) :lvel (quote (51 85 68)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6350 6652)) :ldur (quote (125 125)) :lvel (quote (59 62)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6608 4790 5936)) :ldur (quote (250 250 250)) :lvel (quote (51 91 66)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6488 6190)) :ldur (quote (125 125)) :lvel (quote (64 52)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5122 6706)) :ldur (quote (375 375)) :lvel (quote (51 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5852 4618 6426 5676)) :ldur (quote (94 94 94 94)) :lvel (quote (64 96 61 62)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5192)) :ldur (quote (188)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6410)) :ldur (quote (94)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5220 6536)) :ldur (quote (94 94)) :lvel (quote (53 64)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6324)) :ldur (quote (94)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6654)) :ldur (quote (375)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6632)) :ldur (quote (94)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5236 6384)) :ldur (quote (250 250)) :lvel (quote (52 60)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5892)) :ldur (quote (125)) :lvel (quote (76)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (375)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5962 4748)) :ldur (quote (250 250)) :lvel (quote (65 89)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5622 4598)) :ldur (quote (125 125)) :lvel (quote (59 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6592 5400 6354)) :ldur (quote (125 125 125)) :lvel (quote (67 51 54)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4634 5862)) :ldur (quote (250 250)) :lvel (quote (114 93)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6140 4940)) :ldur (quote (281 281)) :lvel (quote (68 106)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5752 4706 6418)) :ldur (quote (94 94 94)) :lvel (quote (64 73 63)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6618 5546 4628 5774)) :ldur (quote (188 188 188 188)) :lvel (quote (55 52 103 66)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6026 6440)) :ldur (quote (188 188)) :lvel (quote (51 69)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5810)) :ldur (quote (94)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6390)) :ldur (quote (94)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5772 6476)) :ldur (quote (250 250)) :lvel (quote (68 62)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5254 6154)) :ldur (quote (125 125)) :lvel (quote (51 59)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5054)) :ldur (quote (375)) :lvel (quote (54)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5964 6534 5782 4634)) :ldur (quote (125 125 125 125)) :lvel (quote (67 58 60 108)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5210)) :ldur (quote (250)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6486)) :ldur (quote (562)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6150 4680 6468 5816)) :ldur (quote (188 188 188 188)) :lvel (quote (56 102 66 69)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6702)) :ldur (quote (375)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5724 6424 6168 4516)) :ldur (quote (375 375 375 375)) :lvel (quote (76 72 52 116)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4640 5478 6514 5834)) :ldur (quote (429 429 429 429)) :lvel (quote (122 51 64 70)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5340 4722 5940 6016 6454 6236)) :ldur (quote (107 107 107 107 107 107)) :lvel (quote (51 121 84 52 73 51)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6686)) :ldur (quote (214)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5822 6526)) :ldur (quote (429 429)) :lvel (quote (51 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6454 5734 4518)) :ldur (quote (107 107 107)) :lvel (quote (54 63 99)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6396)) :ldur (quote (643)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6520 5924 4724)) :ldur (quote (94 94 94)) :lvel (quote (52 85 113)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6324)) :ldur (quote (281)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6478)) :ldur (quote (94)) :lvel (quote (83)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4410 5448 4890 6096)) :ldur (quote (188 188 188 188)) :lvel (quote (51 51 111 78)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 6670 5774 4562)) :ldur (quote (214 214 214 214)) :lvel (quote (63 60 73 102)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5292)) :ldur (quote (321)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5736 6622 6400 5196)) :ldur (quote (562 562 562 562)) :lvel (quote (51 51 96 121)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5752)) :ldur (quote (94)) :lvel (quote (127)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5740 4536 6422 5270)) :ldur (quote (375 375 375 375)) :lvel (quote (76 121 76 51)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5298)) :ldur (quote (214)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5386 6596)) :ldur (quote (429 429)) :lvel (quote (122 72)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 80) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.01 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (setf (doc ominst) (str-with-nl "")) (setf (edition-params ominst) (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 8))) (setf (create-info ominst) (quote ("2023/11/01 14:33:07" "2023/11/02 11:28:07"))) ominst)) 1 82914 32250 (om-make-color 0.5 0.6 0.5) nil t 20 51 1 0 (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 44) (om-make-point 894 448) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 4)) nil nil t nil nil nil "no documentation"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote nil) (quote (0 126658 0 100)) (quote nil) (om-make-color 0.85 0.85 0.83) (quote ((4 60) ((4 4)) 16 t)) t 7.01 nil "" "off" (quote (1)) (quote (1)) nil (om-make-point 0 44) (om-make-point 1800 1035)) (quote ((om-load-inputfun (quote input-funbox) "time rate (number) or offset list" "time" 1000) (om-load-inputfun (quote input-funbox) "objects to put in maquette" "objs" nil))) (om-make-point 77 377) nil (list (if (find-class (quote maquette-obj) nil) (let ((newobj (make-instance (quote maquette-obj) :from-file t))) (load-port-info newobj (quote (nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote (((0) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.01 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((1) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.01 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE 2" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 292 352) (om-make-point 130 70) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (18 (((4 4) (2 (1 (4.0 1.0 2)) 1.0)) ((4 4) (1.0 (1 (2.0 4)) 2.0)) ((4 4) (3 (1 (4.0 1.0 3)))) ((4 4) (2.0 (1 (1.0 7)) 1.0)) ((4 4) ((1 (3.0 1)) 2.0 (1 (2.0 4)))) ((4 4) (1.0 (1 (4.0 3)) 1.0 (1 (3.0 1)))) ((4 4) (1.0 (1 (3.0 4)) 2.0)) ((4 4) (2 (1 (4.0 1.0 2)) 1.0)) ((4 4) ((1 (4.0 1)) 1.0 (1 (7.0 1)) 1.0)) ((4 4) ((1 (3.0 2)) 1.0 (1 (4.0 3)) 1.0)) ((4 4) ((1 (2.0 4)) 1.0 (1 (1.0 7)) (1 (4.0 1)))) ((4 4) (1.0 (1 (2.0 4 1.0)) 1.0 1)) ((4 4) ((1 (3.0 4)) 1.0 1 1)) ((4 4) ((1 (2.0 4 1.0)) (1 (3.0 4)) (1 (4.0 1)) (1 (3.0 1)))) ((4 4) ((1 (3.0 4 1)) 1.0 (1 (1 1)) (1 (1.0 6 1)))) ((4 4) (1.0 (1 (4 1.0 1)) 1.0 1)) ((4 4) ((1 (1.0 6)) (1 (1.0 3)) (1 (2.0 4 1.0 1)) (1 (4.0 1.0 1)))) ((4 4) (1.0 (1 (1.0 4)) (1 (3.0 4)) (1 (2.0 -4 -1.0))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4630 5700 6450)) :ldur (quote (2308 2308 2308)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5138)) :ldur (quote (330)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4630 5800 6396)) :ldur (quote (769 769 769)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6098 4916)) :ldur (quote (3462 3462)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4646 6414 5828)) :ldur (quote (433 433 433)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5906)) :ldur (quote (1010)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5784 4532)) :ldur (quote (288 288)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5976)) :ldur (quote (769)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4606)) :ldur (quote (495)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4904 6162)) :ldur (quote (288 288)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6256)) :ldur (quote (659)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6410 6606 5632 4512)) :ldur (quote (2308 2308 2308 2308)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5748)) :ldur (quote (330)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6342 5706 4704 6552)) :ldur (quote (231 231 231 231)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6640)) :ldur (quote (144)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4506 6400 5758)) :ldur (quote (462 462 462)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6614)) :ldur (quote (495)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6122 4730 6528)) :ldur (quote (769 769 769)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5762)) :ldur (quote (1010)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6458)) :ldur (quote (231)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6148)) :ldur (quote (659)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800 6142 5748)) :ldur (quote (1154 1154 1154)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6290)) :ldur (quote (659)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5796)) :ldur (quote (1154)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6468)) :ldur (quote (1154)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5060 6434)) :ldur (quote (659 659)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4520 5728 6430)) :ldur (quote (659 659 659)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6476 4978 5740)) :ldur (quote (231 231 231)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6606)) :ldur (quote (288)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4770)) :ldur (quote (577)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6050)) :ldur (quote (144)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4458)) :ldur (quote (577)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5716)) :ldur (quote (577)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4666)) :ldur (quote (865)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6486)) :ldur (quote (144)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6388)) :ldur (quote (769)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5028)) :ldur (quote (192)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6532 4772 5974)) :ldur (quote (1154 1154 1154)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6406)) :ldur (quote (989)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5316)) :ldur (quote (865)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6660)) :ldur (quote (577)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5166 6670 5734 6444)) :ldur (quote (144 144 144 144)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4538)) :ldur (quote (192)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5850 6406 5346)) :ldur (quote (923 923 923)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5650)) :ldur (quote (659)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 52) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.01 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 44) (om-make-point 1097 680) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 8)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "dragged" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 255 176) (om-make-point 586 121) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6450 5700 4630) (5138) (6396 5800 4630) (4916 6098) (5828 6414 4646) (5906) (4532 5784) (5976) (4606) (6162 4904) (6256) (4512 5632 6606 6410) (5748) (6552 4704 5706 6342) (6640) (5758 6400 4506) (6614) (6528 4730 6122) (5762) (6458) (6148) (5748 6142 4800) (6290) (5796) (6468) (6434 5060) (6430 5728 4520) (5740 4978 6476) (6606) (4770) (6050) (4458) (5716) (4666) (6486) (6388) (5028) (5974 4772 6532) (6406) (5316) (6660) (6444 5734 6670 5166) (4538) (5346 6406 5850) (5650))) :lonset (quote (0 3123 6159 9282 13437 16304 19308 22312 24857 27402 29345 32251 35419 37832 40278 42226 44469 46530 48543 50556 52270 54275 55893 57686 58792 60348 61647 63229 64352 65006 65615 66957 67476 68200 69114 70373 71353 72662 74011 75260 76404 77176 78261 79833 81251 81775)) :ldur (quote ((3123 3036 3123) (2930) (2867 3004 3004) (2545 2545) (3168 2906 3168) (2413) (2446 2683) (2243) (2061) (2013 2013) (1714) (2005 1618 1793 2005) (1556) (1299 2611 2049 1837) (1072) (2268 2268 2268) (914) (1259 2009 1309) (1349) (1249) (1144) (772 1085 1572) (1418) (2030) (2172) (517 517) (500 500 500) (1114 1227 1452) (507) (722) (1302) (726) (585) (1746) (793) (1251) (534) (1198 1198 723) (881) (793) (450) (551 551 376 364) (666) (1929 1942 705) (386))) :lvel (quote ((100 100 100) (100) (100 100 100) (100 100) (100 100 100) (100) (100 100) (100) (100) (100 100) (100) (100 100 100 100) (100) (100 100 100 100) (100) (100 100 100) (100) (100 100 100) (100) (100) (100) (100 100 100) (100) (100) (100) (100 100) (100 100 100) (100 100 100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100 100 100) (100) (100) (100) (100 100 100 100) (100) (100 100 100) (100))) :loffset (quote ((0 0 0) (0) (0 0 0) (0 0) (0 0 0) (0) (0 0) (0) (0) (0 0) (0) (0 0 0 0) (0) (0 0 0 0) (0) (0 0 0) (0) (0 0 0) (0) (0) (0) (0 0 0) (0) (0) (0) (0 0) (0 0 0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0 0 0 0) (0) (0 0 0) (0))) :lchan (quote ((1 1 1) (1) (1 1 1) (1 1) (1 1 1) (1) (1 1) (1) (1) (1 1) (1) (1 1 1 1) (1) (1 1 1 1) (1) (1 1 1) (1) (1 1 1) (1) (1) (1) (1 1 1) (1) (1) (1) (1 1) (1 1 1) (1 1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1 1) (1) (1) (1) (1 1 1 1) (1) (1 1 1) (1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0) (0) (0 0 0) (0 0) (0 0 0) (0) (0 0) (0) (0) (0 0) (0) (0 0 0 0) (0) (0 0 0 0) (0) (0 0 0) (0) (0 0 0) (0) (0) (0) (0 0 0) (0) (0) (0) (0 0) (0 0 0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0 0 0 0) (0) (0 0 0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.01 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 44) (om-make-point 1230 497) 0 1000 nil 17/100 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 8)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 80) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 547 350) (om-make-point 130 70) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (43/4 (((4 4) ((1 (-3 1 3)) (1 (1.0 4 1.0 1)) (1 (1.0 4 1.0)) (1 (2 3 3)))) ((4 4) ((1 (1.0 1 3)) 1.0 (1 (1.0 7)) (1 (2.0 2 3)))) ((4 4) ((1 (2.0 4 1 1)) (1 (4.0 1.0 1 2)) (1 (1.0 6 1)) 1.0)) ((4 4) ((1 (2.0 2 3 1)) (1 (1 1 3 1)) (1 (1.0 2 2 3)) (1 (3.0 4 1.0)))) ((4 4) ((1 (2 1 2 1)) (1 (1.0 1 1 3)) (1 (2.0 1 4 1.0)) (1 (1.0 4 3)))) ((4 4) ((1 (1.0 1 6)) (1 (1.0 1 1 2 1)) (1 (4 1.0 1 2)) (1 (1 1 1 4 1)))) ((4 4) ((1 (2 1 3)) (1 (2 1 1 2)) (1 (4.0 3 1)) (1 (2.0 2 2 1 1)))) ((4 4) ((1 (3.0 2 1)) (1 (3 1 2)) (1 (3 1)) (1 (1 1)))) ((4 4) ((1 (2.0 4 1.0)) (1 (1 2 4)) (1 (1 6)) (1 (3.0 1 3 1)))) ((4 4) ((1 (3.0 1)) (1 (2.0 2 3)) (1 (1.0 6 1)) (1 (1.0 1)))) ((3 4) ((1 (2 4 1.0)) (1 (1.0 -4 -1.0)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6450 5700 4630)) :ldur (quote (107 107 107)) :lvel (quote (54 55 75)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5138)) :ldur (quote (321)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6396 5800 4630)) :ldur (quote (429 429 429)) :lvel (quote (56 64 91)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4916 6098)) :ldur (quote (107 107)) :lvel (quote (101 79)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5906 5828 6414 4646)) :ldur (quote (500 500 500 500)) :lvel (quote (52 73 59 112)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4532 5784)) :ldur (quote (188 188)) :lvel (quote (70 60)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4606 5976)) :ldur (quote (281 281)) :lvel (quote (89 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6256 6162 4904)) :ldur (quote (281 281 281)) :lvel (quote (52 66 85)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4512 5632 6606 6410)) :ldur (quote (150 150 150 150)) :lvel (quote (99 59 51 58)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5748)) :ldur (quote (450)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6552 4704 5706 6342)) :ldur (quote (656 656 656 656)) :lvel (quote (56 97 65 64)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6640)) :ldur (quote (214)) :lvel (quote (75)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6614 5758 6400 4506)) :ldur (quote (321 321 321 321)) :lvel (quote (51 66 63 104)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6528 4730 6122)) :ldur (quote (375 375 375)) :lvel (quote (50 116 86)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6458 5762)) :ldur (quote (94 94)) :lvel (quote (70 77)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6148)) :ldur (quote (94)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5748 6142 4800)) :ldur (quote (94 94 94)) :lvel (quote (52 78 111)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6290)) :ldur (quote (188)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6468 5796)) :ldur (quote (562 562)) :lvel (quote (66 73)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6434 5060)) :ldur (quote (94 94)) :lvel (quote (63 68)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6430 5728 4520)) :ldur (quote (188 188 188)) :lvel (quote (73 79 117)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6606 5740 4978 6476)) :ldur (quote (281 281 281 281)) :lvel (quote (51 66 101 69)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6050 4770)) :ldur (quote (94 94)) :lvel (quote (61 53)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4458)) :ldur (quote (125)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5716)) :ldur (quote (125)) :lvel (quote (54)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6388 6486 4666)) :ldur (quote (375 375 375)) :lvel (quote (51 57 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5028)) :ldur (quote (125)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5974 4772 6532)) :ldur (quote (188 188 188)) :lvel (quote (77 108 51)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5316 6406)) :ldur (quote (188 188)) :lvel (quote (51 59)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6660)) :ldur (quote (281)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4538 6444 5734 6670 5166)) :ldur (quote (375 375 375 375 375)) :lvel (quote (93 62 65 51 52)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5346 6406 5850)) :ldur (quote (250 250 250)) :lvel (quote (99 78 51)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6612 5650)) :ldur (quote (125 125)) :lvel (quote (55 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6098)) :ldur (quote (250)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6450)) :ldur (quote (125)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4536)) :ldur (quote (125)) :lvel (quote (95)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5728)) :ldur (quote (125)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5418 6462)) :ldur (quote (375 375)) :lvel (quote (53 66)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4422 6572 6326 5406)) :ldur (quote (94 94 94 94)) :lvel (quote (51 78 52 95)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5808)) :ldur (quote (375)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6396 5650 4524)) :ldur (quote (375 375 375)) :lvel (quote (59 63 82)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4138 6134 6420 5246)) :ldur (quote (281 281 281 281)) :lvel (quote (52 51 73 98)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5790 6396 4500)) :ldur (quote (94 94 94)) :lvel (quote (67 82 88)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6152 5170)) :ldur (quote (562 562)) :lvel (quote (52 68)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5720 4698 5930)) :ldur (quote (125 125 125)) :lvel (quote (51 85 68)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6350 6652)) :ldur (quote (125 125)) :lvel (quote (59 62)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6608 4790 5936)) :ldur (quote (250 250 250)) :lvel (quote (51 91 66)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6488 6190)) :ldur (quote (125 125)) :lvel (quote (64 52)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5122 6706)) :ldur (quote (375 375)) :lvel (quote (51 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5852 4618 6426 5676)) :ldur (quote (94 94 94 94)) :lvel (quote (64 96 61 62)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5192)) :ldur (quote (188)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6410)) :ldur (quote (94)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5220 6536)) :ldur (quote (94 94)) :lvel (quote (53 64)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6324)) :ldur (quote (94)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6654)) :ldur (quote (375)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6632)) :ldur (quote (94)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5236 6384)) :ldur (quote (250 250)) :lvel (quote (52 60)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5892)) :ldur (quote (125)) :lvel (quote (76)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (375)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5962 4748)) :ldur (quote (250 250)) :lvel (quote (65 89)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5622 4598)) :ldur (quote (125 125)) :lvel (quote (59 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6592 5400 6354)) :ldur (quote (125 125 125)) :lvel (quote (67 51 54)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4634 5862)) :ldur (quote (250 250)) :lvel (quote (114 93)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6140 4940)) :ldur (quote (281 281)) :lvel (quote (68 106)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5752 4706 6418)) :ldur (quote (94 94 94)) :lvel (quote (64 73 63)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6618 5546 4628 5774)) :ldur (quote (188 188 188 188)) :lvel (quote (55 52 103 66)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6026 6440)) :ldur (quote (188 188)) :lvel (quote (51 69)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5810)) :ldur (quote (94)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6390)) :ldur (quote (94)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5772 6476)) :ldur (quote (250 250)) :lvel (quote (68 62)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5254 6154)) :ldur (quote (125 125)) :lvel (quote (51 59)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5054)) :ldur (quote (375)) :lvel (quote (54)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5964 6534 5782 4634)) :ldur (quote (125 125 125 125)) :lvel (quote (67 58 60 108)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5210)) :ldur (quote (250)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6486)) :ldur (quote (562)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6150 4680 6468 5816)) :ldur (quote (188 188 188 188)) :lvel (quote (56 102 66 69)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6702)) :ldur (quote (375)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5724 6424 6168 4516)) :ldur (quote (375 375 375 375)) :lvel (quote (76 72 52 116)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4640 5478 6514 5834)) :ldur (quote (429 429 429 429)) :lvel (quote (122 51 64 70)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5340 4722 5940 6016 6454 6236)) :ldur (quote (107 107 107 107 107 107)) :lvel (quote (51 121 84 52 73 51)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6686)) :ldur (quote (214)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5822 6526)) :ldur (quote (429 429)) :lvel (quote (51 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6454 5734 4518)) :ldur (quote (107 107 107)) :lvel (quote (54 63 99)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6396)) :ldur (quote (643)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6520 5924 4724)) :ldur (quote (94 94 94)) :lvel (quote (52 85 113)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6324)) :ldur (quote (281)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6478)) :ldur (quote (94)) :lvel (quote (83)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4410 5448 4890 6096)) :ldur (quote (188 188 188 188)) :lvel (quote (51 51 111 78)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 6670 5774 4562)) :ldur (quote (214 214 214 214)) :lvel (quote (63 60 73 102)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5292)) :ldur (quote (321)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5736 6622 6400 5196)) :ldur (quote (562 562 562 562)) :lvel (quote (51 51 96 121)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5752)) :ldur (quote (94)) :lvel (quote (127)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5740 4536 6422 5270)) :ldur (quote (375 375 375 375)) :lvel (quote (76 121 76 51)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5298)) :ldur (quote (214)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5386 6596)) :ldur (quote (429 429)) :lvel (quote (122 72)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 80) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.01 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 44) (om-make-point 894 448) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (2 0 1 0 nil 0) (3 0 2 0 nil 0) (4 0 3 0 nil 0) (6 0 5 0 nil 0))) nil 7.01))
