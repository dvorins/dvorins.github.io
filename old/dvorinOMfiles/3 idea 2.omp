; OM File Header - Saved 2023/12/29 13:42:39
; (7.01 :patc (om-make-point 172 10) (om-make-point 0 44) (om-make-point 1800 1035) "" 183 0 "2023/11/24 16:06:18" "2023/12/28 17:19:03")
; End File Header
; External resources 
; (list (list (quote :sdif) "#P\"../../../../../Downloads/no input mixer 3_2#02_1.sdif\""))
(in-package :om)(load-lib-for (quote ("OMTristan" "OMJosh")))(setf *om-current-persistent* (om-load-patch1 "3 idea 2" (quote ((let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 499 633) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4892) (8528 5220) (7390 3608) (5358) (3948) (4444) (5084 7988) (7624 6926) (5486) (4958) (4890 5774 7642) (7098) (8528 5220) (8630 8866 9188) (7894) (6064) (8630 8866 9188) (4376 8930) (7154) (8630 8866 9188) (6844) (6972) (5196 8200 8662 6846) (5876) (5918 7910) (6294 4128 7622 8002 8530) (5116) (7082 3390) (6034 5574) (6946) (7692) (8944 5918 8718 6292 9232 7228 9552) (5244) (7314 8948 9274) (6150 7598) (3570) (7390 3608) (8644 6060 8344 8140 6728) (5042) (7408) (4812 8354 8116) (5084 7988) (8452) (3740 6740 2860 7278) (8008 5934) (5962) (5448 6360) (4818 6778) (4904) (5448 6360) (4112) (7182) (5448 6360) (6032) (6706 8668 9206) (5448 6360) (7098) (5150) (7214 9062 5928 6396 8158) (5158 7180) (9524 8980 6144 6690) (7162 6546 7442) (7216) (8756 7244) (9552 8144 8494 9076 7198) (6856) (5044) (9552 8144 8494 9076 7198) (7656 5116 8548 9206) (5050) (9552 8144 8494 9076 7198) (6432) (8046) (9154 8932) (9582 7812) (7692) (8356 8604) (6130 9600 6746) (7798) (5180 7414 6532 5990 7932) (9094) (9078) (7414 7862 8942) (5118) (7716 7928 5066 7388) (5970 8702) (7716 7928 5066 7388) (4598 6786 8464) (9438 7338 7868 6574) (8258 6566 6074 8768) (8096 5962 8790 7518) (9638 3902) (6014 7472 8754 4058) (8908) (8068 8288 7762) (7246) (6836 4840 7094 8482 5208 8002 7844 9486 9068) (6638 9094) (4756) (6092 6458) (7892 4556) (6056) (5064 7018 5482 5972) (9444) (5312) (7788 7606 3952 8194) (5902) (4242) (7878 6834 7632) (5500) (7376 6738 4348) (6806 7094) (5212) (4910) (8448 9356 7350 9584) (7030 3148) (3490) (9000 7248 6380 6592) (5854) (4970) (9000 7248 6380 6592) (9070 8774) (3412) (8510 4804 7374 8328) (9070 8774) (4888) (6846 5574 6750 7528 7808 8252 8592 8850) (6916) (4968) (5020 3604 4210) (6292) (4222) (8610 8800) (5054) (5108 7594) (4720 7354 7526 8436) (4222) (5708 9442 6516) (5982 7134) (3962) (5708 9442 6516) (7454 6300) (5034) (8340 9322 8984) (6218 5958 6984) (4482) (8340 9322 8984) (6048 7198) (3388 5568) (3712 5482) (7538 6286) (6328) (2798 4594 7462) (7186 8316 5898) (3282) (8104 6588) (5496 6630) (5476) (8104 6588) (7018 5884) (5728) (5034 5810) (7018 5884) (8962 6348 8298 8024) (7730 8662 8588))) :lonset (quote (0 1000 1875 2000 2875 3000 3875 4000 4875 5000 5833 5875 6000 6833 6875 7000 7833 7875 8000 8833 8875 9000 9833 9875 10000 10833 10875 11000 11833 11875 12000 12833 12875 13000 13833 13875 14000 14833 14875 15000 15833 15875 16000 16833 16875 17000 17833 17875 18000 18833 18875 19000 19833 19875 20000 20833 20875 21000 21833 21875 22000 22833 22875 23000 23833 23875 24000 24833 24875 25000 25833 25875 26000 26833 26875 27000 27833 27875 28000 28833 28875 29000 29833 29875 30833 30875 31833 31875 32833 32875 33833 33875 34833 34875 35833 35875 36833 36875 37000 37833 37875 38000 38833 38875 39000 39833 39875 40000 40833 40875 41000 41833 41875 42000 42833 42875 43000 43833 43875 44000 44833 44875 45000 45833 45875 46000 46833 46875 47000 47833 47875 48000 48833 48875 49000 49833 49875 50000 50833 50875 51000 51833 51875 52000 52833 52875 53000 53833 53875 54000 54833 54875 55000 55833 55875 56000 56833 56875 57000 57833 57875 58000 58833 59000 59833 60833)) :ldur (quote ((1000) (1000 1000) (1000 1000) (1000) (1000) (1000) (1000 1000) (1000 1000) (1000) (1000) (1000 1000 1000) (1000) (1000 1000) (1000 1000 1000) (1000) (1000) (1000 1000 1000) (1000 1000) (1000) (1000 1000 1000) (1000) (1000) (1000 1000 1000 1000) (1000) (1000 1000) (1000 1000 1000 1000 1000) (1000) (1000 1000) (1000 1000) (1000) (1000) (1000 1000 1000 1000 1000 1000 1000) (1000) (1000 1000 1000) (1000 1000) (1000) (1000 1000) (1000 1000 1000 1000 1000) (1000) (1000) (1000 1000 1000) (1000 1000) (1000) (1000 1000 1000 1000) (1000 1000) (1000) (1000 1000) (1000 1000) (1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000 1000 1000) (1000 1000) (1000) (1000) (1000 1000 1000 1000 1000) (1000 1000) (1000 1000 1000 1000) (1000 1000 1000) (1000) (1000 1000) (1000 1000 1000 1000 1000) (1000) (1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000) (1000) (1000 1000 1000 1000 1000) (1000) (1000) (1000 1000) (1000 1000) (1000) (1000 1000) (1000 1000 1000) (1000) (1000 1000 1000 1000 1000) (1000) (1000) (1000 1000 1000) (1000) (1000 1000 1000 1000) (1000 1000) (1000 1000 1000 1000) (1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000) (1000 1000 1000 1000) (1000) (1000 1000 1000) (1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000) (1000) (1000 1000) (1000 1000) (1000) (1000 1000 1000 1000) (1000) (1000) (1000 1000 1000 1000) (1000) (1000) (1000 1000 1000) (1000) (1000 1000 1000) (1000 1000) (1000) (1000) (1000 1000 1000 1000) (1000 1000) (1000) (1000 1000 1000 1000) (1000) (1000) (1000 1000 1000 1000) (1000 1000) (1000) (1000 1000 1000 1000) (1000 1000) (1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000) (1000) (1000 1000 1000) (1000) (1000) (1000 1000) (1000) (1000 1000) (1000 1000 1000 1000) (1000) (1000 1000 1000) (1000 1000) (1000) (1000 1000 1000) (1000 1000) (1000) (1000 1000 1000) (1000 1000 1000) (1000) (1000 1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000) (1000 1000 1000) (1000 1000 1000) (1000) (1000 1000) (1000 1000) (1000) (1000 1000) (1000 1000) (1000) (1000 1000) (1000 1000) (1000 1000 1000 1000) (1000 1000 1000))) :lvel (quote ((100) (100 100) (100 100) (100) (100) (100) (100 100) (100 100) (100) (100) (100 100 100) (100) (100 100) (100 100 100) (100) (100) (100 100 100) (100 100) (100) (100 100 100) (100) (100) (100 100 100 100) (100) (100 100) (100 100 100 100 100) (100) (100 100) (100 100) (100) (100) (100 100 100 100 100 100 100) (100) (100 100 100) (100 100) (100) (100 100) (100 100 100 100 100) (100) (100) (100 100 100) (100 100) (100) (100 100 100 100) (100 100) (100) (100 100) (100 100) (100) (100 100) (100) (100) (100 100) (100) (100 100 100) (100 100) (100) (100) (100 100 100 100 100) (100 100) (100 100 100 100) (100 100 100) (100) (100 100) (100 100 100 100 100) (100) (100) (100 100 100 100 100) (100 100 100 100) (100) (100 100 100 100 100) (100) (100) (100 100) (100 100) (100) (100 100) (100 100 100) (100) (100 100 100 100 100) (100) (100) (100 100 100) (100) (100 100 100 100) (100 100) (100 100 100 100) (100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100) (100 100 100 100) (100) (100 100 100) (100) (100 100 100 100 100 100 100 100 100) (100 100) (100) (100 100) (100 100) (100) (100 100 100 100) (100) (100) (100 100 100 100) (100) (100) (100 100 100) (100) (100 100 100) (100 100) (100) (100) (100 100 100 100) (100 100) (100) (100 100 100 100) (100) (100) (100 100 100 100) (100 100) (100) (100 100 100 100) (100 100) (100) (100 100 100 100 100 100 100 100) (100) (100) (100 100 100) (100) (100) (100 100) (100) (100 100) (100 100 100 100) (100) (100 100 100) (100 100) (100) (100 100 100) (100 100) (100) (100 100 100) (100 100 100) (100) (100 100 100) (100 100) (100 100) (100 100) (100 100) (100) (100 100 100) (100 100 100) (100) (100 100) (100 100) (100) (100 100) (100 100) (100) (100 100) (100 100) (100 100 100 100) (100 100 100))) :loffset (quote ((0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0 0 0) (0) (0 0) (0 0 0) (0) (0) (0 0 0) (0 0) (0) (0 0 0) (0) (0) (0 0 0 0) (0) (0 0) (0 0 0 0 0) (0) (0 0) (0 0) (0) (0) (0 0 0 0 0 0 0) (0) (0 0 0) (0 0) (0) (0 0) (0 0 0 0 0) (0) (0) (0 0 0) (0 0) (0) (0 0 0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0) (0 0) (0) (0 0 0) (0 0) (0) (0) (0 0 0 0 0) (0 0) (0 0 0 0) (0 0 0) (0) (0 0) (0 0 0 0 0) (0) (0) (0 0 0 0 0) (0 0 0 0) (0) (0 0 0 0 0) (0) (0) (0 0) (0 0) (0) (0 0) (0 0 0) (0) (0 0 0 0 0) (0) (0) (0 0 0) (0) (0 0 0 0) (0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0) (0 0 0 0) (0) (0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0 0) (0) (0 0) (0 0) (0) (0 0 0 0) (0) (0) (0 0 0 0) (0) (0) (0 0 0) (0) (0 0 0) (0 0) (0) (0) (0 0 0 0) (0 0) (0) (0 0 0 0) (0) (0) (0 0 0 0) (0 0) (0) (0 0 0 0) (0 0) (0) (0 0 0 0 0 0 0 0) (0) (0) (0 0 0) (0) (0) (0 0) (0) (0 0) (0 0 0 0) (0) (0 0 0) (0 0) (0) (0 0 0) (0 0) (0) (0 0 0) (0 0 0) (0) (0 0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0 0) (0 0 0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0 0 0 0) (0 0 0))) :lchan (quote ((1) (1 1) (1 1) (1) (1) (1) (1 1) (1 1) (1) (1) (1 1 1) (1) (1 1) (1 1 1) (1) (1) (1 1 1) (1 1) (1) (1 1 1) (1) (1) (1 1 1 1) (1) (1 1) (1 1 1 1 1) (1) (1 1) (1 1) (1) (1) (1 1 1 1 1 1 1) (1) (1 1 1) (1 1) (1) (1 1) (1 1 1 1 1) (1) (1) (1 1 1) (1 1) (1) (1 1 1 1) (1 1) (1) (1 1) (1 1) (1) (1 1) (1) (1) (1 1) (1) (1 1 1) (1 1) (1) (1) (1 1 1 1 1) (1 1) (1 1 1 1) (1 1 1) (1) (1 1) (1 1 1 1 1) (1) (1) (1 1 1 1 1) (1 1 1 1) (1) (1 1 1 1 1) (1) (1) (1 1) (1 1) (1) (1 1) (1 1 1) (1) (1 1 1 1 1) (1) (1) (1 1 1) (1) (1 1 1 1) (1 1) (1 1 1 1) (1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1) (1 1 1 1) (1) (1 1 1) (1) (1 1 1 1 1 1 1 1 1) (1 1) (1) (1 1) (1 1) (1) (1 1 1 1) (1) (1) (1 1 1 1) (1) (1) (1 1 1) (1) (1 1 1) (1 1) (1) (1) (1 1 1 1) (1 1) (1) (1 1 1 1) (1) (1) (1 1 1 1) (1 1) (1) (1 1 1 1) (1 1) (1) (1 1 1 1 1 1 1 1) (1) (1) (1 1 1) (1) (1) (1 1) (1) (1 1) (1 1 1 1) (1) (1 1 1) (1 1) (1) (1 1 1) (1 1) (1) (1 1 1) (1 1 1) (1) (1 1 1) (1 1) (1 1) (1 1) (1 1) (1) (1 1 1) (1 1 1) (1) (1 1) (1 1) (1) (1 1) (1 1) (1) (1 1) (1 1) (1 1 1 1) (1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0 0 0) (0) (0 0) (0 0 0) (0) (0) (0 0 0) (0 0) (0) (0 0 0) (0) (0) (0 0 0 0) (0) (0 0) (0 0 0 0 0) (0) (0 0) (0 0) (0) (0) (0 0 0 0 0 0 0) (0) (0 0 0) (0 0) (0) (0 0) (0 0 0 0 0) (0) (0) (0 0 0) (0 0) (0) (0 0 0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0) (0 0) (0) (0 0 0) (0 0) (0) (0) (0 0 0 0 0) (0 0) (0 0 0 0) (0 0 0) (0) (0 0) (0 0 0 0 0) (0) (0) (0 0 0 0 0) (0 0 0 0) (0) (0 0 0 0 0) (0) (0) (0 0) (0 0) (0) (0 0) (0 0 0) (0) (0 0 0 0 0) (0) (0) (0 0 0) (0) (0 0 0 0) (0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0) (0 0 0 0) (0) (0 0 0) (0) (0 0 0 0 0 0 0 0 0) (0 0) (0) (0 0) (0 0) (0) (0 0 0 0) (0) (0) (0 0 0 0) (0) (0) (0 0 0) (0) (0 0 0) (0 0) (0) (0) (0 0 0 0) (0 0) (0) (0 0 0 0) (0) (0) (0 0 0 0) (0 0) (0) (0 0 0 0) (0 0) (0) (0 0 0 0 0 0 0 0) (0) (0) (0 0 0) (0) (0) (0 0) (0) (0 0) (0 0 0 0) (0) (0 0 0) (0 0) (0) (0 0 0) (0 0) (0) (0 0 0) (0 0 0) (0) (0 0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0 0) (0 0 0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0 0 0 0) (0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.01 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 63/100 nil 1000 0 (om-make-point 1400 688) (om-make-point 400 44) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "sort by roughness least to greatest" (om-load-patch-abs1 "sort by roughness least to greatest" (quote ((let ((box (om-load-boxwithed1 (quote box-with-win) "get roughness" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil))) (om-make-point 425 344) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 322 206) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" 0) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 229 169) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 276 71) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 5 40) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 321 293) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 185 308) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((1 0 0 0 nil 0) (2 0 1 1 nil 0) (3 0 2 0 nil 0) (0 1 4 0 nil 0) (0 0 5 0 nil 0))) 1 "get roughness" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 2" 1 (om-make-point 438 452) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "get roughness" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil))) (om-make-point 73 206) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 275 123) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ROUGHNESS" (quote roughness) (quote ((om-load-inputfun (quote input-funbox) "chord obj" "CHORD" (list 6000 6700)) (om-load-inputfun (quote input-funbox) "nbharm" "NBHARM" 2) (om-load-inputfun (quote input-funbox) "dec" "DEC" 2))) (om-make-point 158 162) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 46 119) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 5 40) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 300 250) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 200 250) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((1 0 0 0 nil 0) (2 0 1 0 nil 0) (3 0 2 0 nil 0) (0 1 4 0 nil 0) (0 0 5 0 nil 0))) 1 "get roughness" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "get chord" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil))) (om-make-point 157 338) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 322 206) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" 1) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 229 169) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 276 71) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 5 40) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 321 293) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 185 308) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((1 0 0 0 nil 0) (2 0 1 1 nil 0) (3 0 2 0 nil 0) (0 1 4 0 nil 0) (0 0 5 0 nil 0))) 1 "get chord" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 416 212) (om-make-point 29 30) (quote <) "<" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 486 218) (om-make-point 42 30) (quote first) "first" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SORT-LIST" (quote sort-list) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil) (om-load-inputkeyword (quote input-keyword) "test function" "test" (quote :test) (quote (quote <)) nil) (om-load-inputkeyword (quote input-keyword) "test key" "key" (quote :key) nil nil))) (om-make-point 293 291) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "v fund + chord seq to hash" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil) (om-load-inputfun (quote input-funbox) "" "input1" nil))) (om-make-point 172 183) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 243 306) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 248 247) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 2" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 275 151) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 40 153) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input1" 1 (om-make-point 212 40) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 5 40) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 486 490) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 193 494) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((1 0 0 0 nil 0) (3 0 1 0 nil 0) (2 0 1 1 nil 0) (4 0 2 0 nil 0) (5 0 3 0 nil 0) (0 1 6 0 nil 0) (0 0 7 0 nil 0))) 1 "v fund + chord seq to hash" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "VIRTUAL-FUND" (quote virtual-fund) (quote ((om-load-inputfun (quote input-funbox) "pitches" "CHORD" (list 6000)) (om-load-inputfun (quote input-funbox) "approx" "CENTS" 50) (om-load-inputfunmenu1 (quote input-funmenu) "unit" "UNIT" (quote midic) (list (list "Midics" (quote (quote midic))) (list "Freqs" (quote (quote freq))))))) (om-make-point 157 62) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 89 375) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 0 0 nil 0) (0 0 1 0 nil 0) (9 0 2 0 nil 0) (6 0 3 0 nil 0) (7 0 6 0 nil 0) (4 0 6 1 nil 0) (5 0 6 2 nil 0) (2 0 7 0 nil 0) (9 0 7 1 nil 0) (3 0 10 0 nil 0))) 7.01 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 494 538) nil (list (list (list 4892) (list 8528 5220) (list 5358) (list 4444) (list 7624 6926) (list 4958) (list 8528 5220) (list 6064) (list 7154) (list 6972) (list 5918 7910) (list 7082 3390) (list 7692) (list 7314 8948 9274) (list 7390 3608) (list 7408) (list 8452) (list 5962) (list 4904) (list 7182) (list 6706 8668 9206) (list 5150) (list 9524 8980 6144 6690) (list 8756 7244) (list 5044) (list 5050) (list 8046) (list 7692) (list 7798) (list 9078) (list 7390 3608) (list 3948) (list 5084 7988) (list 5486) (list 7098) (list 7894) (list 4376 8930) (list 6844) (list 5876) (list 5116) (list 6946) (list 5244) (list 3570) (list 5042) (list 5084 7988) (list 8008 5934) (list 4818 6778) (list 4112) (list 6032) (list 7098) (list 5158 7180) (list 7216) (list 6856) (list 7656 5116 8548 9206) (list 6432) (list 9582 7812) (list 6130 9600 6746) (list 9094) (list 5118) (list 5970 8702) (list 4598 6786 8464) (list 8258 6566 6074 8768) (list 9638 3902) (list 8908) (list 7246) (list 6638 9094) (list 7892 4556) (list 9444) (list 5902) (list 5500) (list 5212) (list 7030 3148) (list 5854) (list 9070 8774) (list 9070 8774) (list 6916) (list 6292) (list 5054) (list 4222) (list 3962) (list 5034) (list 4482) (list 3388 5568) (list 6328) (list 3282) (list 5476) (list 5728) (list 4756) (list 6056) (list 5312) (list 4242) (list 7376 6738 4348) (list 4910) (list 3490) (list 4970) (list 3412) (list 4888) (list 4968) (list 4222) (list 5108 7594) (list 5708 9442 6516) (list 5708 9442 6516) (list 8340 9322 8984) (list 8340 9322 8984) (list 3712 5482) (list 2798 4594 7462) (list 8104 6588) (list 8104 6588) (list 5034 5810) (list 8962 6348 8298 8024) (list 4890 5774 7642) (list 8630 8866 9188) (list 8630 8866 9188) (list 8630 8866 9188) (list 5196 8200 8662 6846) (list 6294 4128 7622 8002 8530) (list 6034 5574) (list 8944 5918 8718 6292 9232 7228 9552) (list 6150 7598) (list 8644 6060 8344 8140 6728) (list 4812 8354 8116) (list 3740 6740 2860 7278) (list 5448 6360) (list 5448 6360) (list 5448 6360) (list 5448 6360) (list 7214 9062 5928 6396 8158) (list 7162 6546 7442) (list 9552 8144 8494 9076 7198) (list 9552 8144 8494 9076 7198) (list 9552 8144 8494 9076 7198) (list 9154 8932) (list 8356 8604) (list 5180 7414 6532 5990 7932) (list 7414 7862 8942) (list 7716 7928 5066 7388) (list 7716 7928 5066 7388) (list 9438 7338 7868 6574) (list 8096 5962 8790 7518) (list 6014 7472 8754 4058) (list 8068 8288 7762) (list 6836 4840 7094 8482 5208 8002 7844 9486 9068) (list 6092 6458) (list 5064 7018 5482 5972) (list 7788 7606 3952 8194) (list 7878 6834 7632) (list 6806 7094) (list 8448 9356 7350 9584) (list 9000 7248 6380 6592) (list 9000 7248 6380 6592) (list 8510 4804 7374 8328) (list 6846 5574 6750 7528 7808 8252 8592 8850) (list 5020 3604 4210) (list 8610 8800) (list 4720 7354 7526 8436) (list 5982 7134) (list 7454 6300) (list 6218 5958 6984) (list 6048 7198) (list 7538 6286) (list 7186 8316 5898) (list 5496 6630) (list 7018 5884) (list 7018 5884) (list 7730 8662 8588)) (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 7.442664E-4 7.442664E-4 9.340926E-4 9.340926E-4 0.001069795 0.0011651676 0.0013290793 0.0013290793 0.0024591585 0.002743188 0.004995541 0.005312998 0.005312998 0.005312998 0.0068254746 0.007532475 0.007831406 0.0079859365 0.008450576 0.008687342 0.009011101 0.009481108 0.010263665 0.010263665 0.010263665 0.010263665 0.011313539 0.0114632975 0.011536218 0.011536218 0.011536218 0.01205287 0.012277871 0.013381328 0.013930302 0.013974543 0.013974543 0.014620975 0.015499514 0.016227959 0.016890943 0.01690725 0.017074764 0.021822712 0.022043795 0.02471707 0.028364137 0.028394131 0.028652788 0.028652788 0.030195367 0.030921484 0.032363855 0.037034963 0.039363113 0.048119486 0.049018398 0.050279368 0.050309986 0.05403773 0.055401765 0.056334846 0.058680043 0.058680043 0.11400907)) nil "sort by roughness least to greatest"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "APPEND" (quote append) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 1237 209) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE 2" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 81 357) (om-make-point 887 118) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (62 (((4 4) ((1 (4 1.0)) (1 (1.0 4 2)) (1 (1.0 1 1)) (1 (1.0 3)))) ((4 4) ((1 (1 3)) (1 (1.0 1)) (1 (2.0 3 1)) 1.0)) ((4 4) (1.0 (1 (3.0 1)) 2.0)) ((4 4) ((1 (1.0 4 1.0)) 3.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (1.0 (1 (1.0 4 1.0)) (1 (3.0 4)) (1 (1.0 6)))) ((4 4) ((1 (2.0 1)) 1.0 (1 (2.0 4 1.0)) 1.0)) ((4 4) ((1 (3.0 1)) 2.0 (1 (3.0 4 1.0)))) ((4 4) ((1 (1.0 7)) 1.0 2)) ((4 4) (4.0)) ((4 4) ((1 (1.0 2 3)) (1 (1.0 1)) 2.0)) ((4 4) (4.0)) ((4 4) ((1 (4.0 1.0 2)) 1.0 (1 (1.0 1)) 1)) ((4 4) (3.0 1)) ((4 4) ((1 (3.0 1 2)) (1 (1 1 2)) (1 (4.0 3 1)) (1 (2.0 3 1)))) ((4 4) ((1 (1 1)) 3.0)) ((4 4) ((1 (4.0 1.0 3)) 2.0 (1 (4.0 1.0 1)))) ((4 4) ((1 (3.0 1)) (1 (1.0 7)) 1.0 (1 (2.0 4 1.0)))) ((4 4) ((1 (2.0 4 1.0)) 1 2)) ((4 4) ((1 (2.0 4 1.0)) (1 (1.0 2)) 2.0)) ((4 4) (1.0 (1 (2.0 2 3)) (1 (1.0 2)) 1.0)) ((4 4) ((1 (1 1)) (1 (2.0 4 1.0 1)) (1 (1.0 3)) 1.0)) ((4 4) ((1 (3.0 3 2)) 1.0 1 (1 (2.0 1)))) ((4 4) ((1 (4.0 3)) (1 (7.0 1)) (1 (2.0 2 1 3)) 1.0)) ((4 4) ((1 (4.0 1.0 2 1)) 1.0 (1 (7.0 1)) (1 (1.0 6)))) ((4 4) (1.0 (1 (7.0 1)) (1 (2.0 4 1.0)) (1 (3.0 1 2)))) ((4 4) ((1 (1.0 4 1.0)) 3.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) ((1 (3.0 4 1.0)) 1.0 (1 (1 1)) 1.0)) ((4 4) ((1 (1 2)) 1.0 (1 (3.0 4)) 1)) ((4 4) (1.0 (1 (7.0 1)) (1 (1.0 2)) (1 (7.0 1)))) ((4 4) ((1 (3.0 1)) (1 (1.0 6)) (1 (1.0 3)) 1.0)) ((4 4) ((1 (1.0 3)) 2 (1 (2.0 2 3)))) ((4 4) ((1 (1 1)) (1 (1.0 7)) 2.0)) ((4 4) ((1 (4.0 1.0 1)) 3.0)) ((4 4) (1.0 1 (1 (3.0 4)) (1 (1.0 2 4 1.0)))) ((4 4) ((1 (3.0 4)) (1 (4.0 1.0 2)) (1 (2.0 1 3)) (1 (2 1)))) ((4 4) ((1 (3.0 1)) (1 (7.0 1)) (1 (4.0 1.0 3)) 1.0)) ((4 4) (4.0)) ((4 4) (1.0 3)) ((4 4) (4.0)) ((4 4) (2.0 (1 (1.0 1)) 1.0)) ((4 4) ((1 (1.0 4 1.0)) 3.0)) ((4 4) (4.0)) ((4 4) (3.0 (1 (3.0 1)))) ((4 4) ((1 (4.0 1.0 1)) 3.0)) ((4 4) (1.0 (1 (7.0 1)) 2.0)) ((4 4) (1.0 (1 (3.0 4)) 2.0)) ((4 4) (1.0 (1 (2.0 1)) 1.0 (1 (4.0 1.0 2 1)))) ((4 4) ((1 (1.0 1 2)) 1.0 (1 (4.0 1.0 1)) 1.0)) ((4 4) (1.0 (1 (1.0 7)) (1 (2.0 1)) 1.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (1.0 (1 (3.0 4)) 1.0 (1 (4 3)))) ((4 4) ((1 (1.0 1)) (1 (4.0 1.0 2 1)) 2.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (1.0 (1 (7.0 1)) 1.0 (1 (1 6)))) ((4 4) (1.0 (1 (1.0 2)) 1.0 -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (471)) :lvel (quote (1)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (336)) :lvel (quote (1)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (168)) :lvel (quote (1)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (196)) :lvel (quote (1)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (196)) :lvel (quote (1)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (441)) :lvel (quote (11)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (147)) :lvel (quote (25)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (441)) :lvel (quote (29)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (294)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (294)) :lvel (quote (114)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9400)) :ldur (quote (98)) :lvel (quote (114)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (147)) :lvel (quote (112)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (392)) :lvel (quote (90)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (392)) :lvel (quote (103)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (336)) :lvel (quote (81)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (504)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (196)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (336)) :lvel (quote (94)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (147)) :lvel (quote (107)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (294)) :lvel (quote (112)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (515)) :lvel (quote (110)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (11300)) :ldur (quote (1176)) :lvel (quote (121)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (196)) :lvel (quote (110)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (294)) :lvel (quote (110)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (294)) :lvel (quote (109)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (168)) :lvel (quote (110)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (294)) :lvel (quote (94)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600 6600)) :ldur (quote (588 588)) :lvel (quote (95 93)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (588)) :lvel (quote (45)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (98)) :lvel (quote (38)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (196)) :lvel (quote (41)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (147)) :lvel (quote (41)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (147)) :lvel (quote (46)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000 8000)) :ldur (quote (294 294)) :lvel (quote (55 52)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (221)) :lvel (quote (49)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (74)) :lvel (quote (49)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (294)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (98)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (294)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (294)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (221)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (98)) :lvel (quote (47)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (147)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (515)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (336)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (336)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200 8200)) :ldur (quote (588 588)) :lvel (quote (116 98)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9400)) :ldur (quote (1176)) :lvel (quote (116)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500 8200)) :ldur (quote (336 336)) :lvel (quote (115 118)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (392)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (168)) :lvel (quote (63)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (252)) :lvel (quote (34)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (392)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (294)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (294)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (294)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (74)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (441)) :lvel (quote (78)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (221)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (147)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (588)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (196)) :lvel (quote (73)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (252)) :lvel (quote (87)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600 6600)) :ldur (quote (74 74)) :lvel (quote (83 88)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (147)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (74)) :lvel (quote (43)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (221)) :lvel (quote (43)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (147)) :lvel (quote (83)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (74)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (74)) :lvel (quote (82)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (504)) :lvel (quote (46)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000 7900)) :ldur (quote (74 74)) :lvel (quote (55 67)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (336)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (98)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (196)) :lvel (quote (26)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (392)) :lvel (quote (15)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (294)) :lvel (quote (93)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000 8000)) :ldur (quote (294 294)) :lvel (quote (109 108)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (294)) :lvel (quote (82)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (196)) :lvel (quote (69)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (392)) :lvel (quote (86)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (336)) :lvel (quote (101)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (588)) :lvel (quote (120)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (74)) :lvel (quote (120)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (392)) :lvel (quote (122)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (74)) :lvel (quote (116)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (147)) :lvel (quote (120)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (504)) :lvel (quote (120)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (441)) :lvel (quote (116)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (441)) :lvel (quote (113)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (1176)) :lvel (quote (111)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (168)) :lvel (quote (111)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (252)) :lvel (quote (109)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (294)) :lvel (quote (87)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (294)) :lvel (quote (76)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (515)) :lvel (quote (101)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (98)) :lvel (quote (102)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (588)) :lvel (quote (87)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (336)) :lvel (quote (84)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (147)) :lvel (quote (93)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800 6800)) :ldur (quote (294 294)) :lvel (quote (97 95)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (336)) :lvel (quote (101)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (168)) :lvel (quote (104)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (98)) :lvel (quote (104)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (294)) :lvel (quote (102)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (392)) :lvel (quote (102)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (196)) :lvel (quote (107)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (147)) :lvel (quote (110)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (74)) :lvel (quote (112)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (11300)) :ldur (quote (221)) :lvel (quote (119)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (1765)) :lvel (quote (9)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (294)) :lvel (quote (9)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (392)) :lvel (quote (36)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (147)) :lvel (quote (94)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (98)) :lvel (quote (96)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9400)) :ldur (quote (74)) :lvel (quote (113)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9400)) :ldur (quote (336)) :lvel (quote (122)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (196)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (147)) :lvel (quote (72)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (74)) :lvel (quote (95)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000 8000)) :ldur (quote (147 147)) :lvel (quote (103 102)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000 8000)) :ldur (quote (294 294)) :lvel (quote (83 103)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (98)) :lvel (quote (94)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (515)) :lvel (quote (94)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9400)) :ldur (quote (196)) :lvel (quote (116)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (336)) :lvel (quote (28)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (336)) :lvel (quote (58)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (252)) :lvel (quote (74)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (294)) :lvel (quote (37)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (147)) :lvel (quote (37)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (74)) :lvel (quote (36)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (74)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (84)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (504)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (392)) :lvel (quote (10)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 102) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.01 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 8 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 1357 534) (om-make-point 400 44) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "dragged 7" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 987 163) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7162 6546 7442) (5448 6360) (6916) (6292) (3712 5482) (5054) (4222) (3962) (4812 8354 8116) (5034) (4482) (3388 5568) (6328) (5448 6360) (3282) (5476) (5728) (4756) (5448 6360) (6056) (5312) (4242) (7376 6738 4348) (4910) (5020 3604 4210) (3490) (4970) (3412) (4888) (6034 5574) (4968) (4222) (6218 5958 6984) (5064 7018 5482 5972) (5108 7594) (5448 6360))) :lonset (quote (0 0 0 0 0 0 0 0 144 144 192 288 288 385 385 433 433 433 577 577 577 577 721 721 721 721 769 865 865 865 865 962 1010 1010 1010 2308 3462)) :ldur (quote ((144 144 144) (577 577) (192) (433) (577 577) (144) (288) (385) (433 433 433) (144) (192) (144 144) (144) (769 769) (192) (288) (144) (288) (144 144) (288) (144) (192) (288 288 288) (144) (144 144 144) (144) (192) (144) (288) (144 144) (288) (192) (144 144 144) (144 144 144 144) (144 144) (1154 1154))) :lvel (quote ((56 52 51) (54 51) (52) (51) (63 56) (54) (71) (54) (53 50 55) (55) (59) (63 53) (51) (54 51) (53) (56) (55) (52) (54 51) (52) (56) (55) (51 55 57) (54) (55 62 70) (56) (51) (62) (55) (52 57) (53) (71) (52 52 73) (54 53 54 52) (54 50) (54 51))) :loffset (quote ((0 0 0) (0 0) (0) (0) (0 0) (0) (0) (0) (0 0 0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0 0) (0) (0 0 0) (0) (0) (0) (0) (0 0) (0) (0) (0 0 0) (0 0 0 0) (0 0) (0 0))) :lchan (quote ((1 1 1) (1 1) (1) (1) (1 1) (1) (1) (1) (1 1 1) (1) (1) (1 1) (1) (1 1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1 1 1) (1) (1 1 1) (1) (1) (1) (1) (1 1) (1) (1) (1 1 1) (1 1 1 1) (1 1) (1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0) (0 0) (0) (0) (0 0) (0) (0) (0) (0 0 0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0 0) (0) (0 0 0) (0) (0) (0) (0) (0 0) (0) (0) (0 0 0) (0 0 0 0) (0 0) (0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.01 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 8 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 103/20 nil 1000 0 (om-make-point 897 313) (om-make-point 400 44) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "dragged 6" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 838 241) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5196 8200 8662 6846) (8644 6060 8344 8140 6728) (7730 8662 8588) (5158 7180) (8104 6588) (7216) (4720 7354 7526 8436) (6294 4128 7622 8002 8530) (6856) (7186 8316 5898) (7656 5116 8548 9206) (6432) (9582 7812) (8448 9356 7350 9584) (6130 9600 6746) (9094) (8096 5962 8790 7518) (8962 6348 8298 8024) (5118) (5970 8702) (7214 9062 5928 6396 8158) (8356 8604) (6048 7198) (8068 8288 7762) (4598 6786 8464) (8258 6566 6074 8768) (9638 3902) (8908) (5180 7414 6532 5990 7932) (6836 4840 7094 8482 5208 8002 7844 9486 9068) (7246) (9438 7338 7868 6574) (8104 6588) (6638 9094) (7892 4556) (9444))) :lonset (quote (0 0 0 0 0 0 144 144 144 144 165 165 288 288 330 433 433 433 495 577 577 577 659 659 721 721 721 824 865 865 865 989 989 1010 1010 1010 1154)) :ldur (quote ((144 144 144 144) (144 144 144 144 144) (144 144 144) (144 144) (165 165) (165) (144 144 144 144) (144 144 144 144 144) (288) (144 144 144) (495 495 495 495) (165) (144 144) (144 144 144 144) (165 165 165) (144) (144 144 144 144) (144 144 144 144) (165) (144 144) (144 144 144 144 144) (144 144) (165 165) (330 330 330) (144 144 144) (144 144 144 144) (144 144) (165) (144 144 144 144 144) (144 144 144 144 144 144 144 144 144) (144) (165 165 165 165) (165 165) (144 144) (144 144) (144))) :lvel (quote ((55 52 51 52) (51 52 51 54 52) (58 51 52) (52 51) (52 52) (51) (53 52 52 51) (54 54 52 52 57) (52) (51 52 53) (51 54 58 53) (52) (52 52) (51 52 51 54) (55 51 51) (52) (60 52 52 61) (51 51 53 52) (54) (53 52) (53 52 60 53 53) (52 52) (53 51) (52 52 58) (53 52 51) (53 56 53 54) (51 51) (52) (54 52 53 54 52) (53 52 55 51 52 52 52 51 52) (51) (51 52 52 52) (52 52) (52 54) (52 53) (52))) :loffset (quote ((0 0 0 0) (0 0 0 0 0) (0 0 0) (0 0) (0 0) (0) (0 0 0 0) (0 0 0 0 0) (0) (0 0 0) (0 0 0 0) (0) (0 0) (0 0 0 0) (0 0 0) (0) (0 0 0 0) (0 0 0 0) (0) (0 0) (0 0 0 0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0) (0) (0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0 0) (0 0) (0 0) (0 0) (0))) :lchan (quote ((1 1 1 1) (1 1 1 1 1) (1 1 1) (1 1) (1 1) (1) (1 1 1 1) (1 1 1 1 1) (1) (1 1 1) (1 1 1 1) (1) (1 1) (1 1 1 1) (1 1 1) (1) (1 1 1 1) (1 1 1 1) (1) (1 1) (1 1 1 1 1) (1 1) (1 1) (1 1 1) (1 1 1) (1 1 1 1) (1 1) (1) (1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1) (1 1 1 1) (1 1) (1 1) (1 1) (1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0) (0 0 0 0 0) (0 0 0) (0 0) (0 0) (0) (0 0 0 0) (0 0 0 0 0) (0) (0 0 0) (0 0 0 0) (0) (0 0) (0 0 0 0) (0 0 0) (0) (0 0 0 0) (0 0 0 0) (0) (0 0) (0 0 0 0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0) (0) (0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0) (0 0 0 0) (0 0) (0 0) (0 0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.01 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 8 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 44) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "dragged 5" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 837 77) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6972) (6806 7094) (5918 7910) (7082 3390) (7692) (9000 7248 6380 6592) (5708 9442 6516) (7314 8948 9274) (9552 8144 8494 9076 7198) (7390 3608) (7408) (8452) (6846 5574 6750 7528 7808 8252 8592 8850) (5962) (4904) (6150 7598) (7182) (6706 8668 9206) (9552 8144 8494 9076 7198) (5150) (9524 8980 6144 6690) (8756 7244) (5044) (5050) (8046) (9000 7248 6380 6592) (5708 9442 6516) (7692) (8944 5918 8718 6292 9232 7228 9552) (7798) (6092 6458) (9078) (7390 3608) (9552 8144 8494 9076 7198))) :lonset (quote (0 0 0 0 0 0 0 0 0 0 144 144 144 192 192 288 288 288 330 385 385 433 577 577 577 721 721 769 769 865 962 962 962 989 1154)) :ldur (quote ((192) (288 288) (192 192) (577 577) (144) (769 769 769 769) (144 144 144) (144 144 144) (192 192 192 192 192) (330 330) (144) (577) (144 144 144 144 144 144 144 144) (192) (192) (577 577) (865) (144 144 144) (659 659 659 659 659) (192) (192 192 192 192) (288 288) (577) (385) (192) (433 433 433 433) (433 433 433) (385) (192 192 192 192 192 192 192) (288) (192 192) (192) (192 192) (165 165 165 165 165))) :lvel (quote ((57) (52 51) (51 51) (51 51) (51) (51 52 51 51) (53 52 51) (53 53 51) (51 51 52 51 51) (51 52) (51) (51) (51 81 53 75 51 51 51 52) (51) (51) (51 51) (51) (52 52 51) (51 51 52 51 51) (52) (51 51 51 52) (51 52) (51) (51) (51) (51 52 51 51) (53 52 51) (51) (50 51 51 52 51 51 51) (51) (51 51) (51) (51 52) (51 51 52 51 51))) :loffset (quote ((0) (0 0) (0 0) (0 0) (0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0 0) (0 0) (0) (0) (0 0 0 0 0 0 0 0) (0) (0) (0 0) (0) (0 0 0) (0 0 0 0 0) (0) (0 0 0 0) (0 0) (0) (0) (0) (0 0 0 0) (0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0) (0) (0 0) (0 0 0 0 0))) :lchan (quote ((1) (1 1) (1 1) (1 1) (1) (1 1 1 1) (1 1 1) (1 1 1) (1 1 1 1 1) (1 1) (1) (1) (1 1 1 1 1 1 1 1) (1) (1) (1 1) (1) (1 1 1) (1 1 1 1 1) (1) (1 1 1 1) (1 1) (1) (1) (1) (1 1 1 1) (1 1 1) (1) (1 1 1 1 1 1 1) (1) (1 1) (1) (1 1) (1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0) (0 0) (0 0) (0 0) (0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0 0) (0 0) (0) (0) (0 0 0 0 0 0 0 0) (0) (0) (0 0) (0) (0 0 0) (0 0 0 0 0) (0) (0 0 0 0) (0 0) (0) (0) (0) (0 0 0 0) (0 0 0) (0) (0 0 0 0 0 0 0) (0) (0 0) (0) (0 0) (0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.01 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((11) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.01 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((12) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.01 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 8 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 381/100 nil 1000 0 (om-make-point 1017 289) (om-make-point 400 44) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "dragged 4" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 834 160) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((3948) (5084 7988) (7018 5884) (5486) (7716 7928 5066 7388) (7098) (7894) (4376 8930) (6844) (5876) (5116) (7716 7928 5066 7388) (6946) (5244) (3570) (5042) (5084 7988) (7018 5884) (8008 5934) (5034 5810) (4818 6778) (4112) (7788 7606 3952 8194) (6032) (7098))) :lonset (quote (0 0 0 0 0 0 0 144 144 288 288 288 288 433 433 577 577 577 577 721 721 865 865 1010 1154 2308)) :ldur (quote ((385) (144 144) (577 577) (288) (433 433 433 433) (288) (144) (144 144) (144) (144) (288) (865 865 865 865) (433) (144) (144) (144) (577 577) (577 577) (288 288) (288 288) (144 144) (288) (288 288 288 288) (144) (1154))) :lvel (quote ((53) (52 51) (51 51) (52) (51 51 52 51) (51) (51) (56 51) (52) (51) (52) (51 51 52 51) (51) (52) (53) (52) (52 51) (51 51) (51 51) (51 52) (53 51) (67) (51 51 58 51) (53) (51))) :loffset (quote ((0) (0 0) (0 0) (0) (0 0 0 0) (0) (0) (0 0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0 0 0) (0) (0))) :lchan (quote ((1) (1 1) (1 1) (1) (1 1 1 1) (1) (1) (1 1) (1) (1) (1) (1 1 1 1) (1) (1) (1) (1) (1 1) (1 1) (1 1) (1 1) (1 1) (1) (1 1 1 1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0 0) (0 0) (0) (0 0 0 0) (0) (0) (0 0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0 0 0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 8 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "dragged 3" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 972 8) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5982 7134) (4890 5774 7642) (7878 6834 7632) (7538 6286) (8510 4804 7374 8328) (5902) (5500) (7454 6300) (5212) (5496 6630) (7030 3148) (5854) (3740 6740 2860 7278))) :lonset (quote (0 0 144 165 288 433 495 577 659 721 824 989 1010 1154)) :ldur (quote ((144 144) (165 165 165) (144 144 144) (330 330) (144 144 144 144) (144) (165) (144 144) (165) (288 288) (165 165) (165) (144 144 144 144))) :lvel (quote ((53 53) (51 51 51) (51 54 51) (53 52) (51 52 51 51) (52) (52) (51 52) (52) (56 52) (64 53) (52) (63 54 55 52))) :loffset (quote ((0 0) (0 0 0) (0 0 0) (0 0) (0 0 0 0) (0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0 0 0))) :lchan (quote ((1 1) (1 1 1) (1 1 1) (1 1) (1 1 1 1) (1) (1) (1 1) (1) (1 1) (1 1) (1) (1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0) (0 0 0) (0 0 0) (0 0) (0 0 0 0) (0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 8 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "dragged 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 982 92) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8340 9322 8984) (9070 8774) (8630 8866 9188) (9154 8932) (8610 8800) (8340 9322 8984) (9070 8774) (8630 8866 9188) (8630 8866 9188))) :lonset (quote (0 0 0 192 385 659 659 659 3462 4616)) :ldur (quote ((192 192 192) (659 659) (659 659 659) (192 192) (577 577) (495 495 495) (495 495) (495 495 495) (1154 1154 1154))) :lvel (quote ((51 51 64) (54 52) (51 52 51) (51 127) (50 51) (51 51 64) (54 52) (51 52 51) (51 52 51))) :loffset (quote ((0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0 0))) :lchan (quote ((1 1 1) (1 1) (1 1 1) (1 1) (1 1) (1 1 1) (1 1) (1 1 1) (1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.01 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 8 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 698 535) (om-make-point 400 44) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "dragged" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 827 0) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4892) (8528 5220) (6014 7472 8754 4058) (2798 4594 7462) (5358) (4444) (7624 6926) (4958) (8528 5220) (7414 7862 8942) (6064) (7154))) :lonset (quote (0 0 0 165 192 385 495 577 659 659 769 962 1154)) :ldur (quote ((192) (385 385) (165 165 165 165) (330 330 330) (385) (192) (165 165) (192) (495 495) (495 495 495) (192) (192))) :lvel (quote ((51) (56 51) (52 52 52 89) (52 52 51) (51) (55) (51 51) (52) (56 51) (52 51 51) (51) (51))) :loffset (quote ((0) (0 0) (0 0 0 0) (0 0 0) (0) (0) (0 0) (0) (0 0) (0 0 0) (0) (0))) :lchan (quote ((1) (1 1) (1 1 1 1) (1 1 1) (1) (1) (1 1) (1) (1 1) (1 1 1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0 0) (0 0 0 0) (0 0 0) (0) (0) (0 0) (0) (0 0) (0 0 0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.01 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 8 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 82/25 nil 1000 0 (om-make-point 740 329) (om-make-point 400 44) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 536 256) (om-make-point 130 70) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (43 (((4 4) ((1 (-1 4 1.0)) (1 (1.0 3 3)) (1 (4.0 1 1)) (1 (1 1 1 1 1 1)))) ((4 4) ((1 (1.0 1 1 1 2 2)) (1 (3.0 4)) (1 (4.0 1.0 1)) (1 (1 1 1 1 1 1 2)))) ((4 4) ((1 (1.0 1 1 1 1 1)) (1 (1 1 1 2 1)) (1 (4.0 1.0 1 1 1)) (1 (1 1 2 3 1)))) ((4 4) ((1 (2.0 3 1 2)) (1 (1 1 1 2 1)) (1 (1.0 1 3 1)) (1 (3 2 1 1 1)))) ((4 4) ((1 (1.0 3 1 1 2)) (1 (1.0 1 3 1 1)) (1 (2.0 1 1 3)) (1 (1 2 1 3)))) ((4 4) ((1 (2.0 1 1 1 1)) (1 (1 2 1 1 1)) (1 (1 3 2 1)) (1 (1 1 2)))) ((4 4) ((1 (6 1 1)) (1 (3.0 2 1 1)) (1 (1.0 1 1 1 3)) 1.0)) ((4 4) ((1 (4.0 3)) (1 (4.0 3)) (1 (1.0 1 3 1)) (1 (1 3 1 1 1 1)))) ((4 4) ((1 (1.0 6 1)) (1 (1.0 1 2 1 3)) (1 (3.0 4)) (1 (1 1)))) ((4 4) ((1 (1.0 3)) (1 (1 1 2 1 1)) (1 (1 2 1 1 1 1)) (1 (1 1 1 1 1 2 1)))) ((4 4) ((1 (1 2 3 1 1)) (1 (2.0 3 2)) (1 (1 1 1 1 2)) (1 (1 1 2 2)))) ((4 4) ((1 (1 1 3 1 2)) 1 (1 (1.0 3)) (1 (3.0 1 2 2)))) ((4 4) ((1 (1 1 2)) (1 (1.0 1)) (1 (1.0 1 1 1 1 2 1)) (1 (1 2)))) ((4 4) ((1 (1.0 1 1 1 1 1)) (1 (1 1 3 1 1 1)) (1 (1 1 1 1 1 1)) (1 (2.0 4 1.0)))) ((4 4) ((1 (1.0 1 1 1 1 1)) (1 (1 1 1 2 3)) (1 (1.0 4 3)) (1 (2.0 1)))) ((4 4) ((1 (1.0 1 6)) (1 (3 2 1)) (1 (1 1 1 3)) (1 (1 2 1)))) ((4 4) ((1 (1 1 1 1 1 1)) (1 (1.0 1 4 2)) (1 (1 1 4)) (1 (1.0 2 3)))) ((4 4) ((1 (1 2 1)) 1 (1 (1.0 2)) 1.0)) ((4 4) ((1 (1.0 1)) 2.0 (1 (1.0 3 4)))) ((4 4) (4.0)) ((4 4) ((1 (3.0 1)) (1 (1 1)) (1 (1.0 2 3 2)) (1 (3 4 1.0)))) ((4 4) (1 (1 (1.0 4 1.0)) (1 (1.0 4 1.0)) (1 (2.0 1 1 1 2)))) ((4 4) ((1 (1.0 2 1 1 1 1 1)) (1 (3 1 1 1 1)) (1 (1.0 2 1 2 1)) (1 (2 2 1 1 1 1)))) ((4 4) ((1 (1 1 1 1 2 1)) (1 (1.0 3 1 1 1)) (1 (1 1 1 1 1 1 1 1)) (1 (1 2 1 1 1 1 1)))) ((4 4) ((1 (1 1 1 1 1 1 1 1)) (1 (1 1 1 1 1 2 1)) (1 (1 1 2 1 1 1)) (1 (1 2 1 2 1 1)))) ((4 4) ((1 (1 1 1 1 1 1)) (1 (1 1 1 1 1 1 1 1)) (1 (1.0 4 1 1 1)) (1 (2 3 1 1 1)))) ((4 4) ((1 (1 1 2 3 1)) (1 (1.0 1 2 1 1)) (1 (1 2 3 2)) (1 (1.0 2 1)))) ((4 4) ((1 (1.0 2 1 3)) (1 (2 1 1 1 1)) (1 (1 2 1 1 1)) (1 (1 2 1 2 2)))) ((4 4) ((1 (1.0 1 2 1 2 1)) (1 (3.0 1 1 1)) (1 (1 7)) 1.0)) ((4 4) (2.0 (1 (1 1 2)) 1.0)) ((4 4) (4.0)) ((4 4) (2.0 (1 (1.0 3)) 1.0)) ((4 4) ((1 (4.0 1.0 2 1)) (1 (1.0 2)) (1 (1.0 3 3 1)) (1 (1.0 2 3 2)))) ((4 4) ((1 (4.0 1.0 1)) (1 (3.0 3 2)) (1 (1.0 3)) (1 (2.0 1 1 2)))) ((4 4) ((1 (2 1 1 1 1)) (1 (2.0 1 2 1 2)) (1 (1 1 1 1 1 1 1 1)) (1 (2 1 1)))) ((4 4) ((1 (3 2 1 1 1)) (1 (1 1 4)) 1.0 (1 (4.0 1.0 2 1)))) ((4 4) ((1 (1 3 2 2)) (1 (1.0 3 2 2)) (1 (1.0 3)) (1 (1 3 3)))) ((4 4) ((1 (1.0 4 1.0)) (1 (2.0 1 1 1 1 1 1)) (1 (1 1 1 3 2)) 1.0)) ((4 4) (4.0)) ((4 4) (1.0 (1 (4.0 2 1)) (1 (1.0 3)) (1 (4.0 1.0 1 2)))) ((4 4) ((1 (1.0 1 4)) 1 (1 (2.0 1 1 1 1)) 1.0)) ((4 4) ((1 (1.0 2 3)) (1 (2.0 1 2 2)) (1 (4.0 1.0 2)) 1.0)) ((4 4) ((1 (2.0 1 1)) (1 (3.0 4 1)) (1 (2 1 1 2)) (1 (1.0 4 1.0 2))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8546)) :ldur (quote (769)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8878 7532)) :ldur (quote (495 495)) :lvel (quote (60 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5588)) :ldur (quote (495)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3742)) :ldur (quote (192)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2320 3882)) :ldur (quote (192 192)) :lvel (quote (50 52)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6058)) :ldur (quote (192)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7074 5696)) :ldur (quote (192 192)) :lvel (quote (94 80)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5292 8044 3672)) :ldur (quote (192 192 192)) :lvel (quote (51 50 52)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8782)) :ldur (quote (192)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6868)) :ldur (quote (192)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7290)) :ldur (quote (192)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5950)) :ldur (quote (144)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7786)) :ldur (quote (144)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4564)) :ldur (quote (144)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6846 3562)) :ldur (quote (288 288)) :lvel (quote (52 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9598 5278 6580)) :ldur (quote (288 288 288)) :lvel (quote (51 52 52)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9230)) :ldur (quote (659)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6416 8706)) :ldur (quote (192 192)) :lvel (quote (51 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6708 8496 9162 9554 7438)) :ldur (quote (144 144 144 144 144)) :lvel (quote (51 52 51 52 51)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8706)) :ldur (quote (144)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6014 6598 9376 6588 7294 7734 8136 8320)) :ldur (quote (144 144 144 144 144 144 144 144)) :lvel (quote (51 51 50 53 51 51 52 51)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6834)) :ldur (quote (144)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7894 5210 2948)) :ldur (quote (144 144 144)) :lvel (quote (51 53 54)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5984 6536)) :ldur (quote (144 144)) :lvel (quote (53 52)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8630 7522 8268)) :ldur (quote (288 288 288)) :lvel (quote (51 52 51)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6792 7442)) :ldur (quote (192 192)) :lvel (quote (51 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5248 7112 7258)) :ldur (quote (192 192 192)) :lvel (quote (53 53 51)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4480 6412)) :ldur (quote (192 192)) :lvel (quote (52 53)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8662)) :ldur (quote (192)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200 6834 3828)) :ldur (quote (192 192 192)) :lvel (quote (55 51 53)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7542 5978)) :ldur (quote (192 192)) :lvel (quote (53 52)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8938)) :ldur (quote (192)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7594)) :ldur (quote (192)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8730 5990)) :ldur (quote (385 385)) :lvel (quote (51 52)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7476)) :ldur (quote (192)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3818 6210)) :ldur (quote (144 144)) :lvel (quote (54 52)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4940)) :ldur (quote (144)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2534 7776)) :ldur (quote (144 144)) :lvel (quote (51 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5844)) :ldur (quote (144)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2610 6236)) :ldur (quote (144 144)) :lvel (quote (52 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4496 6782)) :ldur (quote (288 288)) :lvel (quote (52 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7656)) :ldur (quote (433)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6510 7282)) :ldur (quote (144 144)) :lvel (quote (51 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6972)) :ldur (quote (433)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5894)) :ldur (quote (144)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2370)) :ldur (quote (288)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6014)) :ldur (quote (192)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5926)) :ldur (quote (192)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (192)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7524)) :ldur (quote (385)) :lvel (quote (54)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3762)) :ldur (quote (192)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8392)) :ldur (quote (192)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4116)) :ldur (quote (577)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8362)) :ldur (quote (192)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7586 3746)) :ldur (quote (433 433)) :lvel (quote (52 52)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7586)) :ldur (quote (288)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5952 4354)) :ldur (quote (144 144)) :lvel (quote (51 52)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5070 5938)) :ldur (quote (144 144)) :lvel (quote (51 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4620)) :ldur (quote (144)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6960 7648)) :ldur (quote (433 433)) :lvel (quote (53 52)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7634)) :ldur (quote (144)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2966)) :ldur (quote (144)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5960)) :ldur (quote (288)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7210)) :ldur (quote (165)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7164 3314)) :ldur (quote (495 495)) :lvel (quote (51 52)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5064)) :ldur (quote (165)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7454)) :ldur (quote (165)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6202)) :ldur (quote (165)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7608)) :ldur (quote (165)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7414 7862 8942)) :ldur (quote (495 495 495)) :lvel (quote (52 51 51)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6014 7472 8754 4058)) :ldur (quote (165 165 165 165)) :lvel (quote (52 52 52 89)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2798 4594 7462)) :ldur (quote (330 330 330)) :lvel (quote (52 52 51)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7624 6926)) :ldur (quote (165 165)) :lvel (quote (51 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8528 5220)) :ldur (quote (495 495)) :lvel (quote (56 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4444)) :ldur (quote (192)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4958)) :ldur (quote (192)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6064)) :ldur (quote (192)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7154)) :ldur (quote (192)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4892)) :ldur (quote (192)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5358)) :ldur (quote (385)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6108)) :ldur (quote (192)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4898 2968)) :ldur (quote (192 192)) :lvel (quote (51 52)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9350)) :ldur (quote (192)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8634 8364)) :ldur (quote (165 165)) :lvel (quote (51 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7388)) :ldur (quote (495)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2444)) :ldur (quote (330)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8776)) :ldur (quote (165)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9522 5750)) :ldur (quote (288 288)) :lvel (quote (50 52)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5162)) :ldur (quote (288)) :lvel (quote (54)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9020 6538 5934)) :ldur (quote (577 577 577)) :lvel (quote (50 51 53)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8186 4748 8454)) :ldur (quote (865 865 865)) :lvel (quote (51 57 53)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2922)) :ldur (quote (144)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8934 9144)) :ldur (quote (144 144)) :lvel (quote (63 52)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6898 6376)) :ldur (quote (330 330)) :lvel (quote (52 50)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5852)) :ldur (quote (165)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8708)) :ldur (quote (165)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6574 7958)) :ldur (quote (165 165)) :lvel (quote (51 50)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8980)) :ldur (quote (165)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2978)) :ldur (quote (165)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8630 8866 9188)) :ldur (quote (495 495 495)) :lvel (quote (51 52 51)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9070 8774)) :ldur (quote (495 495)) :lvel (quote (54 52)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8340 9322 8984)) :ldur (quote (495 495 495)) :lvel (quote (51 51 64)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9154 8932)) :ldur (quote (192 192)) :lvel (quote (51 127)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8610 8800)) :ldur (quote (577 577)) :lvel (quote (50 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2302)) :ldur (quote (192)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1188)) :ldur (quote (144)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8850)) :ldur (quote (433)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9622)) :ldur (quote (144)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9142 6320 6072 5498 9188 8684 9074)) :ldur (quote (144 144 144 144 144 144 144)) :lvel (quote (51 51 56 56 51 53 52)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8882 9042 1866 8990)) :ldur (quote (144 144 144 144)) :lvel (quote (52 51 62 52)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5260)) :ldur (quote (144)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5964)) :ldur (quote (865)) :lvel (quote (54)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6710)) :ldur (quote (144)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7234 7104)) :ldur (quote (144 144)) :lvel (quote (51 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8250 2388)) :ldur (quote (288 288)) :lvel (quote (51 54)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5120)) :ldur (quote (144)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2046)) :ldur (quote (433)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8772)) :ldur (quote (659)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6028)) :ldur (quote (577)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8968)) :ldur (quote (577)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6046)) :ldur (quote (865)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6934)) :ldur (quote (192)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250 8510)) :ldur (quote (192 192)) :lvel (quote (51 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5276 8188)) :ldur (quote (385 385)) :lvel (quote (51 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7606)) :ldur (quote (192)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2628)) :ldur (quote (192)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4890 5774 7642)) :ldur (quote (165 165 165)) :lvel (quote (51 51 51)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7538 6286)) :ldur (quote (330 330)) :lvel (quote (53 52)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (165)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5212)) :ldur (quote (165)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7030 3148)) :ldur (quote (165 165)) :lvel (quote (64 53)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5854)) :ldur (quote (165)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5982 7134)) :ldur (quote (144 144)) :lvel (quote (53 53)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7878 6834 7632)) :ldur (quote (144 144 144)) :lvel (quote (51 54 51)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8510 4804 7374 8328)) :ldur (quote (144 144 144 144)) :lvel (quote (51 52 51 51)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5902)) :ldur (quote (144)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7454 6300)) :ldur (quote (144 144)) :lvel (quote (51 52)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5496 6630)) :ldur (quote (288 288)) :lvel (quote (56 52)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3740 6740 2860 7278)) :ldur (quote (144 144 144 144)) :lvel (quote (63 54 55 52)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7124)) :ldur (quote (144)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6790 6006 8866)) :ldur (quote (288 288 288)) :lvel (quote (51 51 51)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5040)) :ldur (quote (433)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8446)) :ldur (quote (144)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1864)) :ldur (quote (144)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3698 9000)) :ldur (quote (495 495)) :lvel (quote (57 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4844 2430)) :ldur (quote (330 330)) :lvel (quote (52 52)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8522 5850)) :ldur (quote (192 192)) :lvel (quote (50 52)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8704 5220)) :ldur (quote (192 192)) :lvel (quote (51 52)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4906)) :ldur (quote (192)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2106)) :ldur (quote (192)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5924)) :ldur (quote (385)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7502)) :ldur (quote (192)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4976)) :ldur (quote (192)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5176)) :ldur (quote (385)) :lvel (quote (54)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2240 5968 8086)) :ldur (quote (385 385 385)) :lvel (quote (55 51 51)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7894)) :ldur (quote (144)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6844)) :ldur (quote (144)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6946)) :ldur (quote (433)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4818 6778)) :ldur (quote (144 144)) :lvel (quote (53 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7788 7606 3952 8194)) :ldur (quote (288 288 288 288)) :lvel (quote (51 51 58 51)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7098)) :ldur (quote (1154)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7716 7928 5066 7388)) :ldur (quote (865 865 865 865)) :lvel (quote (51 51 52 51)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3570)) :ldur (quote (144)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8008 5934)) :ldur (quote (288 288)) :lvel (quote (51 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4112)) :ldur (quote (288)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5486)) :ldur (quote (288)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5116)) :ldur (quote (288)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7018 5884)) :ldur (quote (577 577)) :lvel (quote (51 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5084 7988)) :ldur (quote (577 577)) :lvel (quote (52 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4376 8930)) :ldur (quote (144 144)) :lvel (quote (56 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5876)) :ldur (quote (144)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5244)) :ldur (quote (144)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5042)) :ldur (quote (144)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5034 5810)) :ldur (quote (288 288)) :lvel (quote (51 52)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6032)) :ldur (quote (144)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3948)) :ldur (quote (385)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (769)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7048)) :ldur (quote (192)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6188 6014 5442)) :ldur (quote (192 192 192)) :lvel (quote (52 51 58)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7532)) :ldur (quote (192)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4566)) :ldur (quote (192)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7312 6378)) :ldur (quote (192 192)) :lvel (quote (51 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5032)) :ldur (quote (144)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6218)) :ldur (quote (144)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7990)) :ldur (quote (433)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5940)) :ldur (quote (144)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6824)) :ldur (quote (144)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7694)) :ldur (quote (144)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4548)) :ldur (quote (192)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7120 8794)) :ldur (quote (192 192)) :lvel (quote (52 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5984 7274 6814)) :ldur (quote (192 192 192)) :lvel (quote (52 51 52)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8906 8622)) :ldur (quote (192 192)) :lvel (quote (69 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9164)) :ldur (quote (192)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7390 3608)) :ldur (quote (192 192)) :lvel (quote (51 52)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9552 8144 8494 9076 7198)) :ldur (quote (659 659 659 659 659)) :lvel (quote (51 51 52 51 51)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4904)) :ldur (quote (192)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9524 8980 6144 6690)) :ldur (quote (192 192 192 192)) :lvel (quote (51 51 51 52)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8046)) :ldur (quote (192)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8944 5918 8718 6292 9232 7228 9552)) :ldur (quote (192 192 192 192 192 192 192)) :lvel (quote (50 51 51 52 51 51 51)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9078)) :ldur (quote (192)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7314 8948 9274)) :ldur (quote (144 144 144)) :lvel (quote (53 53 51)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6846 5574 6750 7528 7808 8252 8592 8850)) :ldur (quote (144 144 144 144 144 144 144 144)) :lvel (quote (51 81 53 75 51 51 51 52)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6706 8668 9206)) :ldur (quote (144 144 144)) :lvel (quote (52 52 51)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8756 7244)) :ldur (quote (288 288)) :lvel (quote (51 52)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5708 9442 6516)) :ldur (quote (433 433 433)) :lvel (quote (53 52 51)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8452)) :ldur (quote (577)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000 7248 6380 6592)) :ldur (quote (433 433 433 433)) :lvel (quote (51 52 51 51)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7692)) :ldur (quote (385)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7408)) :ldur (quote (144)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7182)) :ldur (quote (865)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7082 3390)) :ldur (quote (577 577)) :lvel (quote (51 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5050)) :ldur (quote (385)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6092 6458)) :ldur (quote (192 192)) :lvel (quote (51 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5918 7910)) :ldur (quote (192 192)) :lvel (quote (51 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5962)) :ldur (quote (192)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5150)) :ldur (quote (192)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5044)) :ldur (quote (577)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6806 7094)) :ldur (quote (288 288)) :lvel (quote (52 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6150 7598)) :ldur (quote (577 577)) :lvel (quote (51 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7798)) :ldur (quote (288)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6972)) :ldur (quote (192)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3818)) :ldur (quote (192)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7482 6324)) :ldur (quote (192 192)) :lvel (quote (51 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (192)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6034)) :ldur (quote (192)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 4848)) :ldur (quote (192 192)) :lvel (quote (52 52)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3844 7258)) :ldur (quote (144 144)) :lvel (quote (51 50)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6118)) :ldur (quote (577)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6766 5040)) :ldur (quote (288 288)) :lvel (quote (51 53)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7118)) :ldur (quote (192)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4274 6030)) :ldur (quote (192 192)) :lvel (quote (51 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6648)) :ldur (quote (769)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6210)) :ldur (quote (385)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2880)) :ldur (quote (577)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4980)) :ldur (quote (288)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5854)) :ldur (quote (577)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3692)) :ldur (quote (288)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4390)) :ldur (quote (1154)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7074)) :ldur (quote (769)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (577)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7288)) :ldur (quote (433)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6016)) :ldur (quote (577)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5830)) :ldur (quote (288)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7354 4840)) :ldur (quote (577 577)) :lvel (quote (51 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3984)) :ldur (quote (577)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7454)) :ldur (quote (288)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5950)) :ldur (quote (433)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5476)) :ldur (quote (288)) :lvel (quote (54)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5784)) :ldur (quote (433)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7552)) :ldur (quote (577)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7580)) :ldur (quote (1154)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5980)) :ldur (quote (769)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7498)) :ldur (quote (769)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6082)) :ldur (quote (165)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7460 5138)) :ldur (quote (165 165)) :lvel (quote (51 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7620)) :ldur (quote (165)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7042)) :ldur (quote (330)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5802)) :ldur (quote (288)) :lvel (quote (54)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6310)) :ldur (quote (144)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5990)) :ldur (quote (144)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6152)) :ldur (quote (144)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3470 7988 8968 5120)) :ldur (quote (144 144 144 144)) :lvel (quote (54 51 55 51)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7506 8668 4938)) :ldur (quote (144 144 144)) :lvel (quote (51 51 52)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7190)) :ldur (quote (495)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4224 8532 1962 6138)) :ldur (quote (165 165 165 165)) :lvel (quote (53 51 52 51)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4282)) :ldur (quote (165)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6784 4756 7522)) :ldur (quote (165 165 165)) :lvel (quote (51 53 52)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8656 8110)) :ldur (quote (165 165)) :lvel (quote (52 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8080 8754)) :ldur (quote (330 330)) :lvel (quote (51 55)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7536)) :ldur (quote (165)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4640 8328)) :ldur (quote (330 330)) :lvel (quote (55 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6148 6626)) :ldur (quote (165 165)) :lvel (quote (51 52)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2130 7634 6510)) :ldur (quote (288 288 288)) :lvel (quote (56 52 51)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8796 7554)) :ldur (quote (288 288)) :lvel (quote (52 52)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7658 6990)) :ldur (quote (144 144)) :lvel (quote (51 89)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5954 5066)) :ldur (quote (144 144)) :lvel (quote (52 52)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4442)) :ldur (quote (144)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6344 3810 5014)) :ldur (quote (144 144 144)) :lvel (quote (52 60 53)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7216)) :ldur (quote (165)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6432)) :ldur (quote (165)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6130 9600 6746)) :ldur (quote (165 165 165)) :lvel (quote (55 51 51)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5118)) :ldur (quote (165)) :lvel (quote (54)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8068 8288 7762)) :ldur (quote (330 330 330)) :lvel (quote (52 52 58)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8104 6588)) :ldur (quote (165 165)) :lvel (quote (52 52)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7656 5116 8548 9206)) :ldur (quote (495 495 495 495)) :lvel (quote (51 54 58 53)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6048 7198)) :ldur (quote (165 165)) :lvel (quote (53 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8908)) :ldur (quote (165)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9438 7338 7868 6574)) :ldur (quote (165 165 165 165)) :lvel (quote (51 52 52 52)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5158 7180)) :ldur (quote (144 144)) :lvel (quote (52 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7186 8316 5898)) :ldur (quote (144 144 144)) :lvel (quote (51 52 53)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8448 9356 7350 9584)) :ldur (quote (144 144 144 144)) :lvel (quote (51 52 51 54)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8962 6348 8298 8024)) :ldur (quote (144 144 144 144)) :lvel (quote (51 51 53 52)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8356 8604)) :ldur (quote (144 144)) :lvel (quote (52 52)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9638 3902)) :ldur (quote (144 144)) :lvel (quote (51 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7246)) :ldur (quote (144)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9444)) :ldur (quote (144)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7730 8662 8588)) :ldur (quote (144 144 144)) :lvel (quote (58 51 52)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6856)) :ldur (quote (288)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8096 5962 8790 7518)) :ldur (quote (144 144 144 144)) :lvel (quote (60 52 52 61)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7214 9062 5928 6396 8158)) :ldur (quote (144 144 144 144 144)) :lvel (quote (53 52 60 53 53)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8258 6566 6074 8768)) :ldur (quote (144 144 144 144)) :lvel (quote (53 56 53 54)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6836 4840 7094 8482 5208 8002 7844 9486 9068)) :ldur (quote (144 144 144 144 144 144 144 144 144)) :lvel (quote (53 52 55 51 52 52 52 51 52)) :loffset (quote (0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7892 4556)) :ldur (quote (144 144)) :lvel (quote (52 53)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8644 6060 8344 8140 6728)) :ldur (quote (144 144 144 144 144)) :lvel (quote (51 52 51 54 52)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6294 4128 7622 8002 8530)) :ldur (quote (144 144 144 144 144)) :lvel (quote (54 54 52 52 57)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9582 7812)) :ldur (quote (144 144)) :lvel (quote (52 52)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9094)) :ldur (quote (144)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5970 8702)) :ldur (quote (144 144)) :lvel (quote (53 52)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4598 6786 8464)) :ldur (quote (144 144 144)) :lvel (quote (53 52 51)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5180 7414 6532 5990 7932)) :ldur (quote (144 144 144 144 144)) :lvel (quote (54 52 53 54 52)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6638 9094)) :ldur (quote (144 144)) :lvel (quote (52 54)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5196 8200 8662 6846)) :ldur (quote (144 144 144 144)) :lvel (quote (55 52 51 52)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4720 7354 7526 8436)) :ldur (quote (144 144 144 144)) :lvel (quote (53 52 52 51)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6456 7270)) :ldur (quote (144 144)) :lvel (quote (53 52)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7186 9148 6006 7640)) :ldur (quote (144 144 144 144)) :lvel (quote (51 51 54 52)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8904 7926)) :ldur (quote (144 144)) :lvel (quote (58 52)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6772 8454 8866)) :ldur (quote (288 288 288)) :lvel (quote (51 52 51)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200 9194 7934 9320)) :ldur (quote (144 144 144 144)) :lvel (quote (52 54 51 52)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8038 9474 9614 8470)) :ldur (quote (165 165 165 165)) :lvel (quote (52 51 51 52)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8480 9550)) :ldur (quote (165 165)) :lvel (quote (52 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4440 6218)) :ldur (quote (330 330)) :lvel (quote (51 52)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8090 8790 7576)) :ldur (quote (165 165 165)) :lvel (quote (54 52 52)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5050 6828)) :ldur (quote (165 165)) :lvel (quote (52 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8370 8608)) :ldur (quote (165 165)) :lvel (quote (51 52)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7678 7508)) :ldur (quote (144 144)) :lvel (quote (52 58)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4540 9094 3250)) :ldur (quote (288 288 288)) :lvel (quote (52 52 56)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6788 7412)) :ldur (quote (144 144)) :lvel (quote (52 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7830 6420)) :ldur (quote (288 288)) :lvel (quote (51 52)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6562 5090 7634 7994)) :ldur (quote (144 144 144 144)) :lvel (quote (53 53 51 52)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7220 4640)) :ldur (quote (144 144)) :lvel (quote (52 52)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4008 7144 8568 8150)) :ldur (quote (192 192 192 192)) :lvel (quote (53 55 52 53)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9048 5962 7722)) :ldur (quote (192 192 192)) :lvel (quote (51 52 52)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7160 8010)) :ldur (quote (192 192)) :lvel (quote (54 52)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3926 7152 7328 8414)) :ldur (quote (192 192 192 192)) :lvel (quote (53 53 52 52)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6848)) :ldur (quote (192)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7648 5012)) :ldur (quote (192 192)) :lvel (quote (52 52)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5852 7330 7170)) :ldur (quote (144 144 144)) :lvel (quote (56 51 52)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4356)) :ldur (quote (144)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8506)) :ldur (quote (144)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8376)) :ldur (quote (144)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6002 6568)) :ldur (quote (144 144)) :lvel (quote (51 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1870 8940)) :ldur (quote (144 144)) :lvel (quote (52 52)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7584)) :ldur (quote (144)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6316)) :ldur (quote (144)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3548)) :ldur (quote (577)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4684 7482)) :ldur (quote (144 144)) :lvel (quote (52 56)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6072)) :ldur (quote (144)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6826)) :ldur (quote (144)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8458 7632)) :ldur (quote (288 288)) :lvel (quote (52 53)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7302)) :ldur (quote (433)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8928 8578 5022)) :ldur (quote (144 144 144)) :lvel (quote (53 51 52)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800 6110 7892 8504)) :ldur (quote (144 144 144 144)) :lvel (quote (52 52 52 52)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7044 4448)) :ldur (quote (144 144)) :lvel (quote (53 52)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7770)) :ldur (quote (144)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6112)) :ldur (quote (144)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8942)) :ldur (quote (288)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5938 7194 8374)) :ldur (quote (433 433 433)) :lvel (quote (53 51 51)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3990)) :ldur (quote (144)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6384 4518 6578)) :ldur (quote (192 192 192)) :lvel (quote (52 51 51)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7518 8508)) :ldur (quote (385 385)) :lvel (quote (55 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6640)) :ldur (quote (192)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7492 7160)) :ldur (quote (192 192)) :lvel (quote (52 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3920)) :ldur (quote (144)) :lvel (quote (54)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5120)) :ldur (quote (288)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4480)) :ldur (quote (433)) :lvel (quote (54)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7134 5000)) :ldur (quote (288 288)) :lvel (quote (52 52)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8346 1920)) :ldur (quote (577 577)) :lvel (quote (51 52)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7446)) :ldur (quote (288)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7096)) :ldur (quote (330)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5980)) :ldur (quote (165)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4954 4440)) :ldur (quote (495 495)) :lvel (quote (52 53)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1908 5998)) :ldur (quote (385 385)) :lvel (quote (51 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3998 7688)) :ldur (quote (192 192)) :lvel (quote (73 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7682 8374)) :ldur (quote (192 192)) :lvel (quote (51 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7602 6844 8542)) :ldur (quote (192 192 192)) :lvel (quote (52 51 52)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6082)) :ldur (quote (192)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4450 8518)) :ldur (quote (192 192)) :lvel (quote (57 59)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7560)) :ldur (quote (385)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5946 2602)) :ldur (quote (192 192)) :lvel (quote (51 52)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8628 6634)) :ldur (quote (192 192)) :lvel (quote (51 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2660 5972)) :ldur (quote (192 192)) :lvel (quote (53 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1918)) :ldur (quote (144)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5864)) :ldur (quote (288)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4878 9316)) :ldur (quote (144 144)) :lvel (quote (51 50)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6366)) :ldur (quote (288)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6028)) :ldur (quote (288)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8234 4994)) :ldur (quote (144 144)) :lvel (quote (51 55)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7244 8638 3702)) :ldur (quote (288 288 288)) :lvel (quote (51 51 68)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8608 8496 9112 5222)) :ldur (quote (144 144 144 144)) :lvel (quote (53 65 53 54)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6038 8414)) :ldur (quote (288 288)) :lvel (quote (52 53)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8262)) :ldur (quote (144)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3822 8384 8758)) :ldur (quote (192 192 192)) :lvel (quote (77 53 51)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8496 9656)) :ldur (quote (192 192)) :lvel (quote (68 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5816 8604)) :ldur (quote (192 192)) :lvel (quote (54 52)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9092 2246)) :ldur (quote (144 144)) :lvel (quote (51 61)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8932 6050)) :ldur (quote (1010 1010)) :lvel (quote (97 52)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8434)) :ldur (quote (288)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (288)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8698)) :ldur (quote (577)) :lvel (quote (54)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9654)) :ldur (quote (865)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (288)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5106 9050)) :ldur (quote (144 144)) :lvel (quote (54 53)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9186 8758)) :ldur (quote (769 769)) :lvel (quote (51 52)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3798 8998 8864)) :ldur (quote (433 433 433)) :lvel (quote (80 54 54)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1854)) :ldur (quote (433)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5640)) :ldur (quote (144)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5220)) :ldur (quote (288)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6452 8994 8872 8544)) :ldur (quote (433 433 433 433)) :lvel (quote (50 55 56 51)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9074)) :ldur (quote (288)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8868 8670)) :ldur (quote (192 192)) :lvel (quote (51 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5086 1928)) :ldur (quote (433 433)) :lvel (quote (51 52)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6172)) :ldur (quote (288)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9104)) :ldur (quote (865)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2222 5028)) :ldur (quote (192 192)) :lvel (quote (70 52)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4168)) :ldur (quote (192)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4828)) :ldur (quote (385)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3962)) :ldur (quote (385)) :lvel (quote (54)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3282)) :ldur (quote (192)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4242)) :ldur (quote (192)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4970)) :ldur (quote (192)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4222)) :ldur (quote (192)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6328)) :ldur (quote (144)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4756)) :ldur (quote (288)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3490)) :ldur (quote (144)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4968)) :ldur (quote (288)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5054)) :ldur (quote (144)) :lvel (quote (54)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5034)) :ldur (quote (144)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3388 5568)) :ldur (quote (144 144)) :lvel (quote (63 53)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5728)) :ldur (quote (144)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5312)) :ldur (quote (144)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5020 3604 4210)) :ldur (quote (144 144 144)) :lvel (quote (55 62 70)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6034 5574)) :ldur (quote (144 144)) :lvel (quote (52 57)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5108 7594)) :ldur (quote (144 144)) :lvel (quote (54 50)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3712 5482)) :ldur (quote (577 577)) :lvel (quote (63 56)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6056)) :ldur (quote (288)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4888)) :ldur (quote (288)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6292)) :ldur (quote (433)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5476)) :ldur (quote (288)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4910)) :ldur (quote (144)) :lvel (quote (54)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3412)) :ldur (quote (144)) :lvel (quote (62)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5064 7018 5482 5972)) :ldur (quote (144 144 144 144)) :lvel (quote (54 53 54 52)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6916)) :ldur (quote (192)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4482)) :ldur (quote (192)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5448 6360)) :ldur (quote (769 769)) :lvel (quote (54 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7376 6738 4348)) :ldur (quote (288 288 288)) :lvel (quote (51 55 57)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6218 5958 6984)) :ldur (quote (144 144 144)) :lvel (quote (52 52 73)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7162 6546 7442)) :ldur (quote (144 144 144)) :lvel (quote (56 52 51)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4812 8354 8116)) :ldur (quote (433 433 433)) :lvel (quote (53 50 55)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8828 5946 8246 8954 8948 4110)) :ldur (quote (288 288 288 288 288 288)) :lvel (quote (51 53 57 51 51 56)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4574 7734 5612)) :ldur (quote (288 288 288)) :lvel (quote (54 51 51)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5652)) :ldur (quote (433)) :lvel (quote (59)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5760 3690)) :ldur (quote (288 288)) :lvel (quote (56 58)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6354)) :ldur (quote (288)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6156 6664)) :ldur (quote (865 865)) :lvel (quote (53 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6850 3718 4872)) :ldur (quote (165 165 165)) :lvel (quote (54 57 55)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4294)) :ldur (quote (495)) :lvel (quote (57)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5304 6896 6162)) :ldur (quote (495 495 495)) :lvel (quote (54 53 53)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4168)) :ldur (quote (769)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4890 6928 7496)) :ldur (quote (144 144 144)) :lvel (quote (53 92 51)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8014 7666 7706 8210)) :ldur (quote (144 144 144 144)) :lvel (quote (50 51 52 52)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8842 8902 9166 9496 7158 8334 5268 8500 7848)) :ldur (quote (144 144 144 144 144 144 144 144 144)) :lvel (quote (52 73 50 50 53 52 51 50 50)) :loffset (quote (0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8544 8604 9378 6706 8246 9422)) :ldur (quote (144 144 144 144 144 144)) :lvel (quote (51 51 52 51 53 51)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7272)) :ldur (quote (144)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (144)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6292 5710 7290)) :ldur (quote (144 144 144)) :lvel (quote (52 72 52)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4570)) :ldur (quote (144)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6212 7134)) :ldur (quote (144 144)) :lvel (quote (52 52)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5942 7188)) :ldur (quote (433 433)) :lvel (quote (51 52)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7346 4480)) :ldur (quote (288 288)) :lvel (quote (51 52)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3728 7370)) :ldur (quote (330 330)) :lvel (quote (53 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5922)) :ldur (quote (165)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6992 4168)) :ldur (quote (865 865)) :lvel (quote (102 53)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5846 7790)) :ldur (quote (144 144)) :lvel (quote (52 50)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4458)) :ldur (quote (288)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5914)) :ldur (quote (192)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5840 3918)) :ldur (quote (769 769)) :lvel (quote (51 52)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6062)) :ldur (quote (1154)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8104)) :ldur (quote (192)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6378 8588 5100)) :ldur (quote (192 192 192)) :lvel (quote (52 53 52)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5020 8908 7672 9112)) :ldur (quote (192 192 192 192)) :lvel (quote (52 72 51 51)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8458)) :ldur (quote (192)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8040 8700 9094 4564 9586 4168)) :ldur (quote (385 385 385 385 385 385)) :lvel (quote (51 50 51 52 51 52)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9070 9364 8810)) :ldur (quote (577 577 577)) :lvel (quote (51 51 51)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7584 8626 9242)) :ldur (quote (165 165 165)) :lvel (quote (51 51 51)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8976 7668 9448 6808)) :ldur (quote (330 330 330 330)) :lvel (quote (51 51 51 51)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5892)) :ldur (quote (330)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7834 9562)) :ldur (quote (330 330)) :lvel (quote (51 51)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6348 9222 5904 9616)) :ldur (quote (288 288 288 288)) :lvel (quote (51 51 51 51)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7118)) :ldur (quote (288)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9666)) :ldur (quote (577)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5572)) :ldur (quote (144)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7244)) :ldur (quote (385)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6340)) :ldur (quote (192)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5936)) :ldur (quote (192)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6806)) :ldur (quote (385)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4860)) :ldur (quote (577)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8502)) :ldur (quote (288)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 52) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.01 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 8 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 386 83) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8546) (7532) (8878) (5588) (3742) (3882) (2320) (6058) (5696) (7074) (3672) (8044) (5292) (8782) (6868) (7290) (5950) (7786) (4564) (3562) (6846) (6580 5278) (9598) (9230) (8706) (6416) (7438) (9554) (9162 8496) (6708) (8706) (8320 8136 7734 7294 6588) (9376) (6598 6014) (6834) (2948) (5210) (7894) (6536) (5984) (8268) (7522) (8630) (7442) (6792) (7258) (7112 5248) (6412 4480) (8662) (3828) (6834) (6200) (5978) (7542) (8938) (7594) (5990) (8730) (7476) (6210 3818) (4940) (7776) (2534) (5844) (6236) (2610) (6782) (4496) (7656) (7282) (6510) (6972) (5894) (2370) (6014) (5926) (5888) (7524) (3762) (8392) (4116) (8362) (3746) (7586) (7586) (4354) (5952) (5938 5070) (4620) (7648) (6960) (7634) (2966) (5960) (7210) (3314) (7164) (5064) (7454) (6202) (7608) (8942 7862) (7414) (4058) (8754 7472) (6014) (7462) (4594) (2798) (6926) (7624) (5220) (8528) (4444) (4958) (6064) (7154) (4892) (5358) (6108) (2968) (4898) (9350) (8364) (8634) (7388) (2444) (8776) (5750) (9522) (5162) (5934) (6538) (9020) (8454 4748) (8186) (2922) (9144) (8934) (6376) (6898) (5852) (8708) (7958) (6574) (8980) (2978) (9188) (8866 8630) (8774) (9070) (8984) (9322) (8340) (8932) (9154) (8800) (8610) (2302) (1188) (8850) (9622) (9074) (8684) (9188 5498) (6072) (6320) (9142) (8990) (1866) (9042 8882) (5260) (5964) (6710) (7104) (7234) (2388) (8250) (5120) (2046) (8772) (6028) (8968) (6046) (6934) (8510 6250) (8188 5276) (7606) (2628) (7642) (5774) (4890) (6286) (7538) (5500) (5212) (3148) (7030) (5854) (7134) (5982) (7632 6834) (7878) (8328 7374) (4804) (8510) (5902) (6300) (7454) (6630) (5496) (7278 2860) (6740 3740) (7124) (8866 6006) (6790) (5040) (8446) (1864) (9000) (3698) (2430) (4844) (5850) (8522) (5220) (8704) (4906) (2106) (5924) (7502) (4976) (5176) (8086) (5968) (2240) (7894) (6844) (6946) (6778) (4818) (8194 3952) (7606) (7788) (7098) (7388) (5066) (7928) (7716) (3570) (5934) (8008) (4112) (5486) (5116) (5884) (7018) (7988) (5084) (8930) (4376) (5876) (5244) (5042) (5810) (5034) (6032) (3948) (7736) (7048) (5442) (6014) (6188) (7532) (4566) (6378) (7312) (5032) (6218) (7990) (5940) (6824) (7694) (4548) (8794) (7120) (6814) (7274 5984) (8622) (8906) (9164) (3508) (7390) (7198) (9076 8494 8144) (9552) (4904) (6690) (1944) (8980) (9524) (8046) (9552 7228) (9232 6292) (8718 5918) (8944) (9078) (9274) (8948 7314) (8850) (8592 8252 7808 7528) (6750 5574) (1946) (9206) (8668) (6706) (7244) (8756) (6516) (9442) (5708) (8452) (6592 6380) (7248) (9000) (7692) (7408) (7182) (3390) (7082) (5050) (6458) (6092) (7910 5918) (5962) (5150) (5044) (7094) (6806) (7598) (6150) (7798) (6972) (3818) (6324) (7482) (4232) (6034) (4848) (6000) (7258) (3844) (6118) (5040) (6766) (7118) (6030) (4274) (6648) (6210) (2880) (4980) (5854) (3692) (4390) (7074) (5900) (7288) (6016) (5830) (4840) (7354) (3984) (7454) (5950) (5476) (5784) (7552) (7580) (5980) (7498) (6082) (5138) (7460) (7620) (7042) (5802) (6310) (5990) (6152) (5120) (8968 7988) (3470) (4938) (8668) (7506) (7190) (6138 1962) (8532) (4224) (4282) (7522) (4756) (6784) (8110) (8656) (8754 8080) (7536) (8328) (4640) (6626) (6148) (6510) (7634) (2130) (7554) (8796) (6990) (7658) (5066) (5954) (4442) (5014) (3810) (6344) (7216) (6432) (6746) (9600 6130) (5118) (7762) (8288) (8068) (6588) (8104) (9206) (8548) (5116) (7656) (7198) (6048) (8908) (6574) (7868 7338) (9438) (7180) (5158) (5898) (8316 7186) (9584 7350) (9356) (8448) (8024) (8298 6348) (8962) (8604 8356) (3902) (9638) (7246) (9444) (8588) (8662) (7730) (6856) (7518) (8790) (5962) (8096) (8158) (6396 3128) (9062 7214) (8768) (1174) (6566) (8258) (9068) (9486 7844) (8002 5208) (8482 7094 4840) (6836) (4556) (7892) (6728) (8140) (8344 1160) (8644) (8530 8002) (7622 4128) (6294) (7812) (9582) (9094) (8702) (5970) (8464) (6786) (4598) (7932) (5990) (6532) (7414) (5180) (9094) (6638) (6846) (8662) (8200 5196) (8436 7526) (7354) (4720) (7270) (6456) (7640) (6006) (9148 7186) (7926) (8904) (8866) (8454 6772) (9320 7934) (9194) (8200) (8470) (9614 9474 8038) (9550) (8480) (6218) (4440) (7576) (8790) (8090) (6828) (5050) (8608) (8370) (7508) (7678) (3250) (9094) (4540) (7412) (6788) (6420) (7830) (7994 7634) (5090) (6562) (4640) (7220) (8150) (8568 7144 4008) (7722) (5962) (9048) (8010) (7160) (8414) (7328 7152 3926) (6848) (5012) (7648) (7170) (7330) (5852) (4356) (8506) (8376) (6568) (6002) (8940) (1870) (7584) (6316) (3548) (7482) (4684) (6072) (6826) (7632) (8458) (7302) (5022) (8578) (8928) (8504 7892) (6110) (7800) (4448) (7044) (7770) (6112) (8942) (8374) (7194) (5938) (3990) (6578 4518) (6384) (8508) (7518) (6640) (7160) (7492) (3920) (5120) (4480) (5000) (7134) (1920) (8346) (7446) (7096) (5980) (4440) (4954) (5998) (1908) (7688) (3998) (8374) (7682) (8542) (6844) (7602) (6082) (8518) (4450) (7560) (2602) (5946) (6634) (8628) (5972) (2660) (1918) (5864) (9316) (4878) (6366) (6028) (4994) (8234) (3702) (8638) (7244) (5222) (9112 8496) (8608) (8414) (6038) (8262) (8758) (8384 3822) (9656) (8496) (8604) (5816) (2246) (9092) (6050) (8932) (8434) (5000) (8698) (9654) (6100) (9050 5106) (8758) (9186) (8864) (8998) (3798) (1854) (5640) (5220) (8544) (8872) (8994 6452) (9074) (8670) (8868) (1928) (5086) (6172) (9104) (5028) (2222) (4168) (4828) (3962) (3282) (4242) (4970) (4222) (6328) (4756) (3490) (4968) (5054) (5034) (5568) (3388) (5728) (5312) (4210) (3604) (5020) (5574) (6034) (7594) (5108) (5482) (3712) (6056) (4888) (6292) (5476) (4910) (3412) (5972) (5482) (7018) (5064) (6916) (4482) (6360) (5448) (4348) (6738) (7376) (6984) (5958) (6218) (7442) (6546) (7162) (8116) (8354) (4812) (4110) (8948) (8954 8246 5946) (8828) (5612) (7734) (4574) (5652) (3690) (5760) (6354) (6664) (6156) (4872) (3718) (6850) (4294) (6162) (6896) (5304) (4168) (7496) (6928) (4890) (8210 7706) (7666) (8014) (7848) (8500 5268) (8334) (7158) (9496 9166 8902) (8842) (9422 8246 6706) (9378) (8604) (8544) (7272) (6800) (7290) (5710) (6292) (4570) (7134) (6212) (7188) (5942) (4480) (7346) (7370) (3728) (5922) (4168) (6992) (7790) (5846) (4458) (5914) (3918) (5840) (6062) (8104) (5100) (8588) (6378) (9112 7672) (8908) (5020) (8458) (4168) (9586) (4564) (9094 8700) (8040) (8810) (9364) (9070) (9242) (8626) (7584) (6808) (9448) (7668) (8976) (5892) (9562) (7834) (9616 5904) (9222 6348) (7118) (9666) (5572) (7244) (6340) (5936) (6806) (4860) (8502) (8546) (5868) (8436) (8604) (8634 8408) (5990) (8550) (5800) (7520) (6278) (7450) (7616) (7494) (4908) (8504) (8584) (5908) (8546) (8446) (6024) (6194))) :lonset (quote (37 187 275 1362 1849 3086 3136 3249 3511 3573 3748 3761 3823 3861 3973 4123 4286 4398 4748 4910 4948 5023 5085 5148 5260 5310 5522 5560 5585 5610 6285 7884 7896 7934 8084 8284 8296 8334 8409 8421 8546 8559 8634 8671 8696 8784 8796 8946 9471 9596 9608 9621 9833 9858 9983 10183 10283 10295 10433 10570 10733 10983 11032 11345 12244 12319 12344 12357 12532 12707 12782 12857 13007 13306 13681 14094 14543 14693 15006 15231 15393 15555 15930 16005 16368 16617 16692 17055 17317 17754 17804 17967 18179 18292 18617 19029 19066 19129 19354 19804 19928 20441 20516 20566 20578 20641 21053 21065 21140 21290 21303 21390 21453 21890 22115 22377 22527 23514 23739 23839 24039 24077 24189 24426 24439 24864 25039 25201 25401 25476 25613 26026 26051 26113 26376 26438 26575 26938 26988 27088 27150 27637 28575 28699 28724 29387 29637 29899 29986 30099 30149 30349 30374 30411 30474 30499 30649 30661 32960 34097 34809 34959 35646 35659 35671 35684 35696 35709 35759 35771 35846 35909 36408 36521 36696 36771 36808 36896 36996 37970 38170 38308 38595 38820 39719 40419 40944 41806 42706 42856 42881 42893 43118 43205 43505 43655 43843 43868 44043 44380 44430 44505 44567 44605 44655 44680 44892 45055 45142 45180 45254 45279 45292 45454 45629 45667 45792 45992 46192 46316 46366 46629 46666 47004 47066 47191 47241 47653 48153 48466 48728 48853 49015 49228 49240 49303 49590 49827 50065 50440 50477 50714 50727 50802 50864 51102 51114 51127 51139 51452 51627 51664 51901 53326 54675 54825 54875 55050 55100 55337 55387 55450 55787 56100 57074 57162 57811 58036 58186 58311 58423 58448 58461 58636 58823 59248 59261 60235 60373 60523 60697 60922 61122 61347 61485 61497 61834 61872 62009 62084 62109 62259 62309 62484 62497 62509 62709 62859 62871 62884 62921 63021 63234 63246 63259 63321 63796 64833 64921 64971 64996 65008 65058 65120 65183 65195 65220 65283 65395 65408 65458 65520 65770 65820 65833 65933 66033 66207 66495 66520 67070 67657 67669 68844 69331 69506 70406 70905 70980 71355 71418 71455 71792 71980 72142 72155 72779 72879 73667 73679 73804 73879 74016 74279 74354 74429 74604 74641 74766 75091 75353 75878 76115 76378 76628 77515 77965 78489 78802 79401 79501 79551 79664 81176 83675 86698 87148 93183 93408 93533 93982 94794 95082 95119 95469 95719 96206 96869 98305 99430 100754 100817 100842 100867 100892 100917 101054 101229 101242 101254 101629 101916 101941 101979 102091 102141 102216 102316 102429 102454 102566 102616 102741 102803 102828 103191 103241 103428 103478 103528 103553 103628 104065 104128 104140 104328 104553 104802 104840 105052 105252 105277 105327 105577 105602 105727 105765 105789 105802 105827 105852 106027 106152 106177 106227 106264 106302 106477 106552 106577 106614 106664 106677 106702 106714 106789 107114 107164 107214 107489 107964 108013 108051 108076 108238 108288 108313 108326 108338 108376 108401 108438 108476 108488 108513 108563 108576 108601 108626 108638 108776 108851 108876 108926 108951 108963 108976 108988 109001 109200 109225 109313 109450 109513 109563 109588 109613 109825 109838 109850 109875 109888 110050 110075 110175 110200 110237 110287 110325 110375 110475 110537 110575 110625 110650 110700 110762 110825 110837 110950 111000 111037 111062 111075 111225 111250 111362 111387 111537 111562 111587 111637 111649 111774 111799 111899 111962 112112 112187 112199 112224 112262 112337 112349 112511 112524 112536 112711 112786 112874 112886 113011 113024 113086 113211 113236 113411 113424 113786 113886 113973 113998 114023 114061 114161 114311 114610 114823 114835 115148 115223 115285 115410 115548 115760 115822 115935 116110 116335 116410 116460 116572 116597 116647 116697 116722 116747 116822 116884 116984 117084 117297 117472 117522 117547 117572 117772 117797 118484 118571 118584 118721 118809 118834 119171 119546 119721 119808 119821 119883 119983 120145 120258 120645 120695 121033 121108 121320 121395 121582 121645 121895 121970 121982 122107 122307 122344 122469 122769 122819 123232 123319 123781 123806 124381 124743 125043 125081 125143 125256 125743 125830 125855 125905 125918 126143 126205 126218 126368 126393 126580 126730 126780 126955 127017 127105 127130 127417 127442 127717 127742 127842 128004 128154 128529 128704 128917 129379 129429 129491 129516 129541 129741 129891 130191 131016 131041 131103 131153 131315 131390 131465 131490 131690 136151 136426 136463 136650 145634 148483 148733 149232 150182 150569 151069 151244 151631 152006 153280 153918 154330 154392 154880 156129 156292 156317 156342 156504 156566 156891 156954 156991 157066 157304 157429 157691 157866 158353 158528 158753 158778 158828 158840 158978 159240 159378 159428 159578 159603 159665 159678 159715 159765 159815 159865 159877 159915 159940 159990 160077 160102 160115 160127 160202 160215 160252 160415 160989 161027 161164 161489 161577 161589 161614 161652 161977 162239 162251 162314 162451 162589 162614 162626 162714 162776 162801 162889 162926 162939 162951 162964 162976 163039 163051 163113 163126 165712 165987 166100 166125 166162 166275 166762 166774 167062 167074 167437 167499 167936 167949 168161 168698 168761 169611 169673 169773 170310 170985 171010 172197 172397 172572 172609 172647 172684 172697 172709 172784 172897 172909 172922 172947 172972 172997 173046 173084 173109 173171 173196 173246 173296 173309 173334 173384 173521 173546 173934 173946 181805 182130 182592 184191 184316 184779 184979 185828 187340 187502 187740 187840 189452 189864 190726 190763 190876 191201 192363 194449 194699 195386 195949 196099 196611 196736 196948 196961 197435 198110 202470)) :ldur (quote ((9596) (7921) (8983) (4336) (1399) (837) (912) (1424) (22515) (9071) (1512) (1799) (650) (1987) (1000) (1437) (1324) (5010) (4673) (1362) (612) (637 2974) (6147) (3224) (1050) (2674) (2624) (2386) (6010 2649) (2349) (2874) (875 3561 3798 500 5035) (4048) (725 512) (425) (887) (700) (812) (1587) (1224) (1299) (600) (3961) (950) (1199) (1462) (1599 762) (662 3486) (737) (975) (1449) (662) (512) (1599) (4823) (437) (850) (1724) (537) (700 4523) (1612) (10645) (1499) (487) (7634) (1025) (1000) (2674) (2149) (3311) (5423) (1987) (475) (500) (650) (700) (737) (1687) (587) (537) (1324) (512) (2724) (712) (6472) (587) (487) (1062 787) (1012) (750) (3936) (1524) (1162) (1474) (1262) (1637) (1162) (650) (500) (1149) (475) (3761 950) (562) (29574) (1374 412) (912) (2986) (1087) (2261) (4211) (3948) (537) (8684) (1412) (1524) (662) (4885) (625) (525) (2311) (1100) (525) (10495) (2424) (2149) (2261) (1574) (4485) (687) (4785) (11332) (1624) (4635) (4311) (900 587) (1887) (1050) (4048) (3561) (3461) (1050) (8034) (7709) (10520) (6460) (975) (1037) (575) (3261 500) (475) (562) (437) (1100) (13082) (6510) (4086) (5210) (2824) (1075) (1762) (1412) (1787) (1062) (1000) (700 1537) (887) (1212) (1862) (762) (600) (475 612) (2986) (2374) (7796) (600) (1462) (762) (1149) (425) (1649) (8671) (612) (10808) (6572) (2611) (5273 775) (3723 1937) (1412) (862) (1174) (675) (875) (1412) (1412) (1149) (2174) (1274) (3423) (850) (975) (575) (5035 600) (2261) (975 512) (625) (2549) (1025) (4336) (662) (500) (5797) (687 1187) (575 737) (437) (1899 2012) (1749) (1274) (937) (462) (1224) (1075) (1937) (1062) (1199) (1687) (437) (3186) (600) (900) (737) (1487) (1812) (5697) (4036) (1637) (15705) (1025) (725) (1187) (962) (750) (950 1374) (1000) (575) (3061) (1712) (1574) (1349) (775) (462) (562) (2936) (4910) (3823) (587) (737) (3798) (1824) (587) (5972) (3473) (475) (675) (837) (1637) (2599) (487) (4835) (3511) (10783) (7572) (1025) (3523) (6547) (2286) (3886) (3648) (2124) (625) (1987) (1187) (887) (3948) (475) (2249) (675) (775) (437 875) (3011) (3948) (2961) (550) (950) (587) (1599 5597 1237) (7272) (662) (487) (800) (900) (700) (8821) (2236 1762) (1599 3836) (1987 2836) (3736) (4773) (2386) (537 1137) (625) (1637 1862 737 2949) (2436 66507) (1199) (1324) (837) (537) (487) (1562) (437) (1087) (475) (937) (675 1149) (625) (537) (875) (787) (712) (2649) (450) (2149) (3523) (2299) (3661 487) (1662) (462) (2786) (1374) (2112) (825) (975) (2511) (10458) (1274) (2374) (11495) (1574) (1050) (825) (525) (1212) (962) (937) (575) (2174) (412) (612) (2062) (600) (2949) (925) (575) (1399) (1524) (3074) (762) (725) (1812) (1962) (612) (425) (600) (5185) (2012) (1762) (425) (662) (1824) (500) (850) (475) (1050) (700) (2949) (2112) (9008) (450) (4323) (1087) (2211) (425) (12732 4223) (950) (1312) (2561) (1112) (2249) (2211 1524) (2236) (412) (7259) (612) (987) (2449) (4111) (862) (3873 1000) (1187) (2611) (1224) (1637) (1662) (2137) (437) (4223) (5060) (712) (12944) (2349) (537) (912) (500) (1062) (3286) (5647) (1849) (712) (1687) (2736 2199) (950) (3661) (1499) (1237) (575) (2849) (5373) (3199) (937) (1037) (612) (762) (650) (487) (1100 637) (1249) (725) (2324) (850) (3773 875) (2686 1487) (8134) (812) (612) (825 525) (475) (462 512) (1087) (487) (2399) (1087) (962) (825) (5160) (562) (2374) (1562) (1199) (3723) (687) (525 3848) (787 2087) (3036) (450) (1637) (4960) (2486) (625 587) (462 475) (775 1562 1212) (987) (587) (937) (450) (950) (2974 425) (1287) (6535 700) (1137 2499) (3548) (700) (4535) (562) (2286) (512) (950) (837) (725) (1149) (475) (1199) (512) (625) (1412) (500) (662) (2961) (937 1474) (475 1712) (1387) (725) (662) (787) (987) (637) (1174 500) (637) (2049) (475) (475 575) (775 1787) (987) (675) (500) (712 6397 737) (1000) (1337) (3811) (775) (512) (2999) (5498) (612) (737) (887) (1787) (3998) (437) (3736) (1399) (487) (950) (2786) (675) (2274) (712 500) (1000) (1749) (1212) (462) (1237) (1237 537 550) (1274) (537) (3211) (962) (450) (487) (550 1237 675) (787) (2112) (825) (1762) (1025) (450) (1199) (1299) (1724) (2936) (712) (1974) (4398) (487) (6809) (1612) (3099) (950) (837) (5223) (2199) (475) (2311) (2674) (1774) (900) (787 1762) (512) (787) (987) (6135) (1712) (875) (5010) (1312) (1574) (1412) (2149) (812 1000) (2399) (3798) (4298) (612) (1412) (600) (3311) (500) (1199) (962) (500) (700) (1787) (425) (987) (775) (737) (4523) (700) (1224) (1724) (15418) (1962) (512) (3161) (1424) (512) (1524) (7659) (2724) (1349) (1075) (525) (7871) (4435) (675) (637) (2999) (550) (11895) (487) (1699) (1524) (2361) (5972) (887) (625) (1112) (525) (7609 575) (712) (437) (1124) (512) (10145) (912 987) (787) (500) (900) (637) (2399) (2411) (1075) (11520) (475) (875) (3274) (437) (1524) (2436 1337) (562) (2661) (1512) (1724) (737) (1624) (4785) (3723) (1512) (475) (1412 6872) (575) (3086) (3886) (3761) (4973) (4898) (787) (537) (39719) (12182) (475) (862) (475) (1524) (525) (5860) (6697) (425) (700) (1237) (725) (2162) (587) (462) (1937) (862) (3074) (525) (525) (4823) (887) (3536) (1562) (487) (412) (1787) (537) (462) (425) (512) (487) (762) (425) (900) (487) (687) (737) (462) (437) (587) (1612) (3249) (2224) (500) (1499) (737) (1112) (1224) (1299) (8271) (712) (1649) (3798) (625 887 475) (1062) (462) (3186) (825) (1312) (700) (2999) (1287) (825) (1100) (1000) (450) (1862) (900) (850) (437) (675) (7397) (3911) (8196) (800) (7559 475) (3861) (3623) (5972) (3761 5760) (537) (1025) (4148 2374 3611) (950) (4398 3423 5585) (3423) (912) (412) (1187) (1100) (2211) (11682) (725) (1174) (2149) (475) (862) (437) (487) (6759) (6522) (900) (412) (4061) (16455) (4248) (600) (1199) (425) (1949) (537) (1812) (1237) (2024) (5235) (1399) (1212 13306) (11607) (600) (11470) (425) (9008) (412) (10283 4673) (625) (1262) (2274) (950) (837) (9796) (837) (712) (2761) (4498) (925) (550) (550) (462) (3848 10408) (3886 500) (1887) (437) (19878) (737) (4760) (662) (6809) (1624) (8559) (3249) (850) (2461) (6834) (475 4061) (775) (4798) (562) (4261) (3923) (900) (662) (4598) (1974) (4111) (2599) (587) (850) (1674) (875) (1412))) :lvel (quote ((52) (51) (60) (56) (51) (52) (50) (51) (80) (94) (52) (50) (51) (50) (52) (50) (52) (53) (51) (51) (52) (52 52) (51) (51) (51) (51) (51) (52) (51 52) (51) (51) (51 52 51 51 53) (50) (51 51) (51) (54) (53) (51) (52) (53) (51) (52) (51) (51) (51) (51) (53 53) (53 52) (52) (53) (51) (55) (52) (53) (53) (51) (52) (51) (52) (52 54) (51) (51) (51) (52) (51) (52) (51) (52) (51) (51) (51) (53) (51) (51) (51) (53) (52) (54) (51) (51) (51) (51) (52) (52) (52) (52) (51) (51 51) (51) (52) (53) (51) (51) (51) (51) (52) (51) (51) (52) (51) (51) (51 51) (52) (89) (52 52) (52) (51) (52) (52) (51) (51) (51) (56) (55) (52) (51) (51) (51) (51) (51) (52) (51) (51) (51) (51) (51) (51) (51) (52) (50) (54) (53) (51) (50) (53 57) (51) (51) (52) (63) (50) (52) (52) (52) (50) (51) (52) (55) (51) (52 51) (52) (54) (64) (51) (51) (127) (51) (51) (50) (52) (53) (52) (50) (52) (53) (51 56) (56) (51) (51) (52) (62) (51 52) (55) (54) (51) (51) (51) (54) (51) (51) (51) (51) (52) (52) (57) (52) (51 51) (51 51) (51) (51) (51) (51) (51) (52) (53) (52) (52) (53) (64) (52) (53) (53) (51 54) (51) (51 51) (52) (51) (52) (52) (51) (52) (56) (52 55) (54 63) (57) (51 51) (51) (52) (51) (53) (51) (57) (52) (52) (52) (50) (52) (51) (51) (52) (51) (51) (51) (54) (51) (51) (55) (51) (52) (51) (51) (53) (51 58) (51) (51) (51) (51) (52) (51) (51) (53) (51) (51) (67) (52) (52) (51) (51) (51) (52) (51) (56) (51) (52) (52) (52) (51) (53) (53) (51) (85) (58) (51) (52) (53) (52) (51) (51) (51) (52) (51) (53) (52) (52) (51) (51) (52) (52) (51 52) (51) (69) (51) (52) (51) (51) (51 52 51) (51) (51) (52) (51) (51) (51) (51) (51 51) (51 52) (51 51) (50) (51) (51) (53 53) (52) (51 51 51 75) (53 81) (51) (51) (52) (52) (52) (51) (51) (52) (53) (51) (51 51) (52) (51) (51) (51) (51) (51) (51) (51) (51) (51) (51 51) (51) (52) (51) (51) (52) (51) (51) (51) (57) (51) (51) (51) (52) (52) (52) (52) (50) (51) (51) (53) (51) (51) (51) (51) (51) (51) (51) (51) (51) (51) (51) (51) (51) (51) (51) (51) (51) (51) (50) (51) (50) (54) (51) (52) (51) (52) (52) (51) (51) (51) (51) (50) (54) (50) (51) (51) (51) (55 51) (54) (52) (51) (51) (51) (51 52) (51) (53) (56) (52) (53) (51) (51) (52) (55 51) (53) (51) (55) (52) (51) (51) (52) (56) (52) (52) (89) (51) (52) (52) (57) (53) (60) (52) (51) (52) (51) (51 55) (54) (58) (52) (52) (52) (52) (53) (58) (54) (51) (51) (53) (52) (52) (52 52) (51) (51) (52) (53) (52 51) (54 51) (52) (51) (52) (53 51) (51) (52 52) (51) (51) (51) (52) (52) (51) (58) (52) (61) (52) (52) (60) (53) (53 60) (52 53) (54) (53) (56) (53) (52) (51 52) (52 52) (51 55 52) (53) (53) (52) (52) (54) (51 52) (51) (57 52) (52 54) (54) (52) (52) (52) (52) (53) (51) (52) (53) (52) (54) (53) (52) (54) (54) (52) (52) (51) (52 55) (51 52) (52) (53) (52) (53) (52) (54) (51 51) (52) (58) (51) (52 51) (52 51) (54) (52) (52) (51 51 52) (51) (52) (52) (51) (52) (52) (54) (51) (52) (52) (51) (58) (52) (56) (52) (52) (51) (52) (52) (51) (52 51) (53) (53) (52) (52) (53) (52 55 53) (52) (52) (51) (52) (54) (52) (52 53 53) (53) (52) (52) (52) (51) (56) (52) (51) (52) (51) (51) (52) (52) (52) (51) (53) (56) (52) (52) (52) (53) (52) (51) (52) (51) (53) (52 52) (52) (52) (52) (53) (51) (52) (51) (51) (51) (53) (52) (51 51) (52) (51) (55) (51) (51) (52) (54) (52) (54) (52) (52) (52) (51) (51) (52) (52) (53) (52) (51) (51) (51) (73) (51) (51) (52) (51) (52) (51) (59) (57) (52) (52) (51) (51) (51) (51) (53) (55) (52) (50) (51) (52) (52) (55) (51) (68) (51) (51) (54) (53 65) (53) (53) (52) (51) (51) (53 77) (51) (68) (52) (54) (61) (51) (52) (97) (50) (51) (54) (50) (52) (53 54) (52) (51) (54) (54) (80) (62) (52) (52) (51) (56) (55 50) (53) (51) (51) (52) (51) (50) (51) (52) (70) (55) (51) (54) (53) (55) (51) (71) (51) (52) (56) (53) (54) (55) (53) (63) (55) (56) (70) (62) (55) (57) (52) (50) (54) (56) (63) (52) (55) (51) (56) (54) (62) (52) (54) (53) (54) (52) (59) (51) (54) (57) (55) (51) (73) (52) (52) (51) (52) (56) (55) (50) (53) (56) (51) (51 57 53) (51) (51) (51) (54) (59) (58) (56) (52) (51) (53) (55) (57) (54) (57) (53) (53) (54) (52) (51) (92) (53) (52 52) (51) (50) (50) (50 51) (52) (53) (50 50 73) (52) (51 53 51) (52) (51) (51) (51) (52) (52) (72) (52) (51) (52) (52) (52) (51) (52) (51) (51) (53) (51) (53) (102) (50) (52) (53) (51) (52) (51) (52) (53) (52) (53) (52) (51 51) (72) (52) (51) (52) (51) (52) (51 50) (51) (51) (51) (51) (51) (51) (51) (51) (51) (51) (51) (51) (51) (51) (51 51) (51 51) (51) (50) (67) (51) (51) (51) (50) (50) (52) (54) (51) (51) (51) (52 51) (50) (51) (51) (53) (50) (51) (51) (51) (50) (52) (51) (52) (55) (51) (51) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0 0 0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0) (0 0 0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0 0) (0 0) (0 0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0 0 0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1 1 1 1 1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1 1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1 1 1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1 1) (1 1) (1) (1) (1) (1 1) (1) (1 1 1 1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1 1) (1 1) (1) (1) (1) (1 1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1 1) (1) (1) (1) (1) (1) (1 1) (1 1) (1 1 1) (1) (1) (1) (1) (1) (1 1) (1) (1 1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1 1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1 1) (1 1) (1) (1) (1) (1 1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1 1 1) (1) (1) (1) (1) (1) (1) (1 1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1 1) (1) (1) (1 1 1) (1) (1 1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0 0 0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0) (0 0 0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0 0) (0 0) (0 0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0 0 0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 8 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 1400 577) (om-make-point 400 44) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SDIF->CHORD-SEQ" (quote sdif->chord-seq) (quote ((om-load-inputfun (quote input-funbox) "SDIF file" "SELF" nil))) (om-make-point 216 139) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "no input mixer 3_2#02_1.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 267 16) (om-make-point 70 50) (let ((newobj (load-sdif-file (om-make-pathname :directory (quote (:absolute "Users" "samdvorin" "Downloads")) :device nil :host nil :name "no input mixer 3_2#02_1" :type "sdif")))) (when newobj) newobj) "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 400 500))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 1 nil 0) (2 0 1 0 nil 0) (10 1 2 0 nil 0) (6 1 2 1 nil 0) (7 1 2 2 nil 0) (5 1 2 3 nil 0) (8 1 2 4 nil 0) (9 1 2 5 nil 0) (4 1 2 6 nil 0) (12 0 11 0 nil 0) (13 0 12 0 nil 0) (14 0 13 0 nil 0))) nil 7.01))
