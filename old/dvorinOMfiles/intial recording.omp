; OM File Header - Saved 2023/02/15 12:03:15
; (6.19 :patc (om-make-point 10 10) (om-make-point 31 130) (om-make-point 1050 641) "" 183 0 "2022/06/27 15:32:15" "2022/07/11 21:14:28")
; End File Header
; External resources 
; (list (list (quote :sdif) "#P\"../../../audiosculpt/ChordSeqs/cello sketch 5 voices.sdif\"") (list (quote :sound) "#P\"../../../../../Downloads/Cello piece run through idea.wav\""))
(in-package :om)(load-lib-for (quote ("Repmus")))(setf *om-current-persistent* (om-load-patch1 "intial recording" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 124 122) (quote "trasrcibed up until after harmonic trill") "" (om-make-point 374 288) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 101 258) (om-make-point 195 96) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5594 5170) (5612 7516 6806) (4798 5998 6704) (4796 5998 5026) (4992 6900 6196) (4082 6490 5988) (4992 6900 6198) (6196 5494 6696) (5612 7516 8012) (4798 6000 7590) (5090 6294 6996) (5592 6294 6696) (4990 6900 6196) (4082 6490 5988) (7500 8700 7198) (7500) (7500) (7498) (5584 7502 7152) (5612 6696 5494) (5090 6294 6996) (4082 6294 5988) (5090 6296 4082) (7500 8702 7198) (7500 5586) (5610 7514 6812) (7506 8696 5606) (5602 7516 7498) (7500 8700 7588) (5598 7496 8704) (5614 7502 8700) (5090 6996 6296) (6296 5592 5286) (5088 6294 4082) (5612 6696 5494) (6714 5510 7914) (4990 6196 6900) (5610 7516 6816) (6712 5510 7914) (4798 4084 6704) (5616 7516 8008) (5596 6294 5492) (4798 6704 6000) (5616 7518 6816) (6294 5592 5492) (5590 6294 7182) (7500 8700 7548) (7500 8702 5642) (5612 5492 6696) (5090 6996 6294) (5612 5494 6696) (6714 5510 7914) (5286 4082 5988) (4798 4082 6490) (7500 8700 7588) (7498 8702 5622) (5612 5492 6696) (6714 5510 7914) (4990 6200 6900) (5618 6198 4986) (6714 5510 7914) (4800 5284 6706) (5614 4796 5992) (5502 6710 6196) (4990 6198 6900) (5616 4988 7518) (5512 6714 7914) (4800 6704 5998) (5618 6812 7514) (5512 6714 7914) (4990 6900 6198) (5618 4986 7516) (5510 6714 7914) (4800 5618 5996) (4992 5494 6196) (6714 5514 7914) (5616 7518 6816) (5994 4798 6704) (6716 5518 4802) (7500 8702 7596) (4990 6198 5616) (5512 6714 7914) (4800 6710 6000) (7500 8702 4812) (4990 6900 6196) (5616 4986 7518) (6712 5516 4802) (7500 8700 4824) (4804 6704 6002) (4988 6900 6196) (5522 6714 4986) (7500 8700 7550) (4800 6704 5612) (5506 6714 4988) (5612 5496 6698) (5084 6996 6298) (7500 8700 7300) (5286 6294 5988) (5492 5594 6198) (7502 8700 5510) (7498 6302 5600) (5594 6296 5492) (5286 5594 5988) (7500 8700 4074) (5088 6996 6300) (5592 6294 5494) (7500 8702 6300) (5284 5592 6296) (6296 5492 5596) (5084 6304 6996) (7500 8700 5164) (5594 6296 5492) (5086 5284 6998) (5494 5616 6696) (5590 6296 5494) (5084 5286 5990) (7500 8702 4064) (5594 6296 5492) (5086 6998 5282) (5612 4066 5154) (6294 5592 6696) (4798 4082 6490) (5610 7520 6818) (5610 7514 6812) (5592 6696 6294) (4082 5988 5286) (5612 7516 6812) (6294 5592 7182) (4798 6704 5998) (5614 7516 6814) (5590 6294 5494) (5794 6496 6994) (5616 7516 6814) (6294 5594 5492) (4082 5286 5988) (7500 8702 5248) (5618 5496 6194) (4988 6196 6900) (4800 6704 5286) (5612 7516 6814) (5592 6294 7182) (5794 6496 6994) (5280 5984 4084) (4988 6192 6898) (4980 6202 8104) (4990 6192 5298) (4974 6198 8104) (4970 6206 8104) (4984 6202 5816) (4974 5046 6212) (5492 6696 6194) (5612 6696 7516) (5090 6294 4084) (5276 5984 6496) (5288 6176 5984) (4988 6206 8102) (4982 6212 5280) (4990 6194 5500) (5602 6318 6196) (5602 5492 6194) (5614 5490 6692) (5276 5614 5996) (5598 5514 6714) (5594 6712 5508) (5522 6710 5570) (4988 6190 7018) (4992 6198 6702) (6702 5492 6200) (5500 6198 6696) (5514 6712 5598) (5510 6714 5288) (5284 5512 6216) (6216 5592 6298) (5516 5596 6712) (4988 6196 6900) (6704 4976 6200) (4980 6196 6704) (4978 6194 6706) (4972 6704 6208) (5080 5592 6304) (5086 6302 5592) (5086 5592 6298) (5078 6304 5598) (4982 6198 6308) (4990 6198 6900) (4986 6202 8104) (5818 7018 4984) (6698 5612 6198) (5090 6294 4084) (6294 5592 6696) (4798 6704 5998) (5612 7516 6812) (5592 6294 5494) (6496 5794 6994) (6714 5512 5612) (5286 6490 5988) (5492 5592 6294) (5088 6996 5988) (5494 6696 5614) (6294 5592 5286) (5088 4082 6490) (7500 8702 4076) (4800 6704 5996) (4990 5496 6900) (7500 8700 5022) (4802 5284 6704) (4990 5496 6696) (7500 8700 4978) (4802 6704 5998) (5616 7518 4826) (4990 6900 5496) (5614 7514 6816) (7502 8702 5632) (4800 5996 6704) (5616 7516 4810) (4990 6198 5496) (7500 8700 4986) (4804 5280 6702) (4990 6194 8104) (4996 5498 6694) (6312 5614 5506) (5492 6694 6210) (7500 7300 8700) (7500 8702 6692) (7500 5270 6674) (5286 5496 5988) (4990 6198 5616) (5592 5492 6294) (7500 8700 5598) (4790 6370 5494) (5088 5502 6696) (5084 6692 6198) (5608 5502 6198) (6316 5594 5502) (6370 5486 4790) (6312 8720 6254) (5606 5494 6194) (6692 6370 5608) (6312 5600 6692) (5602 5498 6322) (5486 6690 6200) (4984 6204 5282) (6210 5582 5284) (5586 5286 6712) (5522 6712 5592) (5594 5282 6714) (6370 5590 4788) (5076 6304 5590) (5074 4998 5592) (5076 5594 6372) (5062 5814 7016) (5074 6370 4786) (5078 5816 7016) (5816 5588 6296) (5082 5592 6296) (5070 5590 5686) (5078 6304 5592) (6372 5078 4792) (5082 5592 6308) (5090 6370 5590) (5070 5592 6302) (5082 5818 6300) (5072 5592 6300) (5076 5592 5816) (5600 4990 5084) (6714 5510 7914) (6310 8720 8216) (5608 7514 6816) (6714 5510 7914) (7710 6512 8416) (4992 5494 6696) (4798 6704 5996) (5492 5594 6696) (5088 6998 5284) (5606 4072 5154) (6714 5510 7914) (6310 8720 8214) (5608 7514 6814) (6712 5510 7914) (7710 6516 8416) (5592 5494 6296) (5090 5988 5282) (5496 6696 5614) (5592 6296 5284) (5492 6196 6696) (5088 6996 6298) (5616 5080 7512) (5594 5492 6298) (5090 6996 5284) (5614 4072 5080) (5492 5592 6296) (5286 5990 6490) (5292 4086 6492) (5496 5604 6696) (5606 7516 6812) (6714 5510 7914) (7712 6518 8416) (5602 7516 6816) (6712 5510 7914) (6704 7906 8612) (5610 7516 6816) (5510 6714 7914) (7710 6518 8416) (5606 7516 6814) (6714 5508 7914) (6310 8720 8216) (6312 5298) (5286 5988 4084) (7500 8702 4074) (7498 8706 5588) (7502 5356 5264) (7500 5584) (5610 7516 6812) (6712 5508 7914) (4990 6194 6900) (5606 7518 5146) (5508 6712 7914) (4798 6704 6000) (7500 8700 5128) (7500 8702 5244) (7500 5590) (5610 7516 6814) (5510 6714 7914) (7018 5820 7062) (5816 7016 8218) (5612 7516 6816) (6714 5510 7914) (6210 8614 8114) (6208 8616 7502) (7500 8700 7586) (7500 8702 5242))) :lonset (quote (440 1420 6910 7460 9130 11950 14970 18640 19270 22470 26710 29000 31740 33580 40620 41940 42470 43540 43640 44130 46920 49800 53050 56840 58710 59570 60620 61000 61320 61670 61800 66740 67680 68920 71700 74580 76390 77390 78390 79410 86320 86910 87560 89230 89680 91130 96280 96450 97360 99790 101770 103160 104110 105340 109440 109610 111140 112390 113190 113640 114090 114760 115240 115520 116810 117180 117530 117950 118460 119080 119690 120130 120590 121210 122230 122740 123220 123590 123820 124340 124860 125620 125840 126200 126600 126930 127260 127910 128190 128790 129090 129440 129650 130240 130860 132430 133050 133680 135030 135520 135980 136110 136630 137320 137890 138640 139270 139650 140170 140590 141140 141430 142080 142560 143190 143670 144290 144680 145180 145690 146180 149930 154890 155160 155880 158410 162430 164240 170340 172210 172820 174480 177430 178030 179770 182800 183710 184100 184510 185090 186000 188220 191450 191800 191940 192500 192560 193120 193780 194280 194650 195330 197050 199650 199750 199850 200740 200940 201700 202350 203010 203960 204070 205270 206000 206490 206670 208200 208680 212600 212840 213290 213750 213960 214270 214510 214690 215170 216280 216840 217920 218530 219510 220510 223740 223920 224550 225010 227600 231600 235660 238880 239890 241500 242600 243970 244960 245690 246550 247390 248540 249880 252220 253330 254220 254760 255760 256200 256700 257240 257630 258420 258740 259200 259610 260340 260860 261390 262080 262630 263260 263660 264360 264700 264890 264960 265520 265870 266580 266920 267320 267910 268710 270230 270660 271170 271390 271660 272110 272280 272570 272840 276100 276310 276800 277330 277940 278260 279030 281140 281620 281770 282290 282610 282780 283750 284410 284620 284890 285480 285760 286780 287080 289270 289570 292840 294200 294990 295510 295890 296210 297010 297840 298290 299410 300090 300860 301520 302140 302700 303050 303460 304360 305170 305650 306210 306690 307180 307640 308220 308570 309170 309590 309680 311410 312140 312980 313730 314230 314820 317210 317570 318150 318710 319200 319960 320940 322120 323110 324440 326310 326720 327600 328320 329480 330640 330960 331630 334510 334780 335810 336730 337870 339020 339050 340960 341390 342000 343340 344050 344210 345070)) :ldur (quote ((980 980) (5490 5490 5490) (550 550 550) (1670 1670 1670) (2820 2820 2820) (3020 3020 3020) (3670 3670 3670) (630 630 630) (3200 3200 3200) (4240 4240 4240) (2290 2290 2290) (2740 2740 2740) (1840 1840 1840) (7040 7040 7040) (1320 1320 1320) (530) (1070) (100) (490 490 490) (2790 2790 2790) (2880 2880 2880) (3250 3250 3250) (3790 3790 3790) (1870 1870 1870) (860 860) (1050 1050 1050) (380 380 380) (320 320 320) (350 350 350) (130 130 130) (4940 4940 4940) (940 940 940) (1240 1240 1240) (2780 2780 2780) (2880 2880 2880) (1810 1810 1810) (1000 1000 1000) (1000 1000 1000) (1020 1020 1020) (6910 6910 6910) (590 590 590) (650 650 650) (1670 1670 1670) (450 450 450) (1450 1450 1450) (5150 5150 5150) (170 170 170) (910 910 910) (2430 2430 2430) (1980 1980 1980) (1390 1390 1390) (950 950 950) (1230 1230 1230) (4100 4100 4100) (170 170 170) (1530 1530 1530) (1250 1250 1250) (800 800 800) (450 450 450) (450 450 450) (670 670 670) (480 480 480) (280 280 280) (1290 1290 1290) (370 370 370) (350 350 350) (420 420 420) (510 510 510) (620 620 620) (610 610 610) (440 440 440) (460 460 460) (620 620 620) (1020 1020 1020) (510 510 510) (480 480 480) (370 370 370) (230 230 230) (520 520 520) (520 520 520) (760 760 760) (220 220 220) (360 360 360) (400 400 400) (330 330 330) (330 330 330) (650 650 650) (280 280 280) (600 600 600) (300 300 300) (350 350 350) (210 210 210) (590 590 590) (620 620 620) (1570 1570 1570) (620 620 620) (630 630 630) (1350 1350 1350) (490 490 490) (460 460 460) (130 130 130) (520 520 520) (690 690 690) (570 570 570) (750 750 750) (630 630 630) (380 380 380) (520 520 520) (420 420 420) (550 550 550) (290 290 290) (650 650 650) (480 480 480) (630 630 630) (480 480 480) (620 620 620) (390 390 390) (500 500 500) (510 510 510) (490 490 490) (3750 3750 3750) (4960 4960 4960) (270 270 270) (720 720 720) (2530 2530 2530) (4020 4020 4020) (1810 1810 1810) (6100 6100 6100) (1870 1870 1870) (610 610 610) (1660 1660 1660) (2950 2950 2950) (600 600 600) (1740 1740 1740) (3030 3030 3030) (910 910 910) (390 390 390) (410 410 410) (580 580 580) (910 910 910) (2220 2220 2220) (3230 3230 3230) (350 350 350) (140 140 140) (560 560 560) (60 60 60) (560 560 560) (660 660 660) (500 500 500) (370 370 370) (680 680 680) (1720 1720 1720) (2600 2600 2600) (100 100 100) (100 100 100) (890 890 890) (200 200 200) (760 760 760) (650 650 650) (660 660 660) (950 950 950) (110 110 110) (1200 1200 1200) (730 730 730) (490 490 490) (180 180 180) (1530 1530 1530) (480 480 480) (3920 3920 3920) (240 240 240) (450 450 450) (460 460 460) (210 210 210) (310 310 310) (240 240 240) (180 180 180) (480 480 480) (1110 1110 1110) (560 560 560) (1080 1080 1080) (610 610 610) (980 980 980) (1000 1000 1000) (3230 3230 3230) (180 180 180) (630 630 630) (460 460 460) (2590 2590 2590) (4000 4000 4000) (4060 4060 4060) (3220 3220 3220) (1010 1010 1010) (1610 1610 1610) (1100 1100 1100) (1370 1370 1370) (990 990 990) (730 730 730) (860 860 860) (840 840 840) (1150 1150 1150) (1340 1340 1340) (2340 2340 2340) (1110 1110 1110) (890 890 890) (540 540 540) (1000 1000 1000) (440 440 440) (500 500 500) (540 540 540) (390 390 390) (790 790 790) (320 320 320) (460 460 460) (410 410 410) (730 730 730) (520 520 520) (530 530 530) (690 690 690) (550 550 550) (630 630 630) (400 400 400) (700 700 700) (340 340 340) (190 190 190) (70 70 70) (560 560 560) (350 350 350) (710 710 710) (340 340 340) (400 400 400) (590 590 590) (800 800 800) (1520 1520 1520) (430 430 430) (510 510 510) (220 220 220) (270 270 270) (450 450 450) (170 170 170) (290 290 290) (270 270 270) (3260 3260 3260) (210 210 210) (490 490 490) (530 530 530) (610 610 610) (320 320 320) (770 770 770) (2110 2110 2110) (480 480 480) (150 150 150) (520 520 520) (320 320 320) (170 170 170) (970 970 970) (660 660 660) (210 210 210) (270 270 270) (590 590 590) (280 280 280) (1020 1020 1020) (300 300 300) (2190 2190 2190) (300 300 300) (3270 3270 3270) (1360 1360 1360) (790 790 790) (520 520 520) (380 380 380) (320 320 320) (800 800 800) (830 830 830) (450 450 450) (1120 1120 1120) (680 680 680) (770 770 770) (660 660 660) (620 620 620) (560 560 560) (350 350 350) (410 410 410) (900 900 900) (810 810 810) (480 480 480) (560 560 560) (480 480 480) (490 490 490) (460 460 460) (580 580 580) (350 350 350) (600 600 600) (420 420 420) (90 90 90) (1730 1730 1730) (730 730 730) (840 840 840) (750 750 750) (500 500 500) (590 590 590) (2390 2390 2390) (360 360 360) (580 580 580) (560 560 560) (490 490 490) (760 760 760) (980 980 980) (1180 1180) (990 990 990) (1330 1330 1330) (1870 1870 1870) (410 410 410) (880 880) (720 720 720) (1160 1160 1160) (1160 1160 1160) (320 320 320) (670 670 670) (2880 2880 2880) (270 270 270) (1030 1030 1030) (920 920) (1140 1140 1140) (1150 1150 1150) (30 30 30) (1910 1910 1910) (430 430 430) (610 610 610) (1340 1340 1340) (710 710 710) (160 160 160) (860 860 860))) :lvel (quote ((40 40) (45 41 41) (49 43 42) (43 41 41) (53 50 49) (46 44 44) (53 49 48) (48 46 45) (51 44 42) (45 42 41) (56 48 47) (49 48 46) (59 53 53) (44 42 42) (43 41 40) (42) (41) (40) (42 41 41) (55 47 47) (56 49 47) (51 50 48) (48 44 44) (44 41 40) (42 40) (55 45 43) (54 47 44) (45 43 43) (62 52 42) (59 51 50) (49 47 43) (74 53 53) (57 57 55) (57 48 48) (51 48 48) (53 53 48) (59 49 48) (55 44 43) (55 55 49) (50 48 46) (68 46 44) (65 62 62) (72 56 53) (65 47 45) (55 54 54) (46 45 42) (74 52 46) (52 47 41) (57 50 49) (59 50 49) (59 53 51) (63 63 53) (56 53 52) (47 47 44) (74 54 45) (49 46 41) (63 56 52) (67 65 53) (89 69 63) (65 55 51) (72 71 54) (67 56 54) (74 58 52) (66 63 52) (91 79 65) (70 60 48) (79 75 55) (79 63 58) (66 47 46) (78 77 56) (79 58 57) (65 50 47) (71 69 53) (59 54 52) (77 58 57) (71 71 52) (69 48 45) (69 69 59) (62 60 56) (56 51 45) (60 58 56) (83 80 57) (74 66 63) (66 55 48) (78 57 57) (74 52 49) (67 61 60) (61 48 44) (71 58 55) (79 56 55) (66 64 53) (72 53 44) (69 56 54) (71 65 62) (55 53 52) (81 51 51) (55 49 46) (56 55 55) (61 58 55) (61 52 43) (58 49 48) (63 61 57) (62 58 57) (63 50 47) (77 56 52) (60 56 51) (64 53 43) (60 57 55) (62 61 58) (78 54 51) (71 53 44) (62 60 54) (82 58 57) (64 58 57) (63 59 57) (73 59 54) (67 55 46) (62 59 59) (87 59 57) (56 47 46) (48 46 45) (44 43 42) (65 44 43) (48 43 43) (47 45 45) (50 47 46) (55 46 43) (44 44 42) (55 47 47) (62 46 44) (49 48 47) (50 49 45) (67 47 46) (51 51 48) (49 47 46) (55 48 43) (74 61 56) (82 68 61) (81 67 62) (59 46 45) (46 45 43) (45 44 43) (47 45 44) (69 58 49) (67 53 48) (59 54 46) (65 54 47) (64 57 48) (71 64 52) (69 61 57) (62 61 61) (54 45 44) (50 45 45) (50 49 45) (55 50 50) (72 62 51) (69 56 54) (60 58 55) (65 58 56) (63 58 56) (63 62 59) (59 58 53) (62 59 57) (63 61 60) (66 62 56) (83 72 57) (69 62 59) (60 53 52) (53 52 49) (61 59 56) (57 55 52) (54 53 52) (58 56 54) (61 58 56) (73 70 53) (83 58 51) (70 58 51) (66 61 60) (59 57 54) (66 54 52) (66 58 58) (70 58 56) (77 56 56) (63 52 51) (66 55 48) (67 60 49) (69 59 58) (53 53 52) (45 43 43) (48 46 45) (52 47 45) (63 48 47) (54 52 49) (62 55 49) (58 55 52) (67 62 61) (63 62 61) (80 59 55) (66 62 59) (62 59 58) (58 53 48) (52 45 42) (68 60 55) (67 54 51) (46 43 42) (66 59 57) (81 66 61) (65 53 46) (81 67 64) (71 50 46) (71 53 52) (70 50 44) (62 52 43) (73 66 62) (64 47 46) (75 60 59) (63 52 44) (62 57 54) (64 58 51) (60 55 54) (66 60 56) (58 57 56) (64 56 51) (55 50 42) (64 50 46) (60 57 53) (75 60 60) (61 59 58) (70 52 44) (51 50 50) (71 54 53) (74 57 52) (55 52 50) (51 48 44) (47 47 47) (59 43 43) (50 48 47) (51 49 48) (64 47 46) (58 50 49) (59 57 55) (61 55 54) (61 56 50) (58 55 52) (62 61 55) (58 57 56) (51 51 51) (73 57 55) (60 57 56) (59 53 49) (59 58 57) (61 48 48) (57 51 50) (56 54 50) (66 53 50) (59 50 47) (80 55 51) (53 52 52) (70 50 49) (51 50 50) (66 51 49) (74 53 51) (61 49 47) (67 48 47) (51 49 47) (50 48 46) (53 43 42) (53 43 42) (61 61 47) (67 54 46) (75 58 56) (86 71 66) (60 58 56) (70 54 52) (47 43 42) (46 46 43) (51 42 41) (49 42 41) (47 47 42) (66 54 46) (67 67 64) (76 60 60) (67 62 60) (62 61 56) (65 59 58) (100 64 59) (66 48 47) (66 63 60) (85 60 60) (61 48 47) (63 62 59) (74 63 62) (61 60 57) (56 53 52) (45 41 41) (45 45 42) (47 42 41) (46 41 41) (55 53 46) (48 42 40) (53 43 43) (47 46 42) (47 42 41) (48 41 41) (46 46 42) (44 40 40) (42 40) (58 52 52) (52 46 43) (44 41 40) (41 40 40) (41 40) (47 41 41) (46 46 44) (50 45 43) (51 42 42) (47 46 43) (48 44 44) (45 41 41) (42 41 41) (41 40) (52 43 43) (46 45 44) (48 48 44) (47 44 42) (52 43 43) (54 54 46) (45 41 41) (42 41 41) (68 50 44) (50 45 41))) :loffset (quotelchan (quotelegato 0)))) (load-port-info newobj (quoteinit-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.19 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 908 524) (om-make-point 400 23) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "Cello piece run through idea.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 244 36) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "samdvorin" "Downloads")) :device nil :host nil :name "Cello piece run through idea" :type "wav") 0 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "Cello piece run through idea.wav") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (outport inport player zoom grillestep mode winsize winpos show-spectrum deltapict obj-mode cmnpref notechancolor? show-stems scale)) (list nil nil (quote :om-audio) 1 nil 0 (om-make-point 1440 469) (om-make-point 317 234) nil (om-make-point 0 0) 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 321 97) (om-make-point 195 96) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5594) (5612) (4798) (4796) (4992) (4082) (4992) (6196) (5612) (4798) (5090) (5592) (4990) (4082) (7500) (7500) (7500) (7498) (5584) (5612) (5090) (4082) (5090) (7500) (7500) (5610) (7506) (5602) (7500) (5598) (5614) (5090) (6296) (5088) (5612) (6714) (4990) (5610) (6712) (4798) (5616) (5596) (4798) (5616) (6294) (5590) (7500) (7500) (5612) (5090) (5612) (6714) (5286) (4798) (7500) (7498) (5612) (6714) (4990) (5618) (6714) (4800) (5614) (5502) (4990) (5616) (5512) (4800) (5618) (5512) (4990) (5618) (5510) (4800) (4992) (6714) (5616) (5994) (6716) (7500) (4990) (5512) (4800) (7500) (4990) (5616) (6712) (7500) (4804) (4988) (5522) (7500) (4800) (5506) (5612) (5084) (7500) (5286) (5492) (7502) (7498) (5594) (5286) (7500) (5088) (5592) (7500) (5284) (6296) (5084) (7500) (5594) (5086) (5494) (5590) (5084) (7500) (5594) (5086) (5612) (6294) (4798) (5610) (5610) (5592) (4082) (5612) (6294) (4798) (5614) (5590) (5794) (5616) (6294) (4082) (7500) (5618) (4988) (4800) (5612) (5592) (5794) (5280) (4988) (4980) (4990) (4974) (4970) (4984) (4974) (5492) (5612) (5090) (5276) (5288) (4988) (4982) (4990) (5602) (5602) (5614) (5276) (5598) (5594) (5522) (4988) (4992) (6702) (5500) (5514) (5510) (5284) (6216) (5516) (4988) (6704) (4980) (4978) (4972) (5080) (5086) (5086) (5078) (4982) (4990) (4986) (5818) (6698) (5090) (6294) (4798) (5612) (5592) (6496) (6714) (5286) (5492) (5088) (5494) (6294) (5088) (7500) (4800) (4990) (7500) (4802) (4990) (7500) (4802) (5616) (4990) (5614) (7502) (4800) (5616) (4990) (7500) (4804) (4990) (4996) (6312) (5492) (7500) (7500) (7500) (5286) (4990) (5592) (7500) (4790) (5088) (5084) (5608) (6316) (6370) (6312) (5606) (6692) (6312) (5602) (5486) (4984) (6210) (5586) (5522) (5594) (6370) (5076) (5074) (5076) (5062) (5074) (5078) (5816) (5082) (5070) (5078) (6372) (5082) (5090) (5070) (5082) (5072) (5076) (5600) (6714) (6310) (5608) (6714) (7710) (4992) (4798) (5492) (5088) (5606) (6714) (6310) (5608) (6712) (7710) (5592) (5090) (5496) (5592) (5492) (5088) (5616) (5594) (5090) (5614) (5492) (5286) (5292) (5496) (5606) (6714) (7712) (5602) (6712) (6704) (5610) (5510) (7710) (5606) (6714) (6310) (6312) (5286) (7500) (7498) (7502) (7500) (5610) (6712) (4990) (5606) (5508) (4798) (7500) (7500) (7500) (5610) (5510) (7018) (5816) (5612) (6714) (6210) (6208) (7500) (7500))) :lonset (quote (440 1420 6910 7460 9130 11950 14970 18640 19270 22470 26710 29000 31740 33580 40620 41940 42470 43540 43640 44130 46920 49800 53050 56840 58710 59570 60620 61000 61320 61670 61800 66740 67680 68920 71700 74580 76390 77390 78390 79410 86320 86910 87560 89230 89680 91130 96280 96450 97360 99790 101770 103160 104110 105340 109440 109610 111140 112390 113190 113640 114090 114760 115240 115520 116810 117180 117530 117950 118460 119080 119690 120130 120590 121210 122230 122740 123220 123590 123820 124340 124860 125620 125840 126200 126600 126930 127260 127910 128190 128790 129090 129440 129650 130240 130860 132430 133050 133680 135030 135520 135980 136110 136630 137320 137890 138640 139270 139650 140170 140590 141140 141430 142080 142560 143190 143670 144290 144680 145180 145690 146180 149930 154890 155160 155880 158410 162430 164240 170340 172210 172820 174480 177430 178030 179770 182800 183710 184100 184510 185090 186000 188220 191450 191800 191940 192500 192560 193120 193780 194280 194650 195330 197050 199650 199750 199850 200740 200940 201700 202350 203010 203960 204070 205270 206000 206490 206670 208200 208680 212600 212840 213290 213750 213960 214270 214510 214690 215170 216280 216840 217920 218530 219510 220510 223740 223920 224550 225010 227600 231600 235660 238880 239890 241500 242600 243970 244960 245690 246550 247390 248540 249880 252220 253330 254220 254760 255760 256200 256700 257240 257630 258420 258740 259200 259610 260340 260860 261390 262080 262630 263260 263660 264360 264700 264890 264960 265520 265870 266580 266920 267320 267910 268710 270230 270660 271170 271390 271660 272110 272280 272570 272840 276100 276310 276800 277330 277940 278260 279030 281140 281620 281770 282290 282610 282780 283750 284410 284620 284890 285480 285760 286780 287080 289270 289570 292840 294200 294990 295510 295890 296210 297010 297840 298290 299410 300090 300860 301520 302140 302700 303050 303460 304360 305170 305650 306210 306690 307180 307640 308220 308570 309170 309590 309680 311410 312140 312980 313730 314230 314820 317210 317570 318150 318710 319200 319960 320940 322120 323110 324440 326310 326720 327600 328320 329480 330640 330960 331630 334510 334780 335810 336730 337870 339020 339050 340960 341390 342000 343340 344050 344210 345070)) :ldur (quote ((980) (5490) (550) (1670) (2820) (3020) (3670) (630) (3200) (4240) (2290) (2740) (1840) (7040) (1320) (530) (1070) (100) (490) (2790) (2880) (3250) (3790) (1870) (860) (1050) (380) (320) (350) (130) (4940) (940) (1240) (2780) (2880) (1810) (1000) (1000) (1020) (6910) (590) (650) (1670) (450) (1450) (5150) (170) (910) (2430) (1980) (1390) (950) (1230) (4100) (170) (1530) (1250) (800) (450) (450) (670) (480) (280) (1290) (370) (350) (420) (510) (620) (610) (440) (460) (620) (1020) (510) (480) (370) (230) (520) (520) (760) (220) (360) (400) (330) (330) (650) (280) (600) (300) (350) (210) (590) (620) (1570) (620) (630) (1350) (490) (460) (130) (520) (690) (570) (750) (630) (380) (520) (420) (550) (290) (650) (480) (630) (480) (620) (390) (500) (510) (490) (3750) (4960) (270) (720) (2530) (4020) (1810) (6100) (1870) (610) (1660) (2950) (600) (1740) (3030) (910) (390) (410) (580) (910) (2220) (3230) (350) (140) (560) (60) (560) (660) (500) (370) (680) (1720) (2600) (100) (100) (890) (200) (760) (650) (660) (950) (110) (1200) (730) (490) (180) (1530) (480) (3920) (240) (450) (460) (210) (310) (240) (180) (480) (1110) (560) (1080) (610) (980) (1000) (3230) (180) (630) (460) (2590) (4000) (4060) (3220) (1010) (1610) (1100) (1370) (990) (730) (860) (840) (1150) (1340) (2340) (1110) (890) (540) (1000) (440) (500) (540) (390) (790) (320) (460) (410) (730) (520) (530) (690) (550) (630) (400) (700) (340) (190) (70) (560) (350) (710) (340) (400) (590) (800) (1520) (430) (510) (220) (270) (450) (170) (290) (270) (3260) (210) (490) (530) (610) (320) (770) (2110) (480) (150) (520) (320) (170) (970) (660) (210) (270) (590) (280) (1020) (300) (2190) (300) (3270) (1360) (790) (520) (380) (320) (800) (830) (450) (1120) (680) (770) (660) (620) (560) (350) (410) (900) (810) (480) (560) (480) (490) (460) (580) (350) (600) (420) (90) (1730) (730) (840) (750) (500) (590) (2390) (360) (580) (560) (490) (760) (980) (1180) (990) (1330) (1870) (410) (880) (720) (1160) (1160) (320) (670) (2880) (270) (1030) (920) (1140) (1150) (30) (1910) (430) (610) (1340) (710) (160) (860))) :lvel (quote ((40) (45) (49) (43) (53) (46) (53) (48) (51) (45) (56) (49) (59) (44) (43) (42) (41) (40) (42) (55) (56) (51) (48) (44) (42) (55) (54) (45) (62) (59) (49) (74) (57) (57) (51) (53) (59) (55) (55) (50) (68) (65) (72) (65) (55) (46) (74) (52) (57) (59) (59) (63) (56) (47) (74) (49) (63) (67) (89) (65) (72) (67) (74) (66) (91) (70) (79) (79) (66) (78) (79) (65) (71) (59) (77) (71) (69) (69) (62) (56) (60) (83) (74) (66) (78) (74) (67) (61) (71) (79) (66) (72) (69) (71) (55) (81) (55) (56) (61) (61) (58) (63) (62) (63) (77) (60) (64) (60) (62) (78) (71) (62) (82) (64) (63) (73) (67) (62) (87) (56) (48) (44) (65) (48) (47) (50) (55) (44) (55) (62) (49) (50) (67) (51) (49) (55) (74) (82) (81) (59) (46) (45) (47) (69) (67) (59) (65) (64) (71) (69) (62) (54) (50) (50) (55) (72) (69) (60) (65) (63) (63) (59) (62) (63) (66) (83) (69) (60) (53) (61) (57) (54) (58) (61) (73) (83) (70) (66) (59) (66) (66) (70) (77) (63) (66) (67) (69) (53) (45) (48) (52) (63) (54) (62) (58) (67) (63) (80) (66) (62) (58) (52) (68) (67) (46) (66) (81) (65) (81) (71) (71) (70) (62) (73) (64) (75) (63) (62) (64) (60) (66) (58) (64) (55) (64) (60) (75) (61) (70) (51) (71) (74) (55) (51) (47) (59) (50) (51) (64) (58) (59) (61) (61) (58) (62) (58) (51) (73) (60) (59) (59) (61) (57) (56) (66) (59) (80) (53) (70) (51) (66) (74) (61) (67) (51) (50) (53) (53) (61) (67) (75) (86) (60) (70) (47) (46) (51) (49) (47) (66) (67) (76) (67) (62) (65) (100) (66) (66) (85) (61) (63) (74) (61) (56) (45) (45) (47) (46) (55) (48) (53) (47) (47) (48) (46) (44) (42) (58) (52) (44) (41) (41) (47) (46) (50) (51) (47) (48) (45) (42) (41) (52) (46) (48) (47) (52) (54) (45) (42) (68) (50))) :loffset (quotelchan (quotelegato 0)))) (load-port-info newobj (quoteinit-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.19 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote ff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 908 524) (om-make-point 4 23) 0 1 (quote :interval) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "AS->OM" (quote as->om) (quote ((om-load-inputfun (quote input-funbox) "Analyse" "ANALYSE" nil) (om-load-inputfun (quote input-funbox) "vel min" "VMIN" 40) (om-load-inputfun (quote input-funbox) "vel max" "VMAX" 100) (om-load-inputfun (quote input-funbox) "delta" "DELTA" 5) (om-load-inputfun (quote input-funbox) "midic min" "MMIN" 2000) (om-load-inputfun (quote input-funbox) "midic max" "MMAX" 10000) (om-load-inputfun (quote input-funbox) "approx" "APPROX" 8) (om-load-inputfun (quote input-funbox) "poly. density" "NPOLY" 3))) (om-make-point 81 155) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "cello sketch 5 voices.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 75 34) (om-make-point 70 50) (let ((newobj (load-sdif-file (om-make-pathname :directory (quote (:absolute "Users" "samdvorin" "Desktop" "music" "audiosculpt" "ChordSeqs")) :device nil :host nil :name "cello sketch 5 voices" :type "sdif")))) (when newobj) newobj) "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 400 500))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 1 0 nil 0) (5 0 4 0 nil 0))) nil 6.19))
