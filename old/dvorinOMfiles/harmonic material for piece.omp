; OM File Header - Saved 2023/10/03 15:14:41
; (7.01 :patc (om-make-point 139 69) (om-make-point 0 44) (om-make-point 1800 1035) "" 183 0 "2023/02/15 10:26:03" "2023/05/13 18:38:00")
; End File Header
(in-package :om)(load-lib-for (quote ("OMTristan" "OMJosh")))(setf *om-current-persistent* (om-load-patch1 "harmonic material for piece" (quote ((let ((box (om-load-boxcall (quote abstraction) "sort by roughness least to greatest" (om-load-patch-abs1 "sort by roughness least to greatest" (quote ((let ((box (om-load-boxwithed1 (quote box-with-win) "get roughness" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil))) (om-make-point 425 344) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 322 206) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" 0) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 229 169) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 276 71) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 5 40) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 321 293) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 185 308) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((1 0 0 0 nil 0) (2 0 1 1 nil 0) (3 0 2 0 nil 0) (0 1 4 0 nil 0) (0 0 5 0 nil 0))) 1 "get roughness" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 2" 1 (om-make-point 438 452) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "get roughness" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil))) (om-make-point 73 206) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 275 123) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ROUGHNESS" (quote roughness) (quote ((om-load-inputfun (quote input-funbox) "chord obj" "CHORD" (list 6000 6700)) (om-load-inputfun (quote input-funbox) "nbharm" "NBHARM" 2) (om-load-inputfun (quote input-funbox) "dec" "DEC" 2))) (om-make-point 158 162) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 46 119) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 5 40) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 300 250) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 200 250) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((1 0 0 0 nil 0) (2 0 1 0 nil 0) (3 0 2 0 nil 0) (0 1 4 0 nil 0) (0 0 5 0 nil 0))) 1 "get roughness" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "get chord" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil))) (om-make-point 157 338) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 322 206) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" 1) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 229 169) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 276 71) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 5 40) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 321 293) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 185 308) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((1 0 0 0 nil 0) (2 0 1 1 nil 0) (3 0 2 0 nil 0) (0 1 4 0 nil 0) (0 0 5 0 nil 0))) 1 "get chord" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 416 212) (om-make-point 29 30) (quote <) "<" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 486 218) (om-make-point 42 30) (quote first) "first" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SORT-LIST" (quote sort-list) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil) (om-load-inputkeyword (quote input-keyword) "test function" "test" (quote :test) (quote (quote <)) nil) (om-load-inputkeyword (quote input-keyword) "test key" "key" (quote :key) nil nil))) (om-make-point 293 291) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "v fund + chord seq to hash" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil) (om-load-inputfun (quote input-funbox) "" "input1" nil))) (om-make-point 172 183) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 243 306) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 248 247) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 2" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 275 151) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 40 153) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input1" 1 (om-make-point 212 40) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 5 40) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 486 490) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 193 494) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((1 0 0 0 nil 0) (3 0 1 0 nil 0) (2 0 1 1 nil 0) (4 0 2 0 nil 0) (5 0 3 0 nil 0) (0 1 6 0 nil 0) (0 0 7 0 nil 0))) 1 "v fund + chord seq to hash" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "VIRTUAL-FUND" (quote virtual-fund) (quote ((om-load-inputfun (quote input-funbox) "pitches" "CHORD" (list 6000)) (om-load-inputfun (quote input-funbox) "approx" "CENTS" 50) (om-load-inputfunmenu1 (quote input-funmenu) "unit" "UNIT" (quote midic) (list (list "Midics" (quote (quote midic))) (list "Freqs" (quote (quote freq))))))) (om-make-point 157 62) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 89 375) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 0 0 nil 0) (0 0 1 0 nil 0) (9 0 2 0 nil 0) (6 0 3 0 nil 0) (7 0 6 0 nil 0) (4 0 6 1 nil 0) (5 0 6 2 nil 0) (2 0 7 0 nil 0) (9 0 7 1 nil 0) (3 0 10 0 nil 0))) 7.01 nil "" (om-make-point 301 75) (om-make-point 911 632)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 204 664) nil (list (list (list 5814 6660 6591 6632 6231 5544 6567 5865 6148) (list 5544 5829 6178 5829 6243 5700 6799 6576 6669) (list 6061 6266 5799 6614 6099 5636 6664 6130 6099) (list 5578 6190 6061 5708 5700 6160 6655 6807 6118) (list 6343 6609 6099 5851 6669 5865 6022 6305 5700) (list 6504 6572 5914 6266 6509 6433 5595 6739 6067) (list 5792 5956 5754 6048 6769 5747 6438 6220 6009) (list 6283 6067 5976 6148 5949 6660 6614 5942 5578) (list 6316 6111 5956 5807 5526 5708 6562 6086 5784) (list 5900 6691 6553 6782 6499 6664 6739 6327 5893) (list 6316 6428 5956 6700 6220 6166 5935 5969 6277)) (list 0.10182643 0.10420305 0.11036595 0.11187491 0.11276874 0.1251148 0.12718424 0.1275995 0.13313079 0.14373814 0.14881426)) nil "sort by roughness least to greatest"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 4" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 222 780) (om-make-point 717 146) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5814 6660 6591 6632 6231 5544 6567 5865 6148) (5544 5829 6178 5829 6243 5700 6799 6576 6669) (6061 6266 5799 6614 6099 5636 6664 6130 6099) (5578 6190 6061 5708 5700 6160 6655 6807 6118) (6343 6609 6099 5851 6669 5865 6022 6305 5700) (6504 6572 5914 6266 6509 6433 5595 6739 6067) (5792 5956 5754 6048 6769 5747 6438 6220 6009) (6283 6067 5976 6148 5949 6660 6614 5942 5578) (6316 6111 5956 5807 5526 5708 6562 6086 5784) (5900 6691 6553 6782 6499 6664 6739 6327 5893) (6316 6428 5956 6700 6220 6166 5935 5969 6277))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000)) :ldur (quote ((1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000))) :lvel (quote ((100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100))) :loffset (quote ((0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0))) :lchan (quote ((1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.01 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 48 (quote gg) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 1325 695) (om-make-point 400 44) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 107 30) (quote "WIDE CHORDS") "" (om-make-point 42 405) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 3" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list (list 5526.0 5619.0 5829.0 7414.0 7179.0 5676.0 8141.0 7025.0 8345.0) (list 6744.0 8525.0 5586.0 9101.0 7061.0 7488.0 7289.0 7381.0 8432.0) (list 7984.0 6332.0 6016.0 6365.0 7225.0 7121.0 6288.0 8874.0 7816.0) (list 7477.0 8229.0 5569.0 8879.0 6916.0 7625.0 7072.0 5500.0 9380.0) (list 6454.0 6178.0 6042.0 8971.0 7378.0 7628.0 7793.0 8969.0 9290.0) (list 7661.0 8177.0 6428.0 6376.0 6655.0 7726.0 7296.0 7199.0 7999.0) (list 8234.0 8332.0 6321.0 7090.0 5526.0 7765.0 8092.0 6349.0 9000.0) (list 5956.0 7280.0 5792.0 8106.0 7396.0 7583.0 6349.0 7605.0 9135.0) (list 7156.0 8516.0 5739.0 8713.0 6557.0 6655.0 7172.0 6035.0 5784.0) (list 6343.0 8489.0 6254.0 9014.0 6266.0 6958.0 5500.0 8261.0 6807.0) (list 7633.0 8196.0 6220.0 7448.0 6637.0 5851.0 5962.0 8361.0 9243.0) (list 7502.0 8706.0 6504.0 6354.0 6884.0 6391.0 6651.0 7402.0 7354.0) (list 6184.0 8108.0 6327.0 8819.0 6931.0 6977.0 7414.0 8583.0 5544.0) (list 6504.0 8034.0 6557.0 8798.0 6576.0 7565.0 6795.0 8685.0 6790.0) (list 6343.0 7898.0 5872.0 7179.0 7176.0 6029.0 5865.0 9217.0 7271.0) (list 5792.0 7025.0 5644.0 7399.0 5754.0 7502.0 5526.0 6343.0 6931.0) (list 6807.0 6220.0 5644.0 7823.0 6474.0 5836.0 7521.0 8211.0 7483.0) (list 8125.0 6999.0 5578.0 8032.0 6254.0 7605.0 7812.0 9196.0 7795.0) (list 6586.0 8571.0 6655.0 9000.0 6819.0 6876.0 7821.0 8265.0 7995.0) (list 5900.0 5822.0 5762.0 8179.0 7051.0 5983.0 6581.0 7666.0 8288.0) (list 8015.0 7728.0 5921.0 9019.0 5807.0 7283.0 7271.0 6614.0 8192.0) (list 7267.0 8328.0 6642.0 7554.0 7348.0 7446.0 6769.0 7159.0 9206.0) (list 6731.0 8759.0 6595.0 6248.0 6848.0 7431.0 7620.0 7354.0 7641.0) (list 8603.0 8276.0 5535.0 9073.0 7206.0 7826.0 6548.0 8583.0 9405.0) (list 7381.0 8386.0 5762.0 7538.0 6105.0 6927.0 7311.0 8524.0 9210.0) (list 7308.0 6632.0 6254.0 8663.0 6591.0 7183.0 7638.0 7111.0 6860.0) (list 7248.0 7369.0 6454.0 7641.0 5619.0 7384.0 5784.0 7651.0 6562.0) (list 6931.0 8854.0 5552.0 5595.0 7345.0 6254.0 6402.0 6632.0 7149.0) (list 7293.0 7242.0 6160.0 7939.0 6277.0 7918.0 8007.0 5569.0 7425.0) (list 6704.0 8281.0 6669.0 7893.0 6950.0 6099.0 5942.0 9021.0 9146.0) (list 6931.0 7965.0 6469.0 7369.0 6888.0 7033.0 7911.0 7913.0 6464.0) (list 8143.0 8541.0 5595.0 7612.0 6896.0 5509.0 7100.0 7826.0 7776.0) (list 5628.0 7360.0 6154.0 6214.0 6220.0 6220.0 5578.0 9126.0 9117.0) (list 6494.0 8211.0 5989.0 9053.0 6815.0 6310.0 5544.0 8763.0 6912.0) (list 6208.0 5644.0 5792.0 6950.0 6704.0 7499.0 7345.0 7767.0 7745.0) (list 8147.0 6196.0 6321.0 8106.0 5619.0 7568.0 6595.0 7216.0 6474.0) (list 8450.0 6943.0 6220.0 8636.0 6769.0 6469.0 7839.0 6294.0 8843.0) (list 8435.0 6111.0 6124.0 5535.0 5535.0 6852.0 8164.0 7118.0 8171.0) (list 6061.0 6130.0 6316.0 5708.0 5792.0 5660.0 6016.0 7684.0 8009.0))) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 19 444) (om-make-point 1222 146) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5526 5619 5829 7414 7179 5676 8141 7025 8345) (6744 8525 5586 9101 7061 7488 7289 7381 8432) (7984 6332 6016 6365 7225 7121 6288 8874 7816) (7477 8229 5569 8879 6916 7625 7072 5500 9380) (6454 6178 6042 8971 7378 7628 7793 8969 9290) (7661 8177 6428 6376 6655 7726 7296 7199 7999) (8234 8332 6321 7090 5526 7765 8092 6349 9000) (5956 7280 5792 8106 7396 7583 6349 7605 9135) (7156 8516 5739 8713 6557 6655 7172 6035 5784) (6343 8489 6254 9014 6266 6958 5500 8261 6807) (7633 8196 6220 7448 6637 5851 5962 8361 9243) (7502 8706 6504 6354 6884 6391 6651 7402 7354) (6184 8108 6327 8819 6931 6977 7414 8583 5544) (6504 8034 6557 8798 6576 7565 6795 8685 6790) (6343 7898 5872 7179 7176 6029 5865 9217 7271) (5792 7025 5644 7399 5754 7502 5526 6343 6931) (6807 6220 5644 7823 6474 5836 7521 8211 7483) (8125 6999 5578 8032 6254 7605 7812 9196 7795) (6586 8571 6655 9000 6819 6876 7821 8265 7995) (5900 5822 5762 8179 7051 5983 6581 7666 8288) (8015 7728 5921 9019 5807 7283 7271 6614 8192) (7267 8328 6642 7554 7348 7446 6769 7159 9206) (6731 8759 6595 6248 6848 7431 7620 7354 7641) (8603 8276 5535 9073 7206 7826 6548 8583 9405) (7381 8386 5762 7538 6105 6927 7311 8524 9210) (7308 6632 6254 8663 6591 7183 7638 7111 6860) (7248 7369 6454 7641 5619 7384 5784 7651 6562) (6931 8854 5552 5595 7345 6254 6402 6632 7149) (7293 7242 6160 7939 6277 7918 8007 5569 7425) (6704 8281 6669 7893 6950 6099 5942 9021 9146) (6931 7965 6469 7369 6888 7033 7911 7913 6464) (8143 8541 5595 7612 6896 5509 7100 7826 7776) (5628 7360 6154 6214 6220 6220 5578 9126 9117) (6494 8211 5989 9053 6815 6310 5544 8763 6912) (6208 5644 5792 6950 6704 7499 7345 7767 7745) (8147 6196 6321 8106 5619 7568 6595 7216 6474) (8450 6943 6220 8636 6769 6469 7839 6294 8843) (8435 6111 6124 5535 5535 6852 8164 7118 8171) (6061 6130 6316 5708 5792 5660 6016 7684 8009))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000 13000 14000 15000 16000 17000 18000 19000 20000 21000 22000 23000 24000 25000 26000 27000 28000 29000 30000 31000 32000 33000 34000 35000 36000 37000 38000 39000)) :ldur (quote ((1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000))) :lvel (quote ((100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100))) :loffset (quote ((0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0))) :lchan (quote ((1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.01 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote ggf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 1080 407) (om-make-point 400 44) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 128 30) (quote "WIDE SPECTRUMS") "" (om-make-point 39 203) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list (list 9670.0 6704.0 9567.0 6086.0 9313.0 8125.0 7521.0 8697.0 9012.0) (list 10072.0 7434.0 8785.0 9636.0 9863.0 10114.0 9200.0 8628.0 5976.0) (list 10042.0 10150.0 6359.0 7494.0 9903.0 9872.0 9188.0 10109.0 5578.0) (list 6489.0 8345.0 5569.0 5716.0 7011.0 9751.0 8587.0 9500.0 9764.0) (list 8394.0 10062.0 7610.0 10038.0 7463.0 9681.0 9211.0 5700.0 10160.0) (list 10033.0 9757.0 7527.0 6528.0 8860.0 5836.0 9032.0 9792.0 9788.0) (list 7156.0 7446.0 10013.0 9759.0 8827.0 8712.0 7440.0 9493.0 5518.0) (list 9690.0 8712.0 6523.0 5762.0 8199.0 9006.0 7183.0 7321.0 9618.0) (list 8513.0 6294.0 7090.0 9360.0 9885.0 8545.0 10165.0 9466.0 6988.0) (list 7519.0 7684.0 9717.0 9884.0 5962.0 9812.0 8815.0 8841.0 9785.0) (list 6973.0 10043.0 10009.0 9252.0 9897.0 7212.0 9885.0 6136.0 8471.0) (list 7014.0 8508.0 7363.0 9336.0 6061.0 7107.0 10046.0 7302.0 7022.0) (list 7961.0 8453.0 8114.0 9675.0 7869.0 7225.0 9184.0 7176.0 9709.0) (list 6996.0 8530.0 8806.0 9108.0 7931.0 7842.0 8734.0 10167.0 6061.0) (list 8469.0 7519.0 9158.0 7788.0 7488.0 8123.0 10162.0 5989.0 9744.0) (list 7772.0 7357.0 7937.0 5569.0 10153.0 9223.0 9792.0 7521.0 9101.0) (list 6700.0 9939.0 9877.0 5784.0 6852.0 8480.0 6795.0 9999.0 6920.0) (list 8922.0 7302.0 9364.0 6765.0 6237.0 9252.0 8763.0 9700.0 9035.0) (list 7114.0 7494.0 8154.0 8528.0 7954.0 8198.0 9583.0 7305.0 9451.0) (list 7950.0 8098.0 5851.0 8038.0 7952.0 9541.0 6888.0 7676.0 9617.0) (list 5799.0 8743.0 9133.0 8154.0 9162.0 6947.0 8782.0 7893.0 9970.0) (list 6856.0 8683.0 9244.0 9384.0 9887.0 8719.0 10125.0 8112.0 6981.0) (list 9151.0 9502.0 10050.0 9915.0 9382.0 8459.0 7704.0 8518.0 7915.0) (list 8873.0 9425.0 7704.0 7336.0 8923.0 9795.0 5586.0 8991.0 9586.0))) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 36 234) (om-make-point 1204 152) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((9670 6704 9567 6086 9313 8125 7521 8697 9012) (10072 7434 8785 9636 9863 10114 9200 8628 5976) (10042 10150 6359 7494 9903 9872 9188 10109 5578) (6489 8345 5569 5716 7011 9751 8587 9500 9764) (8394 10062 7610 10038 7463 9681 9211 5700 10160) (10033 9757 7527 6528 8860 5836 9032 9792 9788) (7156 7446 10013 9759 8827 8712 7440 9493 5518) (9690 8712 6523 5762 8199 9006 7183 7321 9618) (8513 6294 7090 9360 9885 8545 10165 9466 6988) (7519 7684 9717 9884 5962 9812 8815 8841 9785) (6973 10043 10009 9252 9897 7212 9885 6136 8471) (7014 8508 7363 9336 6061 7107 10046 7302 7022) (7961 8453 8114 9675 7869 7225 9184 7176 9709) (6996 8530 8806 9108 7931 7842 8734 10167 6061) (8469 7519 9158 7788 7488 8123 10162 5989 9744) (7772 7357 7937 5569 10153 9223 9792 7521 9101) (6700 9939 9877 5784 6852 8480 6795 9999 6920) (8922 7302 9364 6765 6237 9252 8763 9700 9035) (7114 7494 8154 8528 7954 8198 9583 7305 9451) (7950 8098 5851 8038 7952 9541 6888 7676 9617) (5799 8743 9133 8154 9162 6947 8782 7893 9970) (6856 8683 9244 9384 9887 8719 10125 8112 6981) (9151 9502 10050 9915 9382 8459 7704 8518 7915) (8873 9425 7704 7336 8923 9795 5586 8991 9586))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000 13000 14000 15000 16000 17000 18000 19000 20000 21000 22000 23000 24000)) :ldur (quote ((1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000))) :lvel (quote ((100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100))) :loffset (quote ((0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0))) :lchan (quote ((1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.01 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((1) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.01 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((3) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.01 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((7) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.01 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote gg) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 1041 360) (om-make-point 400 44) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 80 30) (quote "CLUSTERS") "" (om-make-point 32 40) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list (list 5544.0 5829.0 6178.0 5829.0 6243.0 5700.0 6799.0 6576.0 6669.0) (list 6343.0 6609.0 6099.0 5851.0 6669.0 5865.0 6022.0 6305.0 5700.0) (list 5900.0 6691.0 6553.0 6782.0 6499.0 6664.0 6739.0 6327.0 5893.0) (list 5578.0 6190.0 6061.0 5708.0 5700.0 6160.0 6655.0 6807.0 6118.0) (list 6316.0 6428.0 5956.0 6700.0 6220.0 6166.0 5935.0 5969.0 6277.0) (list 5792.0 5956.0 5754.0 6048.0 6769.0 5747.0 6438.0 6220.0 6009.0) (list 6283.0 6067.0 5976.0 6148.0 5949.0 6660.0 6614.0 5942.0 5578.0) (list 5814.0 6660.0 6591.0 6632.0 6231.0 5544.0 6567.0 5865.0 6148.0) (list 6061.0 6266.0 5799.0 6614.0 6099.0 5636.0 6664.0 6130.0 6099.0) (list 6316.0 6111.0 5956.0 5807.0 5526.0 5708.0 6562.0 6086.0 5784.0) (list 6504.0 6572.0 5914.0 6266.0 6509.0 6433.0 5595.0 6739.0 6067.0))) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 34 71) (om-make-point 573 106) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5544 5829 6178 5829 6243 5700 6799 6576 6669) (6343 6609 6099 5851 6669 5865 6022 6305 5700) (5900 6691 6553 6782 6499 6664 6739 6327 5893) (5578 6190 6061 5708 5700 6160 6655 6807 6118) (6316 6428 5956 6700 6220 6166 5935 5969 6277) (5792 5956 5754 6048 6769 5747 6438 6220 6009) (6283 6067 5976 6148 5949 6660 6614 5942 5578) (5814 6660 6591 6632 6231 5544 6567 5865 6148) (6061 6266 5799 6614 6099 5636 6664 6130 6099) (6316 6111 5956 5807 5526 5708 6562 6086 5784) (6504 6572 5914 6266 6509 6433 5595 6739 6067))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000)) :ldur (quote ((1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000))) :lvel (quote ((100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100))) :loffset (quote ((0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0))) :lchan (quote ((1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.01 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 1143 465) (om-make-point 400 44) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((7 1 0 0 nil 0) (0 0 1 1 nil 0))) nil 7.01))
