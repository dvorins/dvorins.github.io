; OM File Header - Saved 2024/02/06 13:56:41
; (6.19 :patc (om-make-point 39 13) (om-make-point 0 23) (om-make-point 1440 813) "" 183 0 "2021/11/30 21:34:40" "2022/07/20 15:54:37")
; End File Header
; External resources 
; (list (list (quote :sdif) "#P\"../../../audiosculpt/ChordSeqs/New Recording 68-cs.sdif\""))
(in-package :om)(load-lib-for (quote ("Repmus" "OMTristan")))(setf *om-current-persistent* (om-load-patch1 "guitar tuning stuff" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 179 118) (quote "how to get list of pictches orderedd by velocity") "" (om-make-point 465 75) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD 4" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 551 603) (om-make-point 60 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (3600 4800 5502 6000 6386 6702 6968)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point 400 23) (om-make-point 497 314) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 8)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DIST-GEN" (quote dist-gen) (quote ((om-load-inputfun (quote input-funbox) "Fundamental" "FUND" 3600) (om-load-inputfun (quote input-funbox) "Numerator" "NUMER" 1) (om-load-inputfun (quote input-funbox) "Denominator" "DENOM" 1) (om-load-inputfun (quote input-funbox) "Begin" "BEGIN" 1) (om-load-inputfun (quote input-funbox) "End" "END" 7) (om-load-inputfun (quote input-funbox) "N-harm1" "NHQ1" 1) (om-load-inputfun (quote input-funbox) "Distance1" "D1" 0) (om-load-inputfun (quote input-funbox) "N-harm2" "NHQ2" 7) (om-load-inputfun (quote input-funbox) "Distance2" "D2" 0) (om-load-inputfun (quote input-funbox) "midicents or frequency" "MC-OR-F" "mc"))) (om-make-point 502 498) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD 3" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 469 273) (om-make-point 60 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (2980 4866 5742 5814 6550 7300)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point 400 23) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD 3" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 401 278) (om-make-point 60 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (3580 5054 5832 5900 6584 7300)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point 400 23) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD 3" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 427 635) (om-make-point 60 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (2980 4866 5742 5814 6550 7300)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point 400 23) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 423 379) (om-make-point 60 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (3980 4682 5176 5222 5724 6300)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point 400 23) (om-make-point 729 390) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DISTO" (quote disto) (quote ((om-load-inputfun (quote input-funbox) "Chord" "CHORD" (list 4800 5250 5400)) (om-load-inputfun (quote input-funbox) "minout" "MINOUT" 2980) (om-load-inputfun (quote input-funbox) "maxout" "MAXOUT" 7300))) (om-make-point 415 531) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 100 60) (quote "2 voices$") "" (om-make-point 882 384) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 666 580) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5882 5722 5176) (5724 6382 5880) (5882 5176 6380) (5878 5180 6382) (5726 6380 5882) (5726 6378 5884) (5726 3980 6380) (5396 4192 5726) (4192 5394 6398) (4200 5396 5726) (5398 6380 5726) (5724 6436 6380) (5724 6398 6926) (5726 4190 5392) (4190 5726 6402) (4192 5726 6300) (5726 6302 5398) (6380 5886 5396) (4190 5886 5724) (6588 5406 4684) (5726 5402 6436) (5724 6380 6434) (5444 4268 6388) (6382 5576 5188) (5600 6380 5722) (6382 6588 5884) (6384 5890 5596) (5884 6380 6300) (5220 5886 5608) (5678 4474 6430) (6378 5722 6430) (5726 6806 6378) (5724 6924 6428) (5720 6378 6928) (5720 5674 6378) (5728 6428 6924) (5724 6380 6928) (6382 5668 6434) (6382 5886 4188) (5886 6380 5726) (5394 5724 4182) (4244 5390 5728) (4348 5178 6380) (6408 5220 6364) (5724 6430 5886) (6380 5728 5578) (6380 5684 6436) (5714 6378 6930) (5712 6382 6802) (6430 6928 6800) (5724 6376 5176))) :lonset (quote (30 250 760 1060 1420 2420 2610 4760 5240 5450 5910 7540 8220 8900 10370 10780 11320 11510 12640 14120 14400 14800 15330 15650 16890 17230 17980 18380 19090 19590 20380 23140 23530 25400 25690 26270 26760 27350 28550 29400 30500 30740 31250 32310 32400 33130 33530 34550 35410 35740 36280 45940)) :ldur (quote ((220 220 220) (510 510 510) (300 300 300) (360 360 360) (1000 1000 1000) (190 190 190) (2150 2150 2150) (480 480 480) (210 210 210) (460 460 460) (1630 1630 1630) (680 680 680) (680 680 680) (1470 1470 1470) (410 410 410) (540 540 540) (190 190 190) (1130 1130 1130) (1480 1480 1480) (280 280 280) (400 400 400) (530 530 530) (320 320 320) (1240 1240 1240) (340 340 340) (750 750 750) (400 400 400) (710 710 710) (500 500 500) (790 790 790) (2760 2760 2760) (390 390 390) (1870 1870 1870) (290 290 290) (580 580 580) (490 490 490) (590 590 590) (1200 1200 1200) (850 850 850) (1100 1100 1100) (240 240 240) (510 510 510) (1060 1060 1060) (90 90 90) (730 730 730) (400 400 400) (1020 1020 1020) (860 860 860) (330 330 330) (540 540 540) (9660 9660 9660))) :lvel (quote ((52 49 44) (47 46 46) (78 73 62) (68 60 56) (77 58 56) (70 53 53) (59 58 56) (100 83 51) (79 63 51) (76 51 50) (60 53 50) (64 54 54) (76 53 48) (76 66 57) (68 66 59) (67 61 54) (57 55 54) (58 57 51) (52 50 47) (56 53 51) (54 54 51) (60 55 52) (58 56 50) (58 50 50) (63 59 50) (76 63 62) (64 56 48) (59 57 50) (52 50 49) (60 54 50) (59 58 52) (77 54 47) (71 49 47) (74 47 44) (71 70 56) (62 55 49) (78 62 53) (67 54 52) (65 62 62) (65 63 56) (72 64 59) (59 58 54) (57 55 54) (56 49 48) (69 54 50) (75 58 57) (66 66 60) (61 58 52) (58 54 52) (52 51 51) (51 49 46))) :loffset (quote ((0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0))) :lchan (quote ((1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.19 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 23) (om-make-point 892 380) 0 1000 nil 319/100 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 8)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 61) (quote "3 voices$") "" (om-make-point 686 554) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 887 438) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5882 5722) (5724 6382) (5882 5176) (5878 5180) (5726 6380) (5726 6378) (5726 3980) (5396 4192) (4192 5394) (4200 5396) (5398 6380) (5724 6436) (5724 6398) (5726 4190) (4190 5726) (4192 5726) (5726 6302) (6380 5886) (4190 5886) (6588 5406) (5726 5402) (5724 6380) (5444 4268) (6382 5576) (5600 6380) (6382 6588) (6384 5890) (5884 6380) (5220 5886) (5678 4474) (6378 5722) (5726 6806) (5724 6924) (5720 6378) (5720 5674) (5728 6428) (5724 6380) (6382 5668) (6382 5886) (5886 6380) (5394 5724) (4244 5390) (4348 5178) (6408 5220) (5724 6430) (6380 5728) (6380 5684) (5714 6378) (5712 6382) (6430 6928) (5724 6376))) :lonset (quote (30 250 760 1060 1420 2420 2610 4760 5240 5450 5910 7540 8220 8900 10370 10780 11320 11510 12640 14120 14400 14800 15330 15650 16890 17230 17980 18380 19090 19590 20380 23140 23530 25400 25690 26270 26760 27350 28550 29400 30500 30740 31250 32310 32400 33130 33530 34550 35410 35740 36280 45940)) :ldur (quote ((220 220) (510 510) (300 300) (360 360) (1000 1000) (190 190) (2150 2150) (480 480) (210 210) (460 460) (1630 1630) (680 680) (680 680) (1470 1470) (410 410) (540 540) (190 190) (1130 1130) (1480 1480) (280 280) (400 400) (530 530) (320 320) (1240 1240) (340 340) (750 750) (400 400) (710 710) (500 500) (790 790) (2760 2760) (390 390) (1870 1870) (290 290) (580 580) (490 490) (590 590) (1200 1200) (850 850) (1100 1100) (240 240) (510 510) (1060 1060) (90 90) (730 730) (400 400) (1020 1020) (860 860) (330 330) (540 540) (9660 9660))) :lvel (quote ((52 49) (47 46) (78 73) (68 60) (77 58) (70 53) (59 58) (100 83) (79 63) (76 51) (60 53) (64 54) (76 53) (76 66) (68 66) (67 61) (57 55) (58 57) (52 50) (56 53) (54 54) (60 55) (58 56) (58 50) (63 59) (76 63) (64 56) (59 57) (52 50) (60 54) (59 58) (77 54) (71 49) (74 47) (71 70) (62 55) (78 62) (67 54) (65 62) (65 63) (72 64) (59 58) (57 55) (56 49) (69 54) (75 58) (66 66) (61 58) (58 54) (52 51) (51 49))) :loffset (quote ((0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0))) :lchan (quote ((1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.19 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 23) (om-make-point 892 380) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 164 499) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5882 5722 5176 3968 6376 4680 6300 6430 5996 7082 6816 6772 6670 6594 6522 6254 6188 6072 5548 5448 5364 5008 4878 4486 3376 3242) (5724 6382 5880 5180 6298 3982 8338 8204 7502 7078 6930 6652 6592 5390 4698 4166 8828 8550 8284 6542 6006 5638) (5882 5176 6380 3976 7080 5726 8550 8282 6924 6588 8336 7788 6302 4680 8828 8056 7964 7502 6002 5408 8204 6770) (5878 5180 6382 4002 6584 5300 5606 4392 8282 7082 5796 5710 5454 5006 8550 6922 6298 4670 8334 8204 7964 7788 7502 6778 6652 5990) (5726 6380 5882 5180 6586 6924 3978 8828 8512 8282 7082 8020 7502 4684 8550 7966 6770) (5726 6378 5884 5194 6924 3988 8828 6674 8470 6588 6496 5626 5446 5372 4688 8512 8340 7264 7080) (5726 3980 6380 5178 5884 4682 6586 6924 6772 8828 8512 8336 8282 8058 8018 7966 7788 7082 5566 5386 7132 6298 6006) (5396 4192 5726 6096 6380 6598 6926 5888 4692 7304 6986 6018 5032 8606 8338 8186 8022 7968 7134 7082 6512 3386 3222) (4192 5394 6398 5728 6098 8300 6926 7590 5888 4686) (4200 5396 5726 6384 8206 6106 6298 6928 4684 8830 8704 7630 7502 6610 5884) (5398 6380 5726 5886 4198 6590 6098 7792 6430 7082 6302 5180 4686 8338 7968 6986 8512 8284 8060 7474 6928 6504 5616 8550) (5724 6436 6380 5886 5228 6926 8514 8024 7968 7606 7082 5362 5112 8828 6686 4398) (5724 6398 6926 5886 5228 8828 5414 4400 8512 7626 7606 6690 6594 5020 7082) (5726 4190 5392 6390 6924 6096 5226 8828 7606 6594 8550 8512 8338 8308 6700 6518 6002 4996 4796 7082) (4190 5726 6402 6924 7604 8310 6096 5398 5230 8828 8338 6600 6478 6284 4986 7084 6662 6230 5978 4582) (4192 5726 6300 6924 6380 5394 8204 6098 5224 8828 8702 7500 6590 7626 7082 6496) (5726 6302 5398 4236 5888 6592 6382 4428 6924 6504 8204 6112 5216 4974 6650 5996 5098 8700 7792 7500 6748 6202) (6380 5886 5396 5724 6588 6924 5230 6300 4188 8338 8020 7626 7082 6690 6098 4378 8828 8512 7966 6654 5010 4696) (4190 5886 5724 5398 6302 6588 4684 6430 6094 8336 7968 7302 7082 6382 5196 8282 8202 8020 7802 6984 6924 6510 6186 5080) (6588 5406 4684 5724 4184 8058 5890 5590 7792 6982 6432 6372 6336 6100 8850 8492 8338 8292 8018 7308 6016 5146 4978 4414 8680) (5726 5402 6436 5886 6376 6588 4194 6692 6096 5220 5104 6656 8338 6504 4422 6928 6006 8636 8288 8062 8020 7794 6246 4686) (5724 6380 6434 5888 4192 8204 6302 5230 6926 6098 5396 6592 5078 6694 6656 6524) (5444 4268 6388 5726 8206 6304 5906 5182 6614 6434 5574 5640 5078 4700 8284 8060 7790 6204 6094 7080 7050) (6382 5576 5188 4376 5726 6298 6430 8340 8204 7082 8552 8284 7968 6782 6598 5898 5412 8024 7792 6682 6476 6002) (5600 6380 5722 5180 6302 5888 6796 6432 4392 7082 6590 8338 8204 7968 5388 8734 8580 8020 7134 6924 6722 6698 6658 6496 6182 5990 5822 5026 4674) (6382 6588 5884 4386 5180 5588 6300 4688 7080 5732 5402 8552 7968 6680 8284 8058 7790 6498 6160 6012 4980 4022 8338 8308 8216 8172 7686 7134 6930 6782) (6384 5890 5596 5214 6592 5722 5328 8512 5012 8308 6680 5446 4150 8282 8020 7962 7628 7080) (5884 6380 6300 5724 5226 6588 8510 5598 7626 6924 8020 7080 4376 7966 5434 5014 4682 4148) (5220 5886 5608 6592 5718 4402 6434 6378 8340 7968 4704 8284 8022 7790 6306 5428 8512 8060 6926 5992 5044 6088) (5678 4474 6430 6376 5234 8338 8282 7966 7270 5428 5046 8606 8512 8020 7082 6924 6882 6628 6298 6192 6090 4710) (6378 5722 6430 6924 5228 6804 4472 8512 7626 8828 8338 8018 7966 7080 6696 6590 6104 5884 5394 5016 4294) (5726 6806 6378 6428 8512 8012 7626 6922 6676 5856 5416 5180 4472 8126 8066 6006 5060) (5724 6924 6428 6806 8510 5228 8018 6688 8898 8828 8334 7626 7132 6272 6114 5894 5478 4494) (5720 6378 6928 5230 5170 8510 8010 7622 6476 5430 5010 8836 8550 7964 7128 6806 6682 6602 6296 5974 5878 4490 4284 6192) (5720 5674 6378 4464 6922 5182 8510 7624 8602 8548 8016 7966 7130 6668 5002 8836 7262 7080 6872 6012 5844 5394) (5728 6428 6924 6380 4466 6806 5232 5452 8828 8634 8510 8336 8016 7626 6694 6574 6270 5004 8674 8122 7966 7310 7132 6110 5942 4202) (5724 6380 6928 6434 4394 8128 8018 6692 5352 5216 8514 7630 6812 6118 6026 5032 8900 8830 8550 7282 7134 7082 6588 6196 5570) (6382 5668 6434 5406 6928 5234 8342 4208 8832 8516 7084 8026 6664 6594 8724 8284 7632 6790 6494 6294 6206 6186 6110 5862 5020 8552 7138) (6382 5886 4188 6590 5184 6096 7084 5392 6926 5726 8060 7790 5664 4696 8552 8288 5586 5038 8492 8340 7970 7582 6980 6676 6508 6216 5996 8726 7300) (5886 6380 5726 6430 4190 6300 5390 5232 6928 6590 6094 5138 7082 8830 8340 6704 5582 5004 8514 8286 8204 8024 7966 7586 6792 6002 8074) (5394 5724 4182 6380 6096 5882 6300 6924 5186 8338 6592 4688 8512 8284 8202 8060 7500 7302 7082 6984 6680 6534 6218 6014 5574 5052 3886 8828 7966) (4244 5390 5728 5884 5234 6926 6602 6380 4704 7968 6302 5014 8552 8062 8024 7082 6516 6430 6096 8514 8340 6188 6018 8288 8204 6966) (4348 5178 6380 5558 7082 6594 5888 5724 6924 6432 8022 5414 8608 8338 7968 8284 5018 8062 6702 6296 6258 6004 4690 4106 8552 7790 7582 6496) (6408 5220 6364 5868 5586 5140 6582 4346 8018 6926 5374 8290 7080 6664 6510 8636 8342 7968 6258 5986 4710 8892 8330 7934 6758 6176 6096 5728 4192) (5724 6430 5886 6928 6694 5236 6588 6298 6112 5566 5348 8514 8018 5008 4522 4366 8828 8338 8330 8306 7630 7606 6188) (6380 5728 5578 4384 6300 6432 5208 6612 5904 6926 6660 4718 6778 6698 6486 5414 4956 8722 8316 8204 7502 7082 8740 8282 8068 6960 6822 6004) (6380 5684 6436 4480 5188 8340 6300 5056 6926 4292 8282 8022 6678 6100 8320 7966 7628 7276 6596 5414 8828 8550 8304 8204 7136 6164 5878 4676) (5714 6378 6930 6804 8336 8832 8006 6690 6436 5456 5356 5178 8068 7630 7080 6210 4472 4208 8130 6590 6538 6272 5878 4986) (5712 6382 6802 5234 6928 6426 5440 6694 6658 8830 6596 6486 8512 8316 8280 8018 7632 5830 4366 4194 7080 6278 5972 4972 4472) (6430 6928 6800 5234 5722 6384 5466 6590 6112 6702 6276 6670 8828 8634 8126 7078 6194 5906 4974 4528 4334 8338 8064 7628 6016) (5724 6376 5176 6426 6300 6924 8202 7500 7130 7080 6696 5332 4484 8828 8512 8334 8126 8018 7964 7626 6594 6542 6202 6108 5900 5446 5030 4650 4122))) :lonset (quote (30 250 760 1060 1420 2420 2610 4760 5240 5450 5910 7540 8220 8900 10370 10780 11320 11510 12640 14120 14400 14800 15330 15650 16890 17230 17980 18380 19090 19590 20380 23140 23530 25400 25690 26270 26760 27350 28550 29400 30500 30740 31250 32310 32400 33130 33530 34550 35410 35740 36280 45940)) :ldur (quote ((220 220 220 220 220 220 220 220 220 220 220 220 220 220 220 220 220 220 220 220 220 220 220 220 220 220) (510 510 510 510 510 510 510 510 510 510 510 510 510 510 510 510 510 510 510 510 510 510) (300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300) (360 360 360 360 360 360 360 360 360 360 360 360 360 360 360 360 360 360 360 360 360 360 360 360 360 360) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190) (2150 2150 2150 2150 2150 2150 2150 2150 2150 2150 2150 2150 2150 2150 2150 2150 2150 2150 2150 2150 2150 2150 2150) (480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480) (210 210 210 210 210 210 210 210 210 210) (460 460 460 460 460 460 460 460 460 460 460 460 460 460 460) (1630 1630 1630 1630 1630 1630 1630 1630 1630 1630 1630 1630 1630 1630 1630 1630 1630 1630 1630 1630 1630 1630 1630 1630) (680 680 680 680 680 680 680 680 680 680 680 680 680 680 680 680) (680 680 680 680 680 680 680 680 680 680 680 680 680 680 680) (1470 1470 1470 1470 1470 1470 1470 1470 1470 1470 1470 1470 1470 1470 1470 1470 1470 1470 1470 1470) (410 410 410 410 410 410 410 410 410 410 410 410 410 410 410 410 410 410 410 410) (540 540 540 540 540 540 540 540 540 540 540 540 540 540 540 540) (190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190 190) (1130 1130 1130 1130 1130 1130 1130 1130 1130 1130 1130 1130 1130 1130 1130 1130 1130 1130 1130 1130 1130 1130) (1480 1480 1480 1480 1480 1480 1480 1480 1480 1480 1480 1480 1480 1480 1480 1480 1480 1480 1480 1480 1480 1480 1480 1480) (280 280 280 280 280 280 280 280 280 280 280 280 280 280 280 280 280 280 280 280 280 280 280 280 280) (400 400 400 400 400 400 400 400 400 400 400 400 400 400 400 400 400 400 400 400 400 400 400 400) (530 530 530 530 530 530 530 530 530 530 530 530 530 530 530 530) (320 320 320 320 320 320 320 320 320 320 320 320 320 320 320 320 320 320 320 320 320) (1240 1240 1240 1240 1240 1240 1240 1240 1240 1240 1240 1240 1240 1240 1240 1240 1240 1240 1240 1240 1240 1240) (340 340 340 340 340 340 340 340 340 340 340 340 340 340 340 340 340 340 340 340 340 340 340 340 340 340 340 340 340) (750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750) (400 400 400 400 400 400 400 400 400 400 400 400 400 400 400 400 400 400) (710 710 710 710 710 710 710 710 710 710 710 710 710 710 710 710 710 710) (500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500) (790 790 790 790 790 790 790 790 790 790 790 790 790 790 790 790 790 790 790 790 790 790) (2760 2760 2760 2760 2760 2760 2760 2760 2760 2760 2760 2760 2760 2760 2760 2760 2760 2760 2760 2760 2760) (390 390 390 390 390 390 390 390 390 390 390 390 390 390 390 390 390) (1870 1870 1870 1870 1870 1870 1870 1870 1870 1870 1870 1870 1870 1870 1870 1870 1870 1870) (290 290 290 290 290 290 290 290 290 290 290 290 290 290 290 290 290 290 290 290 290 290 290 290) (580 580 580 580 580 580 580 580 580 580 580 580 580 580 580 580 580 580 580 580 580 580) (490 490 490 490 490 490 490 490 490 490 490 490 490 490 490 490 490 490 490 490 490 490 490 490 490 490) (590 590 590 590 590 590 590 590 590 590 590 590 590 590 590 590 590 590 590 590 590 590 590 590 590) (1200 1200 1200 1200 1200 1200 1200 1200 1200 1200 1200 1200 1200 1200 1200 1200 1200 1200 1200 1200 1200 1200 1200 1200 1200 1200 1200) (850 850 850 850 850 850 850 850 850 850 850 850 850 850 850 850 850 850 850 850 850 850 850 850 850 850 850 850 850) (1100 1100 1100 1100 1100 1100 1100 1100 1100 1100 1100 1100 1100 1100 1100 1100 1100 1100 1100 1100 1100 1100 1100 1100 1100 1100 1100) (240 240 240 240 240 240 240 240 240 240 240 240 240 240 240 240 240 240 240 240 240 240 240 240 240 240 240 240 240) (510 510 510 510 510 510 510 510 510 510 510 510 510 510 510 510 510 510 510 510 510 510 510 510 510 510) (1060 1060 1060 1060 1060 1060 1060 1060 1060 1060 1060 1060 1060 1060 1060 1060 1060 1060 1060 1060 1060 1060 1060 1060 1060 1060 1060 1060) (90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90) (730 730 730 730 730 730 730 730 730 730 730 730 730 730 730 730 730 730 730 730 730 730 730) (400 400 400 400 400 400 400 400 400 400 400 400 400 400 400 400 400 400 400 400 400 400 400 400 400 400 400 400) (1020 1020 1020 1020 1020 1020 1020 1020 1020 1020 1020 1020 1020 1020 1020 1020 1020 1020 1020 1020 1020 1020 1020 1020 1020 1020 1020 1020) (860 860 860 860 860 860 860 860 860 860 860 860 860 860 860 860 860 860 860 860 860 860 860 860) (330 330 330 330 330 330 330 330 330 330 330 330 330 330 330 330 330 330 330 330 330 330 330 330 330) (540 540 540 540 540 540 540 540 540 540 540 540 540 540 540 540 540 540 540 540 540 540 540 540 540) (9660 9660 9660 9660 9660 9660 9660 9660 9660 9660 9660 9660 9660 9660 9660 9660 9660 9660 9660 9660 9660 9660 9660 9660 9660 9660 9660 9660 9660))) :lvel (quote ((52 49 44 44 43 43 42 41 41 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40) (47 46 46 45 44 43 42 42 42 42 42 42 42 42 42 42 41 41 41 41 41 41) (78 73 62 59 46 45 44 44 44 44 43 43 43 43 42 42 42 42 42 42 41 41) (68 60 56 56 48 47 45 45 44 44 44 44 44 44 43 43 43 43 42 42 42 42 42 42 42 42) (77 58 56 51 48 47 47 43 43 43 43 42 42 42 41 41 41) (70 53 53 47 45 45 43 43 42 42 42 42 42 42 42 41 41 41 41) (59 58 56 56 55 45 44 43 42 41 41 41 41 41 41 41 41 41 41 41 40 40 40) (100 83 51 50 48 44 42 42 42 41 41 41 41 40 40 40 40 40 40 40 40 40 40) (79 63 51 49 47 45 43 42 42 42) (76 51 50 46 44 44 43 42 42 41 41 41 41 41 41) (60 53 50 48 46 45 45 44 44 43 43 43 43 42 42 42 41 41 41 41 41 41 41 40) (64 54 54 50 46 44 43 43 43 43 43 43 43 42 42 42) (76 53 48 44 44 43 43 43 42 42 42 42 42 42 41) (76 66 57 49 47 47 43 42 42 42 41 41 41 41 41 41 41 41 41 40) (68 66 59 46 43 42 42 42 42 41 41 41 41 41 41 40 40 40 40 40) (67 61 54 45 45 44 43 42 42 41 41 41 41 40 40 40) (57 55 54 52 47 46 46 45 44 44 43 43 43 43 42 42 42 41 41 41 41 41) (58 57 51 50 49 46 46 45 45 43 42 42 42 42 42 42 41 41 41 41 41 41) (52 50 47 46 45 44 43 42 42 41 41 41 41 41 41 40 40 40 40 40 40 40 40 40) (56 53 51 49 48 44 44 43 42 42 42 42 42 42 41 41 41 41 41 41 41 41 41 41 40) (54 54 51 51 50 49 48 47 46 46 46 45 44 44 44 43 43 42 42 42 42 42 42 42) (60 55 52 50 48 47 46 46 45 45 45 44 43 42 42 42) (58 56 50 50 47 47 47 47 45 45 44 43 43 43 42 42 42 42 42 41 41) (58 50 50 50 46 45 44 43 43 43 42 42 42 42 42 42 42 41 41 41 41 41) (63 59 50 49 47 47 46 46 46 43 43 42 42 42 42 41 41 41 41 41 41 41 41 41 41 41 41 41 41) (76 63 62 55 50 48 46 45 44 44 44 43 43 43 42 42 42 42 42 42 42 42 41 41 41 41 41 41 41 41) (64 56 48 48 47 47 45 44 44 43 43 43 43 42 42 42 42 42) (59 57 50 49 47 46 44 44 43 43 42 42 42 41 41 41 41 41) (52 50 49 48 47 47 45 45 44 44 44 43 43 43 43 43 42 42 42 42 42 41) (60 54 50 48 46 44 42 42 42 42 42 41 41 41 41 41 41 41 41 41 41 41) (59 58 52 45 45 44 44 42 42 41 41 41 41 41 41 41 41 41 41 41 41) (77 54 47 45 43 42 42 42 42 42 42 42 42 41 41 41 41) (71 49 47 44 43 43 42 42 41 41 41 41 41 41 41 41 41 41) (74 47 44 44 44 42 42 42 42 42 42 41 41 41 41 41 41 41 41 41 41 41 41 40) (71 70 56 50 44 44 42 42 41 41 41 41 41 41 41 40 40 40 40 40 40 40) (62 55 49 48 48 47 44 43 42 42 42 42 42 42 42 42 42 42 41 41 41 41 41 41 41 41) (78 62 53 47 46 45 44 44 44 44 43 43 43 43 43 43 42 42 42 42 42 42 42 42 42) (67 54 52 50 49 49 47 45 44 44 44 43 43 43 42 42 42 42 42 42 42 42 42 42 42 41 41) (65 62 62 54 54 53 49 48 45 45 44 44 44 44 43 43 43 43 42 42 42 42 42 42 42 42 42 41 41) (65 63 56 51 48 47 47 46 45 45 45 45 44 43 43 43 43 43 42 42 42 42 42 42 42 42 41) (72 64 59 52 50 47 45 44 44 43 43 43 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 41 41) (59 58 54 53 49 46 46 45 45 44 44 44 43 43 43 43 43 43 43 42 42 42 42 41 41 41) (57 55 54 49 47 47 47 47 46 46 45 45 44 44 44 43 43 42 42 42 42 42 42 42 41 41 41 41) (56 49 48 48 48 48 46 46 45 45 45 44 44 44 44 43 43 43 43 43 43 42 42 42 42 42 42 42 42) (69 54 50 49 47 47 45 45 45 45 45 44 43 43 43 43 42 42 42 42 42 42 42) (75 58 57 53 52 51 50 45 45 44 44 44 43 43 43 43 43 42 42 42 42 42 41 41 41 41 41 41) (66 66 60 51 49 45 45 45 44 44 43 43 43 43 42 42 42 42 42 42 41 41 41 41 41 41 41 41) (61 58 52 51 45 44 44 44 44 44 44 44 43 43 43 43 43 43 42 42 42 42 42 42) (58 54 52 51 49 47 47 45 45 44 44 44 43 43 43 43 43 43 43 43 42 42 42 42 42) (52 51 51 50 49 47 47 46 46 45 45 44 43 43 43 43 43 43 43 43 43 42 42 42 42) (51 49 46 45 45 43 41 41 41 41 41 41 41 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40))) :loffset (quote ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))) :lchan (quote ((1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.19 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 23) (om-make-point 892 380) 0 1000 nil 319/100 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 8)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "10 voices$") "" (om-make-point 695 407) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 706 439) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5882 5722 5176 3968 6376 4680 6300 6430 5996 7082) (5724 6382 5880 5180 6298 3982 8338 8204 7502 7078) (5882 5176 6380 3976 7080 5726 8550 8282 6924 6588) (5878 5180 6382 4002 6584 5300 5606 4392 8282 7082) (5726 6380 5882 5180 6586 6924 3978 8828 8512 8282) (5726 6378 5884 5194 6924 3988 8828 6674 8470 6588) (5726 3980 6380 5178 5884 4682 6586 6924 6772 8828) (5396 4192 5726 6096 6380 6598 6926 5888 4692 7304) (4192 5394 6398 5728 6098 8300 6926 7590 5888 4686) (4200 5396 5726 6384 8206 6106 6298 6928 4684 8830) (5398 6380 5726 5886 4198 6590 6098 7792 6430 7082) (5724 6436 6380 5886 5228 6926 8514 8024 7968 7606) (5724 6398 6926 5886 5228 8828 5414 4400 8512 7626) (5726 4190 5392 6390 6924 6096 5226 8828 7606 6594) (4190 5726 6402 6924 7604 8310 6096 5398 5230 8828) (4192 5726 6300 6924 6380 5394 8204 6098 5224 8828) (5726 6302 5398 4236 5888 6592 6382 4428 6924 6504) (6380 5886 5396 5724 6588 6924 5230 6300 4188 8338) (4190 5886 5724 5398 6302 6588 4684 6430 6094 8336) (6588 5406 4684 5724 4184 8058 5890 5590 7792 6982) (5726 5402 6436 5886 6376 6588 4194 6692 6096 5220) (5724 6380 6434 5888 4192 8204 6302 5230 6926 6098) (5444 4268 6388 5726 8206 6304 5906 5182 6614 6434) (6382 5576 5188 4376 5726 6298 6430 8340 8204 7082) (5600 6380 5722 5180 6302 5888 6796 6432 4392 7082) (6382 6588 5884 4386 5180 5588 6300 4688 7080 5732) (6384 5890 5596 5214 6592 5722 5328 8512 5012 8308) (5884 6380 6300 5724 5226 6588 8510 5598 7626 6924) (5220 5886 5608 6592 5718 4402 6434 6378 8340 7968) (5678 4474 6430 6376 5234 8338 8282 7966 7270 5428) (6378 5722 6430 6924 5228 6804 4472 8512 7626 8828) (5726 6806 6378 6428 8512 8012 7626 6922 6676 5856) (5724 6924 6428 6806 8510 5228 8018 6688 8898 8828) (5720 6378 6928 5230 5170 8510 8010 7622 6476 5430) (5720 5674 6378 4464 6922 5182 8510 7624 8602 8548) (5728 6428 6924 6380 4466 6806 5232 5452 8828 8634) (5724 6380 6928 6434 4394 8128 8018 6692 5352 5216) (6382 5668 6434 5406 6928 5234 8342 4208 8832 8516) (6382 5886 4188 6590 5184 6096 7084 5392 6926 5726) (5886 6380 5726 6430 4190 6300 5390 5232 6928 6590) (5394 5724 4182 6380 6096 5882 6300 6924 5186 8338) (4244 5390 5728 5884 5234 6926 6602 6380 4704 7968) (4348 5178 6380 5558 7082 6594 5888 5724 6924 6432) (6408 5220 6364 5868 5586 5140 6582 4346 8018 6926) (5724 6430 5886 6928 6694 5236 6588 6298 6112 5566) (6380 5728 5578 4384 6300 6432 5208 6612 5904 6926) (6380 5684 6436 4480 5188 8340 6300 5056 6926 4292) (5714 6378 6930 6804 8336 8832 8006 6690 6436 5456) (5712 6382 6802 5234 6928 6426 5440 6694 6658 8830) (6430 6928 6800 5234 5722 6384 5466 6590 6112 6702) (5724 6376 5176 6426 6300 6924 8202 7500 7130 7080))) :lonset (quote (30 250 760 1060 1420 2420 2610 4760 5240 5450 5910 7540 8220 8900 10370 10780 11320 11510 12640 14120 14400 14800 15330 15650 16890 17230 17980 18380 19090 19590 20380 23140 23530 25400 25690 26270 26760 27350 28550 29400 30500 30740 31250 32310 32400 33130 33530 34550 35410 35740 36280 45940)) :ldur (quote ((220 220 220 220 220 220 220 220 220 220) (510 510 510 510 510 510 510 510 510 510) (300 300 300 300 300 300 300 300 300 300) (360 360 360 360 360 360 360 360 360 360) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (190 190 190 190 190 190 190 190 190 190) (2150 2150 2150 2150 2150 2150 2150 2150 2150 2150) (480 480 480 480 480 480 480 480 480 480) (210 210 210 210 210 210 210 210 210 210) (460 460 460 460 460 460 460 460 460 460) (1630 1630 1630 1630 1630 1630 1630 1630 1630 1630) (680 680 680 680 680 680 680 680 680 680) (680 680 680 680 680 680 680 680 680 680) (1470 1470 1470 1470 1470 1470 1470 1470 1470 1470) (410 410 410 410 410 410 410 410 410 410) (540 540 540 540 540 540 540 540 540 540) (190 190 190 190 190 190 190 190 190 190) (1130 1130 1130 1130 1130 1130 1130 1130 1130 1130) (1480 1480 1480 1480 1480 1480 1480 1480 1480 1480) (280 280 280 280 280 280 280 280 280 280) (400 400 400 400 400 400 400 400 400 400) (530 530 530 530 530 530 530 530 530 530) (320 320 320 320 320 320 320 320 320 320) (1240 1240 1240 1240 1240 1240 1240 1240 1240 1240) (340 340 340 340 340 340 340 340 340 340) (750 750 750 750 750 750 750 750 750 750) (400 400 400 400 400 400 400 400 400 400) (710 710 710 710 710 710 710 710 710 710) (500 500 500 500 500 500 500 500 500 500) (790 790 790 790 790 790 790 790 790 790) (2760 2760 2760 2760 2760 2760 2760 2760 2760 2760) (390 390 390 390 390 390 390 390 390 390) (1870 1870 1870 1870 1870 1870 1870 1870 1870 1870) (290 290 290 290 290 290 290 290 290 290) (580 580 580 580 580 580 580 580 580 580) (490 490 490 490 490 490 490 490 490 490) (590 590 590 590 590 590 590 590 590 590) (1200 1200 1200 1200 1200 1200 1200 1200 1200 1200) (850 850 850 850 850 850 850 850 850 850) (1100 1100 1100 1100 1100 1100 1100 1100 1100 1100) (240 240 240 240 240 240 240 240 240 240) (510 510 510 510 510 510 510 510 510 510) (1060 1060 1060 1060 1060 1060 1060 1060 1060 1060) (90 90 90 90 90 90 90 90 90 90) (730 730 730 730 730 730 730 730 730 730) (400 400 400 400 400 400 400 400 400 400) (1020 1020 1020 1020 1020 1020 1020 1020 1020 1020) (860 860 860 860 860 860 860 860 860 860) (330 330 330 330 330 330 330 330 330 330) (540 540 540 540 540 540 540 540 540 540) (9660 9660 9660 9660 9660 9660 9660 9660 9660 9660))) :lvel (quote ((52 49 44 44 43 43 42 41 41 40) (47 46 46 45 44 43 42 42 42 42) (78 73 62 59 46 45 44 44 44 44) (68 60 56 56 48 47 45 45 44 44) (77 58 56 51 48 47 47 43 43 43) (70 53 53 47 45 45 43 43 42 42) (59 58 56 56 55 45 44 43 42 41) (100 83 51 50 48 44 42 42 42 41) (79 63 51 49 47 45 43 42 42 42) (76 51 50 46 44 44 43 42 42 41) (60 53 50 48 46 45 45 44 44 43) (64 54 54 50 46 44 43 43 43 43) (76 53 48 44 44 43 43 43 42 42) (76 66 57 49 47 47 43 42 42 42) (68 66 59 46 43 42 42 42 42 41) (67 61 54 45 45 44 43 42 42 41) (57 55 54 52 47 46 46 45 44 44) (58 57 51 50 49 46 46 45 45 43) (52 50 47 46 45 44 43 42 42 41) (56 53 51 49 48 44 44 43 42 42) (54 54 51 51 50 49 48 47 46 46) (60 55 52 50 48 47 46 46 45 45) (58 56 50 50 47 47 47 47 45 45) (58 50 50 50 46 45 44 43 43 43) (63 59 50 49 47 47 46 46 46 43) (76 63 62 55 50 48 46 45 44 44) (64 56 48 48 47 47 45 44 44 43) (59 57 50 49 47 46 44 44 43 43) (52 50 49 48 47 47 45 45 44 44) (60 54 50 48 46 44 42 42 42 42) (59 58 52 45 45 44 44 42 42 41) (77 54 47 45 43 42 42 42 42 42) (71 49 47 44 43 43 42 42 41 41) (74 47 44 44 44 42 42 42 42 42) (71 70 56 50 44 44 42 42 41 41) (62 55 49 48 48 47 44 43 42 42) (78 62 53 47 46 45 44 44 44 44) (67 54 52 50 49 49 47 45 44 44) (65 62 62 54 54 53 49 48 45 45) (65 63 56 51 48 47 47 46 45 45) (72 64 59 52 50 47 45 44 44 43) (59 58 54 53 49 46 46 45 45 44) (57 55 54 49 47 47 47 47 46 46) (56 49 48 48 48 48 46 46 45 45) (69 54 50 49 47 47 45 45 45 45) (75 58 57 53 52 51 50 45 45 44) (66 66 60 51 49 45 45 45 44 44) (61 58 52 51 45 44 44 44 44 44) (58 54 52 51 49 47 47 45 45 44) (52 51 51 50 49 47 47 46 46 45) (51 49 46 45 45 43 41 41 41 41))) :loffset (quote ((0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0))) :lchan (quote ((1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.19 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 23) (om-make-point 906 447) 0 1000 nil 97/25 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 8)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "AS->OM" (quote as->om) (quote ((om-load-inputfun (quote input-funbox) "Analyse" "ANALYSE" nil) (om-load-inputfun (quote input-funbox) "vel min" "VMIN" 40) (om-load-inputfun (quote input-funbox) "vel max" "VMAX" 100) (om-load-inputfun (quote input-funbox) "delta" "DELTA" 5) (om-load-inputfun (quote input-funbox) "midic min" "MMIN" 2000) (om-load-inputfun (quote input-funbox) "midic max" "MMAX" 9000) (om-load-inputfun (quote input-funbox) "approx" "APPROX" 8) (om-load-inputfun (quote input-funbox) "poly. density" "NPOLY" 30))) (om-make-point 174 406) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "New Recording 68-cs.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 190 340) (om-make-point 70 50) (let ((newobj (load-sdif-file (om-make-pathname :directory (quote (:absolute "Users" "samdvorin" "Desktop" "music" "audiosculpt" "ChordSeqs")) :device nil :host nil :name "New Recording 68-cs" :type "sdif")))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 400 500) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "unrounded$") "" (om-make-point 708 238) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "rounded$") "" (om-make-point 764 28) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD 2" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 995 253) (om-make-point 60 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (4484 4682 5176 5222 5724 6816)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point 400 23) (om-make-point 645 293) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 8)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD 2" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 915 262) (om-make-point 60 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (4184 4386 5176 5222 5724 6300)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point 400 23) (om-make-point 721 331) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 8)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD 2" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 824 270) (om-make-point 60 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (4184 4682 5176 5222 5724 6300)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point 400 23) (om-make-point 635 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 8)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD 2" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 752 266) (om-make-point 60 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (3980 4682 5176 5222 5724 6300)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point 400 23) (om-make-point 616 293) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 8)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 1010 53) (om-make-point 60 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (4484 4682 5176 5222 5724 6816)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point 400 23) (om-make-point 729 390) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 949 54) (om-make-point 60 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (4184 4386 5176 5222 5724 6300)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point 400 23) (om-make-point 729 390) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 865 53) (om-make-point 60 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (4184 4682 5176 5222 5724 6300)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point 400 23) (om-make-point 729 390) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 794 56) (om-make-point 60 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (3980 4682 5176 5222 5724 6300)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point 400 23) (om-make-point 729 390) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 112 229) (om-make-point 197 30) (list 109 122.2 162.5 167 223 419) "(109 122.2 162.5 167 223 419)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 87 167) (om-make-point 190 30) (list 91.6 103 162.5 167 223 311) "(91.6 103 162.5 167 223 311)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 97 125) (om-make-point 201 30) (list 91.6 122.2 162.5 167 223 311) "(91.6 122.2 162.5 167 223 311)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 103 69) (om-make-point 201 30) (list 81.5 122.2 162.5 167 223 311) "(81.5 122.2 162.5 167 223 311)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 1 1 nil 0) (7 0 5 0 nil 0) (6 1 7 0 nil 0) (15 0 12 0 nil 0) (16 0 15 0 nil 0))) nil 6.19))
