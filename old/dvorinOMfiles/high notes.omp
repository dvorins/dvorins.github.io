; OM File Header - Saved 2023/10/10 17:09:28
; (7.01 :patc (om-make-point 1 10) (om-make-point 536 44) (om-make-point 500 400) "" 183 0 "2022/02/08 21:54:16" "2022/02/08 22:21:27")
; End File Header
; External resources 
; (list (list (quote :sdif) "#P\"../../../audiosculpt/ChordSeqs/highnotes.sdif\"") (list (quote :midi) "#P\"../../../../../Downloads/highnotes.mid\""))
(in-package :om)(load-lib-for (quote ("Repmus")))(setf *om-current-persistent* (om-load-patch1 "high notes" (quote ((let ((box (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 337 257) (om-make-point 130 70) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (95/4 (((4 4) (-1 (1 (-1 1)) 1.0 (1 (3.0 4 1.0)))) ((4 4) (2.0 1 (1 (1 1)))) ((4 4) (3.0 (1 (2.0 3)))) ((4 4) (1.0 (1 (1.0 7)) 2.0)) ((4 4) (1.0 (1 (4.0 3)) 2.0)) ((4 4) (2.0 2)) ((4 4) (1 (1 (1.0 3)) 2.0)) ((4 4) ((1 (7.0 1)) 3.0)) ((4 4) (3.0 (1 (4.0 1.0 2)))) ((4 4) ((1 (4.0 1)) 1.0 (1 (1.0 4)) 1.0)) ((4 4) ((1 (1.0 3)) 1.0 (1 (1.0 1)) 1.0)) ((4 4) ((1 (7.0 1)) 2.0 (1 (1.0 4)))) ((4 4) (1.0 3)) ((4 4) ((1 (2.0 4 1.0)) 1.0 (1 (3.0 4 1.0)) 1.0)) ((4 4) ((1 (1.0 6)) 1.0 (1 (2.0 1)) (1 (1.0 2)))) ((4 4) (1.0 (1 (1.0 1)) 1.0 (1 (1.0 7)))) ((4 4) ((1 (3.0 1)) (1 (7.0 1)) 2.0)) ((4 4) ((1 (4.0 3)) 1.0 (1 (4.0 1.0 2)) 1.0)) ((4 4) ((1 (2.0 1)) 1.0 (1 (1.0 1)) (1 (4.0 1)))) ((4 4) (1.0 1 (1 (1.0 3)) (1 (1.0 1)))) ((4 4) (1.0 1 2)) ((4 4) ((1 (7.0 1)) 2.0 1)) ((4 4) ((1 (1.0 6)) (1 (1.0 7)) (1 (4.0 3)) (1 (1.0 1)))) ((3 4) (1.0 (1 (1.0 4 1.0)) (1 (1.0 -4 -1.0))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8300 8300)) :ldur (quote (500 500)) :lvel (quote (44 45)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300 8300)) :ldur (quote (500 500)) :lvel (quote (44 53)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300 8300)) :ldur (quote (1000 1000)) :lvel (quote (44 68)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300 8200)) :ldur (quote (500 500)) :lvel (quote (50 51)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300 7800)) :ldur (quote (500 500)) :lvel (quote (54 56)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300 7200)) :ldur (quote (600 600)) :lvel (quote (44 48)) :loffset (quote (0 0)) :lchan (quote (3 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200 7200)) :ldur (quote (875 875)) :lvel (quote (50 83)) :loffset (quote (0 0)) :lchan (quote (3 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 7200)) :ldur (quote (429 429)) :lvel (quote (57 92)) :loffset (quote (0 0)) :lchan (quote (3 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200 7200)) :ldur (quote (2000 2000)) :lvel (quote (49 54)) :loffset (quote (0 0)) :lchan (quote (3 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200 7200)) :ldur (quote (1000 1000)) :lvel (quote (49 52)) :loffset (quote (0 0)) :lchan (quote (3 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400 8300)) :ldur (quote (750 750)) :lvel (quote (45 47)) :loffset (quote (0 0)) :lchan (quote (1 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500 8300)) :ldur (quote (125 125)) :lvel (quote (40 42)) :loffset (quote (0 0)) :lchan (quote (1 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300 8300)) :ldur (quote (286 286)) :lvel (quote (58 78)) :loffset (quote (0 0)) :lchan (quote (1 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800 7300)) :ldur (quote (200 200)) :lvel (quote (68 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200 7300)) :ldur (quote (800 800)) :lvel (quote (63 64)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400 7200)) :ldur (quote (750 750)) :lvel (quote (58 75)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200 8400)) :ldur (quote (500 500)) :lvel (quote (45 46)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300 7500)) :ldur (quote (125 125)) :lvel (quote (60 69)) :loffset (quote (0 0)) :lchan (quote (3 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300 7800)) :ldur (quote (800 800)) :lvel (quote (58 84)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300 7800)) :ldur (quote (3000 3000)) :lvel (quote (58 91)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200 8300)) :ldur (quote (571 571)) :lvel (quote (46 49)) :loffset (quote (0 0)) :lchan (quote (1 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300 7500)) :ldur (quote (500 500)) :lvel (quote (53 63)) :loffset (quote (0 0)) :lchan (quote (3 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500 7900)) :ldur (quote (857 857)) :lvel (quote (66 74)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200 7200)) :ldur (quote (333 333)) :lvel (quote (65 90)) :loffset (quote (0 0)) :lchan (quote (1 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700 7200)) :ldur (quote (667 667)) :lvel (quote (74 87)) :loffset (quote (0 0)) :lchan (quote (1 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400 7900)) :ldur (quote (500 500)) :lvel (quote (65 69)) :loffset (quote (0 0)) :lchan (quote (3 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900 7400)) :ldur (quote (875 875)) :lvel (quote (65 67)) :loffset (quote (0 0)) :lchan (quote (1 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200 7700)) :ldur (quote (250 250)) :lvel (quote (70 86)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700 7700)) :ldur (quote (125 125)) :lvel (quote (57 64)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800 7300)) :ldur (quote (429 429)) :lvel (quote (59 61)) :loffset (quote (0 0)) :lchan (quote (1 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300 7800)) :ldur (quote (286 286)) :lvel (quote (63 82)) :loffset (quote (0 0)) :lchan (quote (3 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300 7800)) :ldur (quote (333 333)) :lvel (quote (52 75)) :loffset (quote (0 0)) :lchan (quote (3 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800 7700)) :ldur (quote (500 500)) :lvel (quote (55 59)) :loffset (quote (0 0)) :lchan (quote (1 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400 7500)) :ldur (quote (200 200)) :lvel (quote (57 61)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900 7900)) :ldur (quote (1000 1000)) :lvel (quote (52 54)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200 6700)) :ldur (quote (750 750)) :lvel (quote (67 68)) :loffset (quote (0 0)) :lchan (quote (1 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300 7900)) :ldur (quote (500 500)) :lvel (quote (71 95)) :loffset (quote (0 0)) :lchan (quote (3 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800 7400)) :ldur (quote (1000 1000)) :lvel (quote (63 68)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8300 7800)) :ldur (quote (2000 2000)) :lvel (quote (51 52)) :loffset (quote (0 0)) :lchan (quote (3 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600 7900)) :ldur (quote (125 125)) :lvel (quote (70 84)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800 7800)) :ldur (quote (1000 1000)) :lvel (quote (70 94)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400 5800)) :ldur (quote (857 857)) :lvel (quote (57 59)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400 5700)) :ldur (quote (875 875)) :lvel (quote (52 57)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 5700)) :ldur (quote (429 429)) :lvel (quote (48 54)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400 7400)) :ldur (quote (500 500)) :lvel (quote (59 63)) :loffset (quote (0 0)) :lchan (quote (3 3))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400 5700)) :ldur (quote (667 667)) :lvel (quote (46 53)) :loffset (quote (0 0)) :lchan (quote (3 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.19 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 0 23) (om-make-point 1440 818) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "highnotes.mid" (quote midifile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 269 22) (om-make-point 50 72) (let ((newobj (load-midi (om-make-pathname :directory (quote (:absolute "Users" "samdvorin" "Downloads")) :device nil :host nil :name "highnotes" :type "mid")))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "highnotes.mid") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems winpos winsize mode grillestep notechancolor? cmnpref obj-mode zoom deltapict player outport)) (list nil (quote t) (om-make-point 10 40) (om-make-point 370 280) 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 1 (om-make-point 0 0) (quote :midi-player) 0)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 98 253) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8334 8346) (8348 8370) (8348 8328) (8228 8350) (7846 8348) (7186 8348) (7186 7226) (7186 7150) (7188 7226) (7186 7228) (8348 8402) (8348 8514) (8348 7294) (7294 7778) (7294 7186) (7186 8382) (8386 7188) (7488 8348) (7844 7362) (7844 7362) (8360 7186) (7488 8358) (7892 7488) (7228 7190) (7226 7716) (7894 7450) (7454 7906) (7692 7186) (7688 7714) (7360 7792) (7790 8350) (7792 7328) (7740 7792) (7490 7396) (7918 7892) (6772 7186) (7892 8370) (7396 7792) (7792 8368) (7880 7576) (7778 5824) (5818 7422) (5702 7422) (5692 6910) (7432 7460) (5682 7460))) :lonset (quote (1510 3370 6020 6740 7530 11400 13120 17570 22020 24020 25240 28900 35710 36790 38220 40230 42530 44890 47190 48980 52280 54360 56150 58660 59310 61530 63110 64760 65910 68560 70710 72650 74510 75800 77020 78240 79530 81040 81970 84910 87060 88140 89070 90580 91510 93160 94380)) :ldur (quote ((1860 1860) (2650 2650) (720 720) (790 790) (3870 3870) (1720 1720) (4450 4450) (4450 4450) (2000 2000) (1220 1220) (3660 3660) (6810 6810) (1080 1080) (1430 1430) (2010 2010) (2300 2300) (2360 2360) (2300 2300) (1790 1790) (3300 3300) (2080 2080) (1790 1790) (2510 2510) (650 650) (2220 2220) (1580 1580) (1650 1650) (1150 1150) (2650 2650) (2150 2150) (1940 1940) (1860 1860) (1290 1290) (1220 1220) (1220 1220) (1290 1290) (1510 1510) (930 930) (2940 2940) (2150 2150) (1080 1080) (930 930) (1510 1510) (930 930) (1650 1650) (1220 1220))) :lvel (quote ((45 44) (53 44) (68 44) (51 50) (56 54) (48 44) (83 50) (92 57) (54 49) (52 49) (47 45) (42 40) (78 58) (100 68) (64 63) (75 58) (46 45) (69 60) (84 58) (91 58) (49 46) (63 53) (74 66) (90 65) (87 74) (69 65) (67 65) (86 70) (64 57) (61 59) (82 63) (75 52) (59 55) (61 57) (54 52) (68 67) (95 71) (68 63) (52 51) (84 70) (94 70) (59 57) (57 52) (54 48) (63 59) (53 46))) :loffset (quote ((0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0))) :lchan (quote ((1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.19 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 23) (om-make-point 884 367) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CREATE-MIDISEQ" (quote create-midiseq) (quote ((om-load-inputfun (quote input-funbox) "and object" "SELF" nil))) (om-make-point 321 146) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "AS->OM" (quote as->om) (quote ((om-load-inputfun (quote input-funbox) "Analyse" "ANALYSE" nil) (om-load-inputfun (quote input-funbox) "vel min" "VMIN" 40) (om-load-inputfun (quote input-funbox) "vel max" "VMAX" 100) (om-load-inputfun (quote input-funbox) "delta" "DELTA" 5) (om-load-inputfun (quote input-funbox) "midic min" "MMIN" 4000) (om-load-inputfun (quote input-funbox) "midic max" "MMAX" 8600) (om-load-inputfun (quote input-funbox) "approx" "APPROX" 8) (om-load-inputfun (quote input-funbox) "poly. density" "NPOLY" 2))) (om-make-point 98 131) nil (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8334 8346) (8348 8370) (8348 8328) (8228 8350) (7846 8348) (7186 8348) (7186 7226) (7186 7150) (7188 7226) (7186 7228) (8348 8402) (8348 8514) (8348 7294) (7294 7778) (7294 7186) (7186 8382) (8386 7188) (7488 8348) (7844 7362) (7844 7362) (8360 7186) (7488 8358) (7892 7488) (7228 7190) (7226 7716) (7894 7450) (7454 7906) (7692 7186) (7688 7714) (7360 7792) (7790 8350) (7792 7328) (7740 7792) (7490 7396) (7918 7892) (6772 7186) (7892 8370) (7396 7792) (7792 8368) (7880 7576) (7778 5824) (5818 7422) (5702 7422) (5692 6910) (7432 7460) (5682 7460))) :lonset (quote (1510 3370 6020 6740 7530 11400 13120 17570 22020 24020 25240 28900 35710 36790 38220 40230 42530 44890 47190 48980 52280 54360 56150 58660 59310 61530 63110 64760 65910 68560 70710 72650 74510 75800 77020 78240 79530 81040 81970 84910 87060 88140 89070 90580 91510 93160 94380)) :ldur (quote ((1860 1860) (2650 2650) (720 720) (790 790) (3870 3870) (1720 1720) (4450 4450) (4450 4450) (2000 2000) (1220 1220) (3660 3660) (6810 6810) (1080 1080) (1430 1430) (2010 2010) (2300 2300) (2360 2360) (2300 2300) (1790 1790) (3300 3300) (2080 2080) (1790 1790) (2510 2510) (650 650) (2220 2220) (1580 1580) (1650 1650) (1150 1150) (2650 2650) (2150 2150) (1940 1940) (1860 1860) (1290 1290) (1220 1220) (1220 1220) (1290 1290) (1510 1510) (930 930) (2940 2940) (2150 2150) (1080 1080) (930 930) (1510 1510) (930 930) (1650 1650) (1220 1220))) :lvel (quote ((45 44) (53 44) (68 44) (51 50) (56 54) (48 44) (83 50) (92 57) (54 49) (52 49) (47 45) (42 40) (78 58) (100 68) (64 63) (75 58) (46 45) (69 60) (84 58) (91 58) (49 46) (63 53) (74 66) (90 65) (87 74) (69 65) (67 65) (86 70) (64 57) (61 59) (82 63) (75 52) (59 55) (61 57) (54 52) (68 67) (95 71) (68 63) (52 51) (84 70) (94 70) (59 57) (57 52) (54 48) (63 59) (53 46))) :loffset (quote ((0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0))) :lchan (quote ((1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "highnotes.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 87 25) (om-make-point 70 50) (let ((newobj (load-sdif-file (om-make-pathname :directory (quote (:absolute "Users" "samdvorin" "Desktop" "music" "audiosculpt" "ChordSeqs")) :device nil :host nil :name "highnotes" :type "sdif")))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 400 500) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (4 0 2 0 nil 0) (1 0 3 0 nil 0) (5 0 4 0 nil 0))) nil 6.19))
