; OM File Header - Saved 2023/03/27 10:35:08
; (7.01 :patc (om-make-point 91 139) (om-make-point 199 44) (om-make-point 890 818) "" 183 0 "2021/10/20 22:40:30" "2021/10/26 22:36:08")
; End File Header
; External resources 
; (list (list (quote :sdif) "#P\"../../audiosculpt/ChordSeqs/noceilng_ (1)-cs.sdif\""))
(in-package :om)(load-lib-for (quote ("Repmus")))(setf *om-current-persistent* (om-load-patch1 "knx stuff" (quote ((let ((box (om-load-boxcall (quote genfun) "REMOVE-DUP" (quote remove-dup) (quote ((om-load-inputfun (quote input-funbox) "list" "LIST" (list 1 2 3 4)) (om-load-inputfun (quote input-funbox) "equality test (function or function name)" "TEST" (quote eq)) (om-load-inputfun (quote input-funbox) "an integer" "DEPTH" 1))) (om-make-point 378 512) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 360 604) (om-make-point 60 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (4598 5290 4904 4806 7196 6114 5618 5106 6996 6284 4888 4884 4572 5606 6108 5224 6320 5332 5118 4812 6096 4054 6504 5584 5000 4362 4724 4628 4916 6102 6492 5328 4556 7314 5802 4216 4196 7312 4798 6498 6484 5786 7518 7498 6300 6278 7700 7210)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 23) 0 0 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 357 421) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "dragged 5" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 586 63) (om-make-point 204 144) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4798 6498 6484 5786 7518 7498 6300 6278 7700 7210))) :lonset (quote (81 421)) :ldur (quote ((340 340 340 340 340 340 340 340 340 340))) :lvel (quote ((85 51 46 46 45 45 44 44 43 43))) :loffset (quote ((0 0 0 0 0 0 0 0 0 0))) :lchan (quote ((1 1 1 1 1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.19 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 10 nil 1000 0 (om-make-point 1440 818) (om-make-point 0 23) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 661 283) (om-make-point 185 30) (list 2000 2000 2000 2000 2000) "(2000 2000 2000 2000 2000)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 501 240) (om-make-point 203 30) (list 0 2000 4000 6000 8000 10000) "(0 2000 4000 6000 8000 10000)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 2000 4000 6000 8000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 2000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 441 332) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4598 5290 4904 4806 7196 6114 5618 5106 6996 6284) (4888 4884 4572 5606 6108 5224 6320 5332 5118 7498) (4812 6096 4054 6504 5584 5000 4362 4724 4628 4556) (4916 6102 6492 5328 4556 7314 5802 4216 4196 7312) (4798 6498 6484 5786 7518 7498 6300 6278 7700 7210))) :lonset (quote (0 2000 4000 6000 8000 10000)) :ldur (quote ((2000 2000 2000 2000 2000 2000 2000 2000 2000 2000) (2000 2000 2000 2000 2000 2000 2000 2000 2000 2000) (2000 2000 2000 2000 2000 2000 2000 2000 2000 2000) (2000 2000 2000 2000 2000 2000 2000 2000 2000 2000) (2000 2000 2000 2000 2000 2000 2000 2000 2000 2000))) :lvel (quote ((100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100))) :loffset (quote ((0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0))) :lchan (quote ((1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.19 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 31/20 nil 1000 0 (om-make-point 1007 435) (om-make-point 400 23) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" (list 4798 6498 6484 5786 7518 7498 6300 6278 7700 7210)))) (om-make-point 412 260) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "dragged 4" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 487 68) (om-make-point 60 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (4916 6102 6492 5328 4556 7314 5802 4216 4196 7312)) :ldur (quote (540 540 540 540 540 540 540 540 540 540)) :lvel (quote (77 47 45 43 43 42 42 42 42 41)) :loffset (quote (0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 23) 0 0 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "dragged 3" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 400 68) (om-make-point 60 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (4812 6096 4054 6504 5584 5000 4362 4724 4628 4556)) :ldur (quote (90 90 90 90 90 90 90 90 90 90)) :lvel (quote (53 51 49 47 47 47 47 46 46 46)) :loffset (quote (0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 23) 0 0 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "dragged 2" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 328 66) (om-make-point 60 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (4888 4884 4572 5606 6108 5224 6320 5332 5118 7498)) :ldur (quote (340 340 340 340 340 340 340 340 340 340)) :lvel (quote (67 65 59 49 46 45 44 44 43 42)) :loffset (quote (0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 23) 0 0 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "dragged" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 255 62) (om-make-point 60 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (4598 5290 4904 4806 7196 6114 5618 5106 6996 6284)) :ldur (quote (930 930 930 930 930 930 930 930 930 930)) :lvel (quote (78 52 49 48 44 44 44 44 43 43)) :loffset (quote (0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 735 351) (om-make-point 400 23) 0 0 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 129 208) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4598 5290 4904 4806 7196 6114 5618 5106 6996 6284) (4888 4884 4572 5606 6108 5224 6320 5332 5118 7498) (4892 4548 4438 4532 4422 4136 4682 4294 4256 4144) (4888 4578 4054 6088 4332 4980 4798 5316 5242 6990) (4878 4494 5308 5254 6092 5148 4048 5396 5002 5492) (4902 4414 4402 4058 5250 4766 5364 5342 4712 5148) (4902 5596 6700 4570 6794 6480 6104 4704 4606 7000) (4886 4890 4594 6682 5600 6102 6490 6300 5128 7500) (4954 6476 6682 4738 5206 5098 4734 4532 6498 6726) (4970 5210 4560 5092 6680 6480 4728 4260 5314 6776) (5020 5012 4552 4076 5232 4236 6494 4768 6686 6100) (4812 6096 4054 6504 5584 5000 4362 4724 4628 4556) (4760 4878 4048 5244 5026 4394 5586 5348 5040 5450) (4896 6100 6496 5598 4760 4570 7000 6694 7302 6282) (4916 6102 6492 5328 4556 7314 5802 4216 4196 7312) (4930 4804 5788 6092 5298 4546 6142 7284 6496 5096) (4808 4892 4820 4542 5792 5294 6104 6148 4646 4100) (4588 6480 6088 4914 4790 4052 5788 4912 4464 4380) (4954 4964 4786 4508 6092 5118 6492 5320 5138 4054) (4946 4388 4384 4074 4770 5324 5122 5240 5342 6092) (5294 6094 4076 4582 4792 6482 4870 5780 5146 5064) (5306 4526 5138 4866 4748 5784 4772 4094 4676 6484) (5322 5422 4938 4936 4810 4698 5192 4240 6332 6536) (5290 4808 4208 5208 5068 4972 4368 4018 4008 6316) (4146 4072 5304 4368 4766 5226 6094 5064 4974 4958) (5280 6100 4620 4610 6472 4904 5080 5138 4356 4262) (4792 5294 6692 5512 6490 6100 4588 7310 7198 6018) (4800 4892 4830 5056 5292 5284 5172 4722 4568 4554) (4794 4890 4054 4778 4368 4564 4562 5296 4972 5100) (4802 5306 5000 4040 4036 4534 6482 4484 4366 4154) (4798 4868 5288 4490 4982 5284 4998 4070 4162 6466) (4768 4760 4070 4368 4352 5288 4944 4868 4896 6482) (4798 6498 6484 5786 7518 7498 6300 6278 7700 7210) (4818 4764 4886 6972 5794 7194 5192 5070 6468 7492) (4690 5786 4808 6980 7192 4904 6490 5162 5044 6534) (4790 7194 6298 6486 6504 6690 5788 6980 5992 7496) (4780 4902 5232 4948 5242 5066 4574 4346 4334 4046) (4786 4048 4788 5248 4548 4366 4358 5060 4998 5300) (5126 4518 5290 5002 4712 5282 4984 4222 4212 4054) (5110 6998 5114 5314 5310 4744 5366 5220 5992 4572) (5094 4738 6992 6300 5320 7196 6688 7894 6016 6004) (5088 5312 7234 6698 5318 4724 6990 7286 6298 7198) (5294 5080 4776 5088 6990 7202 6690 5768 6718 6034) (5286 5294 4000 4744 4052 5038 4408 4384 5236 5128) (5294 5784 4036 5072 4038 6694 5126 5000 4694 4554) (5282 5302 5082 4658 5790 4666 4518 4052 5136 4984) (4072 4388 5258 4988 4606 4584 5336 4744 5140 5792) (7346 5792 5268 4040 7334 4104 7004 4780 6700 6088) (5300 6102 5802 4798 7010 7516 6704 7512 7486 7206) (5292 4824 7504 6992 5064 6476 6114 5804 7220 7196) (5288 5284 4716 4896 6990 5036 5040 7192 5776 5128) (4600 5794 4830 5300 7492 6304 7002 5098 6978 6702) (4576 5306 5318 5188 5064 4910 6972 5216 4924 4306) (4602 4452 4486 4368 4040 5302 5284 4866 4714 5180) (4600 5308 4858 4722 5028 5332 5196 4264 4040 4036) (4602 4902 4748 4192 4160 5266 5098 5076 5784 5420) (4600 5292 4870 4830 6994 7196 5616 5610 6132 6088) (4902 4864 4860 4590 5606 6106 5328 7000 7988 7496) (4636 4642 4888 4886 5332 5104 4352 4122 5248 6110) (4900 4712 4540 4076 4714 4368 6104 5002 5128 5366) (4890 4984 4578 4368 4044 5232 5120 4688 4188 4178) (4888 6492 4548 6696 5040 5036 4050 4034 6992 6790) (4900 6800 5586 5590 7994 6100 4682 4654 4558 6500) (4880 6106 6684 6702 5148 4550 7988 6996 6802 5222) (4870 6678 6522 4580 6106 5614 4748 6588 5148 6474) (6476 4858 6290 6276 6796 6682 6540 6102 5596 4544) (6798 6488 6868 6282 6690 6526 6764 6600 6970 6404) (6800 6876 6928 6500 6972 7010 6696 6638 7040 6444) (6994 6978 6804 8200 6938 6936 6882 4002 6494 4544) (8198 6990 8222 7034 8180 4054 6922 6828 6774 4454))) :lonset (quote (90 1020 1360 1420 1470 1560 1620 1900 2630 2720 2780 2830 2920 3030 3540 4080 4140 4220 4310 4370 4420 5190 5300 5530 5610 5700 5780 6940 7030 7090 7170 7230 7280 7620 7720 7750 8360 8450 8560 8650 8790 8990 9160 9840 9890 9980 10030 10090 10150 10200 10690 10770 11170 11260 11340 11420 11480 12270 12590 12680 12780 12900 13040 13180 13410 13460 13580 13660 13720 13780 13870)) :ldur (quote ((930 930 930 930 930 930 930 930 930 930) (340 340 340 340 340 340 340 340 340 340) (60 60 60 60 60 60 60 60 60 60) (50 50 50 50 50 50 50 50 50 50) (90 90 90 90 90 90 90 90 90 90) (60 60 60 60 60 60 60 60 60 60) (280 280 280 280 280 280 280 280 280 280) (730 730 730 730 730 730 730 730 730 730) (90 90 90 90 90 90 90 90 90 90) (60 60 60 60 60 60 60 60 60 60) (50 50 50 50 50 50 50 50 50 50) (90 90 90 90 90 90 90 90 90 90) (110 110 110 110 110 110 110 110 110 110) (510 510 510 510 510 510 510 510 510 510) (540 540 540 540 540 540 540 540 540 540) (60 60 60 60 60 60 60 60 60 60) (80 80 80 80 80 80 80 80 80 80) (90 90 90 90 90 90 90 90 90 90) (60 60 60 60 60 60 60 60 60 60) (50 50 50 50 50 50 50 50 50 50) (770 770 770 770 770 770 770 770 770 770) (110 110 110 110 110 110 110 110 110 110) (230 230 230 230 230 230 230 230 230 230) (80 80 80 80 80 80 80 80 80 80) (90 90 90 90 90 90 90 90 90 90) (80 80 80 80 80 80 80 80 80 80) (1160 1160 1160 1160 1160 1160 1160 1160 1160 1160) (90 90 90 90 90 90 90 90 90 90) (60 60 60 60 60 60 60 60 60 60) (80 80 80 80 80 80 80 80 80 80) (60 60 60 60 60 60 60 60 60 60) (50 50 50 50 50 50 50 50 50 50) (340 340 340 340 340 340 340 340 340 340) (100 100 100 100 100 100 100 100 100 100) (30 30 30 30 30 30 30 30 30 30) (610 610 610 610 610 610 610 610 610 610) (90 90 90 90 90 90 90 90 90 90) (110 110 110 110 110 110 110 110 110 110) (90 90 90 90 90 90 90 90 90 90) (140 140 140 140 140 140 140 140 140 140) (200 200 200 200 200 200 200 200 200 200) (170 170 170 170 170 170 170 170 170 170) (680 680 680 680 680 680 680 680 680 680) (50 50 50 50 50 50 50 50 50 50) (90 90 90 90 90 90 90 90 90 90) (50 50 50 50 50 50 50 50 50 50) (60 60 60 60 60 60 60 60 60 60) (60 60 60 60 60 60 60 60 60 60) (50 50 50 50 50 50 50 50 50 50) (490 490 490 490 490 490 490 490 490 490) (80 80 80 80 80 80 80 80 80 80) (400 400 400 400 400 400 400 400 400 400) (90 90 90 90 90 90 90 90 90 90) (80 80 80 80 80 80 80 80 80 80) (80 80 80 80 80 80 80 80 80 80) (60 60 60 60 60 60 60 60 60 60) (790 790 790 790 790 790 790 790 790 790) (320 320 320 320 320 320 320 320 320 320) (90 90 90 90 90 90 90 90 90 90) (100 100 100 100 100 100 100 100 100 100) (120 120 120 120 120 120 120 120 120 120) (140 140 140 140 140 140 140 140 140 140) (140 140 140 140 140 140 140 140 140 140) (230 230 230 230 230 230 230 230 230 230) (50 50 50 50 50 50 50 50 50 50) (120 120 120 120 120 120 120 120 120 120) (80 80 80 80 80 80 80 80 80 80) (60 60 60 60 60 60 60 60 60 60) (60 60 60 60 60 60 60 60 60 60) (90 90 90 90 90 90 90 90 90 90))) :lvel (quote ((78 52 49 48 44 44 44 44 43 43) (67 65 59 49 46 45 44 44 43 42) (71 57 55 54 54 53 52 52 52 52) (68 54 52 48 48 47 47 45 45 42) (68 58 52 52 49 49 49 48 47 46) (63 56 56 54 52 50 49 49 49 48) (85 50 46 46 45 45 45 44 44 43) (61 60 54 52 51 49 47 46 46 44) (67 54 53 52 51 51 51 51 49 46) (68 56 56 55 52 51 51 50 48 47) (56 56 56 54 53 53 49 49 46 46) (53 51 49 47 47 47 47 46 46 46) (57 55 53 52 51 51 50 50 50 48) (89 53 49 48 48 43 42 42 41 41) (77 47 45 43 43 42 42 42 42 41) (63 63 54 52 51 51 48 47 46 46) (58 57 57 57 54 53 51 50 50 49) (58 52 51 51 51 51 50 50 48 47) (58 56 54 54 53 50 49 49 49 49) (58 57 57 55 54 53 53 51 50 49) (86 54 51 50 49 48 48 42 42 42) (78 55 52 52 50 49 49 49 48 47) (66 60 56 54 51 49 48 48 45 44) (65 65 56 53 53 52 51 49 49 48) (55 54 53 52 51 49 48 48 48 48) (62 50 50 50 49 48 47 46 46 46) (100 50 43 43 42 42 42 41 41 41) (77 62 61 53 52 52 52 52 52 51) (64 54 54 53 52 51 51 50 50 48) (72 50 48 48 47 46 45 45 45 45) (60 57 55 55 54 53 53 53 52 45) (57 55 54 51 50 49 46 46 45 44) (85 51 46 46 45 45 44 44 43 43) (69 61 60 50 49 46 46 46 45 44) (63 55 55 53 50 50 49 49 49 48) (69 48 48 47 46 45 45 44 44 43) (59 56 55 55 52 51 51 49 49 49) (52 52 50 48 48 48 48 47 47 46) (55 55 54 54 54 53 53 51 51 51) (68 50 50 48 47 47 46 46 45 45) (88 54 49 46 46 45 44 43 42 42) (79 52 49 48 48 48 47 46 45 44) (57 57 54 52 45 44 44 44 43 43) (61 57 57 55 55 53 53 53 51 50) (55 51 50 48 48 46 46 46 46 46) (59 57 54 52 51 51 51 51 50 50) (55 52 51 50 50 50 48 48 47 46) (49 49 49 47 46 46 45 45 44 44) (61 51 50 49 47 46 46 45 45 45) (58 57 51 51 47 44 44 44 43 43) (67 61 56 55 52 51 49 46 45 45) (95 48 48 45 44 44 43 43 42 42) (77 54 51 50 50 48 47 47 47 47) (63 55 54 54 53 52 50 50 50 47) (77 50 49 48 47 46 46 46 46 46) (71 55 55 54 54 49 49 49 46 46) (81 52 49 49 46 44 44 44 43 43) (66 66 64 62 50 47 44 43 42 42) (69 67 62 61 51 51 50 49 48 47) (61 53 53 53 52 48 47 47 46 45) (71 57 52 52 51 50 50 50 50 50) (78 48 47 45 45 45 45 45 43 43) (82 52 52 50 48 47 46 46 46 45) (69 56 52 50 48 48 47 47 47 47) (73 59 52 52 50 50 50 49 49 48) (60 59 52 51 47 46 45 45 45 45) (54 54 53 50 48 45 43 43 42 42) (60 57 50 50 47 46 46 45 42 42) (57 52 52 51 50 49 47 45 44 44) (66 57 46 46 45 43 42 42 42 42))) :loffset (quote ((0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0))) :lchan (quote ((1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.19 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((0) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.19 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((1) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.19 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((7) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.19 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((12) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.19 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((13) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.19 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((14) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.19 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((26) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.19 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((29) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.19 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((42) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.19 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 757/100 nil 1000 0 (om-make-point 946 818) (om-make-point 494 23) 0 0 (quote :interval) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "AS->OM" (quote as->om) (quote ((om-load-inputfun (quote input-funbox) "Analyse" "ANALYSE" nil) (om-load-inputfun (quote input-funbox) "vel min" "VMIN" 40) (om-load-inputfun (quote input-funbox) "vel max" "VMAX" 100) (om-load-inputfun (quote input-funbox) "delta" "DELTA" 5) (om-load-inputfun (quote input-funbox) "midic min" "MMIN" 4000) (om-load-inputfun (quote input-funbox) "midic max" "MMAX" 8600) (om-load-inputfun (quote input-funbox) "approx" "APPROX" 8) (om-load-inputfun (quote input-funbox) "poly. density" "NPOLY" 10))) (om-make-point 126 125) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "noceilng_ (1)-cs.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 89 25) (om-make-point 70 50) (let ((newobj (load-sdif-file (om-make-pathname :directory (quote (:absolute "Users" "samdvorin" "Desktop" "music" "audiosculpt" "ChordSeqs")) :device nil :host nil :name "noceilng_ (1)-cs" :type "sdif")))) (when newobj) newobj) "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 400 500))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (0 0 1 1 nil 0) (7 0 2 0 nil 0) (7 0 6 1 nil 0) (5 0 6 2 nil 0) (4 0 6 3 nil 0) (11 1 7 0 nil 0) (10 1 7 1 nil 0) (9 1 7 2 nil 0) (8 1 7 3 nil 0) (13 0 12 0 nil 0) (14 0 13 0 nil 0))) nil 6.19))
