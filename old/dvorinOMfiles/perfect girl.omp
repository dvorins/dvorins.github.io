; OM File Header - Saved 2023/10/10 17:09:28
; (7.01 :patc (om-make-point 46 72) (om-make-point 0 44) (om-make-point 1440 816) "" 183 0 "2021/11/27 17:14:34" "2022/04/17 18:47:40")
; End File Header
; External resources 
; (list (list (quote :sdif) "#P\"../../../audiosculpt/ChordSeqs/good bit of perfect girl-cs.sdif\""))
(in-package :om)(load-lib-for (quote ("Repmus" "OMTristan")))(setf *om-current-persistent* (om-load-patch1 "perfect girl" (quote ((let ((box (om-load-editor-box1 "dragged 17" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 853 602) (om-make-point 60 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (3894 4446 6000 6184 6922 7032 7522 7600 7966 8026 8318 8368 8612 8654 8862 9080 9276)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (0 81 81 70 0 69 81 84 70 83 69 76 84 65 83 76 65)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point 400 23) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 10 4) (list 1 1 1 1 1 1 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 529 627) (om-make-point 130 70) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (5/2 (((10 4) (1 1 1 1 1 1 1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (1582)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3804)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4568)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5230)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5606)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6532)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6720)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6938)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.19 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 822 367) (om-make-point 400 23) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 583 546) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "dragged 16" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 535 407) (om-make-point 209 115) (let ((thechord (make-instance (quote chord) :lmidic (quote (1582 3804 4568 5230 5606 6000 6250 6532 6720 6938 7088 7266 7542 7780 7990 8176 8344)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (70 81 69 0 84 81 83 0 76 81 65 70 69 84 83 76 65)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 0 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 3" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 603 325) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8136 9336 9336 10038 10536) (3608 6648 7162 7992 8248 8738 9260) (2148 6712 6944 7974 8088 8772 9260) (2122 3628 4682 5158 5672 6298 6758) (3048 4130 5390 5740 6350 6964 7416) (6216 6610 8260 8390 9170 9250 9820) (4230 7854 8236 9158 9348 9894 10020) (4746 6920 7700 8350 8736 9124 9656) (2800 6404 6790 7710 7902 8572 9056) (2202 4476 5220 5894 6664 7194 7600))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000)) :ldur (quote ((1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000))) :lvel (quote ((84 84 112 103 84) (101 84 92 101 73 92 73) (101 92 84 73 101 92 73) (101 92 84 73 101 92 73) (101 92 84 73 101 92 73) (101 84 92 101 73 92 73) (84 101 101 92 92 73 73) (101 84 92 101 73 92 73) (101 92 84 73 101 92 73) (92 101 73 84 101 92 73))) :loffset (quote ((0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0))) :lchan (quote ((1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.19 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 1040 450) (om-make-point 400 23) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FMO" (quote fmo) (quote ((om-load-inputfun (quote input-funbox) "Carrier" "CARRIER" 3600) (om-load-inputfun (quote input-funbox) "Moduler" "MODUL" 4000) (om-load-inputfun (quote input-funbox) "Index" "INDEX" 2) (om-load-inputfunmenu1 (quote input-funmenu) "Unit" "UNIT" (quote midic) (list (list "Midics" (quote (quote midic))) (list "Freqs" (quote (quote freq))))) (om-load-inputfunmenu1 (quote input-funmenu) "Type" "TYPE" (quote chordseq) (list (list "Chord" (quote (quote chord))) (list "ChordSeq" (quote (quote chordseq))))))) (om-make-point 595 226) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 73 550) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4526 7338 4510 6926 8138 4988 7332 8538 5708 5718) (8136 4516 8138 4996 4484 6834 7338 6940 5710 8042) (6938 8136 7638 4530 6424 6840 6606 8056 6654 6450) (6926 8118 8040 6430 7624 4718 4674 5726 5058 4504) (7474 7454 7490 4692 8138 6928 5388 8034 7542 5042) (8136 7442 6946 6934 8140 7492 4228 5380 7044 5392) (8136 6648 6944 4682 5390 6610 4230 6920 6790 5894) (7620 4224 7610 8118 8140 6644 4672 6636 6944 6918) (7640 6938 7614 4200 7352 4662 6918 4922 8144 7464) (8136 6924 6832 4234 4872 7624 8056 7354 6608 4888) (6916 4224 6840 4894 6470 8138 6460 8134 7666 5402) (6920 7616 7612 4230 7474 6432 4870 4240 7546 7490) (7624 7650 6818 4494 4994 7608 7338 6926 6440 8044) (6826 7626 4524 8056 6892 8022 5704 4996 6934 7606) (4982 4526 4990 7624 6834 6434 4472 8138 8136 8050))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000 13000 14000 15000)) :ldur (quote ((1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000))) :lvel (quote ((100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100))) :loffset (quote ((0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0))) :lchan (quote ((1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.19 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((0) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.19 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 241/100 nil 1000 0 (om-make-point 978 362) (om-make-point 400 61) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 27 327) (om-make-point 424 218) (list (list 4526 7338 4510 6926 8138 4988 7332 8538 5708 5718) (list 8136 4516 8138 4996 4484 6834 7338 6940 5710 8042) (list 6938 8136 7638 4530 6424 6840 6606 8056 6654 6450) (list 6926 8118 8040 6430 7624 4718 4674 5726 5058 4504) (list 7474 7454 7490 4692 8138 6928 5388 8034 7542 5042) (list 8136 7442 6946 6934 8140 7492 4228 5380 7044 5392) (list 8136 6648 6944 4682 5390 6610 4230 6920 6790 5894) (list 7620 4224 7610 8118 8140 6644 4672 6636 6944 6918) (list 7640 6938 7614 4200 7352 4662 6918 4922 8144 7464) (list 8136 6924 6832 4234 4872 7624 8056 7354 6608 4888) (list 6916 4224 6840 4894 6470 8138 6460 8134 7666 5402) (list 6920 7616 7612 4230 7474 6432 4870 4240 7546 7490) (list 7624 7650 6818 4494 4994 7608 7338 6926 6440 8044) (list 6826 7626 4524 8056 6892 8022 5704 4996 6934 7606) (list 4982 4526 4990 7624 6834 6434 4472 8138 8136 8050)) "((4526 7338 4510 6926 8138 4988 7332 8538 5708 5718)(8136 4516 8138 4996 4484 6834 7338 6940 5710 8042)(6938 8136 7638 4530 6424 6840 6606 8056 6654 6450)(6926 8118 8040 6430 7624 4718 4674 5726 5058 4504)(7474 7454 7490 4692 8138 6928 5388 8034 7542 5042)(8136 7442 6946 6934 8140 7492 4228 5380 7044 5392)(8136 6648 6944 4682 5390 6610 4230 6920 6790 5894)(7620 4224 7610 8118 8140 6644 4672 6636 6944 6918)(7640 6938 7614 4200 7352 4662 6918 4922 8144 7464)(8136 6924 6832 4234 4872 7624 8056 7354 6608 4888)(6916 4224 6840 4894 6470 8138 6460 8134 7666 5402)(6920 7616 7612 4230 7474 6432 4870 4240 7546 7490)(7624 7650 6818 4494 4994 7608 7338 6926 6440 8044)(6826 7626 4524 8056 6892 8022 5704 4996 6934 7606)(4982 4526 4990 7624 6834 6434 4472 8138 8136 8050))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 583 257) (quote "(4526 7338 4510 6926 8138 4988 7332 8538 5708 5718)$(8136 4516 8138 4996 4484 6834 7338 6940 5710 8042)$(6938 8136 7638 4530 6424 6840 6606 8056 6654 6450)$(6926 8118 8040 6430 7624 4718 4674 5726 5058 4504)$(7474 7454 7490 4692 8138 6928 5388 8034 7542 5042)$(8136 7442 6946 6934 8140 7492 4228 5380 7044 5392)$(8136 6648 6944 4682 5390 6610 4230 6920 6790 5894)$(7620 4224 7610 8118 8140 6644 4672 6636 6944 6918)$(7640 6938 7614 4200 7352 4662 6918 4922 8144 7464)$(8136 6924 6832 4234 4872 7624 8056 7354 6608 4888)$(6916 4224 6840 4894 6470 8138 6460 8134 7666 5402)$(6920 7616 7612 4230 7474 6432 4870 4240 7546 7490)$(7624 7650 6818 4494 4994 7608 7338 6926 6440 8044)$(6826 7626 4524 8056 6892 8022 5704 4996 6934 7606)$(4982 4526 4990 7624 6834 6434 4472 8138 8136 8050)") "" (om-make-point 805 175) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "dragged 15" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 1062 15) (om-make-point 60 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (4982 4526 4990 7624 6834 6434 4472 8138 8136 8050)) :ldur (quote (230 230 230 230 230 230 230 230 230 230)) :lvel (quote (51 51 50 49 48 48 48 47 47 46)) :loffset (quote (0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 696 289) (om-make-point 0 23) 0 0 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "dragged 14" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 990 12) (om-make-point 60 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (6826 7626 4524 8056 6892 8022 5704 4996 6934 7606)) :ldur (quote (230 230 230 230 230 230 230 230 230 230)) :lvel (quote (82 59 56 49 49 48 48 48 47 45)) :loffset (quote (0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 587 302) (om-make-point 2 23) 0 0 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "dragged 13" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 917 11) (om-make-point 60 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (7624 7650 6818 4494 4994 7608 7338 6926 6440 8044)) :ldur (quote (60 60 60 60 60 60 60 60 60 60)) :lvel (quote (74 57 55 54 51 50 50 50 49 48)) :loffset (quote (0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 575 305) (om-make-point 36 23) 0 0 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "dragged 12" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 852 13) (om-make-point 60 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (6920 7616 7612 4230 7474 6432 4870 4240 7546 7490)) :ldur (quote (140 140 140 140 140 140 140 140 140 140)) :lvel (quote (57 52 52 51 50 50 50 50 47 45)) :loffset (quote (0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 615 279) (om-make-point 24 23) 0 0 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "dragged 11" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 779 12) (om-make-point 60 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (6916 4224 6840 4894 6470 8138 6460 8134 7666 5402)) :ldur (quote (80 80 80 80 80 80 80 80 80 80)) :lvel (quote (72 64 54 53 51 50 50 49 46 46)) :loffset (quote (0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 634 302) (om-make-point 20 23) 0 0 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "dragged 10" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 707 10) (om-make-point 60 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (8136 6924 6832 4234 4872 7624 8056 7354 6608 4888)) :ldur (quote (170 170 170 170 170 170 170 170 170 170)) :lvel (quote (83 62 52 51 49 47 45 45 45 45)) :loffset (quote (0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 590 279) (om-make-point 76 23) 0 0 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "dragged 8" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 645 11) (om-make-point 60 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (7620 4224 7610 8118 8140 6644 4672 6636 6944 6918)) :ldur (quote (90 90 90 90 90 90 90 90 90 90)) :lvel (quote (72 67 62 53 51 51 50 49 48 47)) :loffset (quote (0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 543 299) (om-make-point 82 23) 0 0 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "dragged 7" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 581 13) (om-make-point 60 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (8136 6648 6944 4682 5390 6610 4230 6920 6790 5894)) :ldur (quote (90 90 90 90 90 90 90 90 90 90)) :lvel (quote (73 60 58 53 50 48 48 47 47 47)) :loffset (quote (0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 590 342) (om-make-point 78 23) 0 0 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "dragged 6" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 515 20) (om-make-point 60 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (8136 7442 6946 6934 8140 7492 4228 5380 7044 5392)) :ldur (quote (90 90 90 90 90 90 90 90 90 90)) :lvel (quote (72 64 63 59 57 47 47 46 45 45)) :loffset (quote (0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 454 278) (om-make-point 44 23) 0 0 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "dragged 5" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 454 23) (om-make-point 60 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (7474 7454 7490 4692 8138 6928 5388 8034 7542 5042)) :ldur (quote (80 80 80 80 80 80 80 80 80 80)) :lvel (quote (69 66 55 55 53 52 48 46 46 46)) :loffset (quote (0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 217 292) (om-make-point 76 23) 0 0 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "dragged 4" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 384 24) (om-make-point 60 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (6926 8118 8040 6430 7624 4718 4674 5726 5058 4504)) :ldur (quote (80 80 80 80 80 80 80 80 80 80)) :lvel (quote (60 59 57 51 50 50 49 46 46 46)) :loffset (quote (0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 572 320) (om-make-point 19 23) 0 0 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "dragged 3" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 314 32) (om-make-point 60 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (6938 8136 7638 4530 6424 6840 6606 8056 6654 6450)) :ldur (quote (120 120 120 120 120 120 120 120 120 120)) :lvel (quote (72 59 57 52 51 50 49 48 48 48)) :loffset (quote (0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 389 295) (om-make-point 0 23) 0 0 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "dragged 2" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 248 30) (om-make-point 60 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (8136 4516 8138 4996 4484 6834 7338 6940 5710 8042)) :ldur (quote (30 30 30 30 30 30 30 30 30 30)) :lvel (quote (62 60 59 59 53 52 51 50 50 49)) :loffset (quote (0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 544 282) (om-make-point 7 23) 0 0 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "dragged" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 183 32) (om-make-point 60 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (4526 7338 4510 6926 8138 4988 7332 8538 5708 5718)) :ldur (quote (80 80 80 80 80 80 80 80 80 80)) :lvel (quote (62 61 60 59 58 58 57 52 51 49)) :loffset (quote (0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 538 330) (om-make-point 46 23) 0 0 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 72 226) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6824 5020 4530 8048 4992 6200 5704 4770 8016 6920) (8042 5036 4560 4522 6828 6202 5702 4760 4014 4972) (5032 4970 4524 8038 5690 4508 6200 6826 4670 8026) (4992 4520 8048 4504 8024 5710 6834 6922 4646 6200) (8054 4530 8018 4986 4540 5694 5032 6920 6838 5366) (4524 8024 5016 8052 4986 6834 4472 5704 6198 5376) (4514 6834 5018 8038 8024 6920 6202 5718 5708 5374) (4526 6836 5020 4982 8058 6920 8030 6840 6188 5722) (5008 4518 6816 4980 4492 8038 5698 8024 6920 6204) (8030 4534 5054 5034 4986 8054 5692 6840 6202 6580) (4996 8028 4524 5704 8052 4512 6194 5684 5376 6920) (4998 4512 8054 4454 8028 5710 6840 6188 8012 6920) (4544 8038 4972 5032 4316 8014 6836 5096 6920 5708) (4518 5014 4984 5704 6922 8060 8136 5718 5374 8028) (5704 4520 6922 8138 5380 8028 8136 6198 5018 8054) (4526 5704 5722 5018 6922 6938 8140 5370 8028 8114) (4526 7338 4510 6926 8138 4988 7332 8538 5708 5718) (8114 6922 4526 7326 6940 5028 4982 8538 5704 8536) (6922 8138 4522 5018 4988 7338 6942 7328 5706 5720) (8136 4516 8138 4996 4484 6834 7338 6940 5710 8042) (8138 6830 4524 6938 5698 6928 4988 7332 4500 5370) (6940 8134 4524 6836 6840 4504 6900 6444 5706 5374) (6940 8134 4526 6432 7632 6836 4502 6842 5014 8048) (6938 8136 7638 4530 6424 6840 6606 8056 6654 6450) (8136 6940 4516 6436 5702 6446 7638 4994 6832 6596) (8134 6940 4506 6430 5016 7638 5722 5006 6588 4550) (8140 8136 6444 5014 4702 6944 5718 7640 4548 5394) (6926 8118 8040 6430 7624 4718 4674 5726 5058 4504) (8136 8138 6934 8040 4744 7626 4506 6430 5716 4234) (8136 6934 4696 8018 8046 4518 7624 6418 5034 4502) (8136 8040 6924 4726 4678 5380 4138 8020 7624 4470) (7474 7454 7490 4692 8138 6928 5388 8034 7542 5042) (7442 6936 8138 8114 7468 6938 4716 4670 7498 5382) (8140 8134 7440 7470 4638 5392 8040 6934 7498 4240) (7446 7464 8138 7494 8134 5390 4684 6938 7540 4200) (7440 8128 7470 6940 4200 5376 6904 8022 7542 5714) (7442 8134 7486 6944 4238 4236 5392 7050 4674 7496) (8136 7442 6946 6934 8140 7492 4228 5380 7044 5392) (8134 6940 6920 7442 4688 7028 4230 7488 7470 7046) (6940 8118 7444 6924 4698 7044 7492 4200 8152 5384) (6938 8134 6922 7444 7434 4670 7488 5378 4774 4142) (8136 6930 6940 6642 4674 5392 4690 7438 4230 7476) (8136 6640 6636 6942 6920 4658 4702 5388 4230 7440) (8136 6648 6944 4682 5390 6610 4230 6920 6790 5894) (8134 6646 6940 4698 5392 4686 4206 5890 5070 7480) (6646 6940 8132 6636 4676 4696 4214 5398 5384 5072) (4232 6942 8130 6648 4666 7610 6928 4898 7470 5392) (7620 4224 7610 8118 8140 6644 4672 6636 6944 6918) (7640 4242 7616 6940 8134 6924 4670 7472 6644 7588) (7616 4214 6938 7466 7588 4896 8138 7650 7494 7582) (6938 7616 6936 4238 7644 8140 7466 6606 4770 4590) (7640 6938 7614 4200 7352 4662 6918 4922 8144 7464) (7614 4214 7638 7342 4890 6914 8138 8538 7332 5402) (7618 4240 8134 6932 8140 7338 7642 8538 7466 7372) (8138 6932 7340 7614 4894 5404 4200 8540 7394 7380) (6934 8138 4882 4208 5400 7372 7338 7646 7622 7334) (8136 6924 6832 4234 4872 7624 8056 7354 6608 4888) (8136 6928 4212 6838 4890 6910 7616 6956 8100 7338) (6926 4230 8136 6834 4864 4940 4520 8100 7620 7374) (6916 4224 6840 4894 6470 8138 6460 8134 7666 5402) (4218 6922 6450 4890 8132 6836 6844 5402 6478 6432) (4246 8134 6924 6460 6834 4870 7640 4956 6650 6622) (4230 6468 8136 8138 6920 6426 7640 4874 6500 6830) (4214 6456 6466 8136 4888 5400 8138 6918 7640 7666) (4220 6452 4882 6920 6436 7640 4888 8138 5400 6592) (6920 7616 7612 4230 7474 6432 4870 4240 7546 7490) (7622 6920 6444 7542 7470 7586 7488 5380 4874 5010) (7632 7610 6922 6436 7540 7472 6844 4872 4540 4584) (7638 7620 7598 7466 7586 6924 6436 7548 5702 4528) (7620 7466 7650 7584 7538 7494 6438 4500 5708 6918) (7620 6434 4468 8048 7488 7464 6920 6834 5704 7582) (7624 7650 6818 4494 4994 7608 7338 6926 6440 8044) (7626 4520 7608 7318 6938 8538 7384 6822 6432 8022) (7628 7376 7338 4516 7602 6914 5702 8538 8028 8044) (7636 7366 7350 4996 4530 4506 8028 7604 5708 7388) (7636 4524 5018 4986 4500 8058 7338 6834 8028 7374) (6826 7626 4524 8056 6892 8022 5704 4996 6934 7606) (6830 4524 7626 4498 6892 5706 8040 4974 8014 7606) (6830 4524 7628 4508 5704 6438 8042 8022 7376 6952) (6436 6814 4520 4496 6452 6854 8038 8020 7624 5708) (6834 8052 7638 4522 8026 6426 6608 6490 4548 6648) (6838 6436 4524 8022 4468 8056 4984 5004 7636 6836) (4982 4526 4990 7624 6834 6434 4472 8138 8136 8050) (4992 6436 8134 4522 6918 4480 5712 6826 8028 7638) (6436 6930 8134 5024 4528 4992 8026 5704 4818 4380) (7330 7298 8132 6940 4512 4478 5710 6436 7338 8504) (4510 8136 8138 7340 7332 6922 6960 4484 7270 8534) (8136 6922 7294 6956 6904 8532 7340 5704 4536 7274) (8136 7298 6924 5708 7264 4522 4486 7182 6436 5016) (6928 4512 8138 7340 7330 4460 7294 6906 5702 5016) (6938 6892 8138 8136 5706 4534 6844 5010 4984 7292) (6938 6830 5014 4990 4530 8138 4498 7288 8042 7330) (6940 6830 8136 6896 4524 4980 5010 4544 7296 5706) (8138 8134 6836 6942 4996 4530 4540 6932 6904 6854) (6930 6444 6814 8132 4526 4512 6948 4972 5710 5034) (6936 6438 4496 4988 8114 7638 6836 6848 5712 6944) (6924 7642 8140 4518 6426 6850 5012 6814 5052 5696) (8140 8136 6924 7642 6486 6458 6602 5702 4538 6830) (8134 6442 6936 4518 5710 4494 6940 7642 6856 6580) (8134 6920 4498 7644 4438 6440 6588 4632 6464 4298) (8136 6914 6440 4518 7640 8026 4492 4248 5702 5078) (8134 6928 6432 8028 8050 4680 4518 4212 7644 7968) (8114 8042 6922 6434 4238 4642 7964 8110 7636 6908) (8134 8042 4686 4694 4490 6914 4214 7970 6434 8020) (8136 6938 4672 7476 6922 8042 8018 6434 7490 7456) (7446 7468 4660 4732 8130 7498 6926 6436 4492 4240) (7468 7444 4692 7494 6934 8134 7542 5396 8044 8022) (6938 7480 7442 8134 4662 8138 4672 4226 6436 4510) (8134 6944 4690 7446 4684 7488 7486 7022 6436 4474) (8138 8134 6942 7440 4662 7468 4676 7488 4246 5390) (8136 6926 7444 8138 4672 7470 6942 7490 7028 5390) (6914 8118 6948 7444 8138 4684 7464 7492 5386 4198) (6922 6940 8134 7488 6642 4690 7442 7476 5392 4210) (6642 6940 6926 8132 4724 5390 4702 4230 7478 8052) (6642 6926 6938 4704 8122 5392 8538 8138 7464 6828) (6642 6940 6922 4702 5406 8140 4248 4716 7488 7480) (6920 6642 7482 5400 6944 4244 8142 7624 7488 7546) (7630 8138 6924 8136 6638 5402 4216 6944 7540 7472) (7638 8118 8138 7628 6918 4224 7488 7472 6648 5388) (7638 8134 8138 7626 6920 4208 7468 5394 7494 6644) (7628 6938 4230 8118 6920 8138 7484 7488 5384 6646) (7630 4228 6922 7340 8116 5384 4884 7372 8538 7474) (7624 4228 6920 5394 8118 7464 7340 7366 7328 4504) (4228 7626 6918 7342 5392 8138 4878 8118 7332 7466) (4214 4212 8138 7630 5392 6920 6814 7338 4882 7480) (4238 7628 8138 6926 6818 7334 5384 5388 7342 4866) (4214 4212 7626 6828 6936 6898 5388 6948 8114 4890) (4222 8136 6836 5392 7626 6938 4882 6838 6910 6460) (6452 5394 4214 8134 7630 6832 4890 8138 6468 6426) (7638 5380 6442 4238 8136 4868 7628 6846 6836 5464) (7638 5396 6470 6512 4220 6424 8118 4868 7626 6940) (5402 7640 6468 6458 4196 4888 6828 7634 6938 6842) (5402 4214 6452 6434 5382 4890 7634 7642 6936 6820) (6436 7478 7640 7618 5390 4872 4248 7488 4272 5002) (7624 6442 7464 4996 4496 7540 5396 7586 5702 6832) (7630 6432 7474 5394 5030 4510 4992 7538 7494 6840) (7638 7626 7468 6438 5394 5706 7582 5016 4528 6842) (7628 7466 4498 7490 6434 6834 5388 5024 7538 4866) (7638 7614 4996 6428 7464 5716 7492 7366 5392 4550) (7628 4994 7340 7334 6438 7372 4490 8540 7540 7490) (7626 7330 7338 5042 4524 7464 7384 8538 4966 8038) (7626 7466 7388 4510 5028 6844 7382 7324 4976 8538) (7626 5008 4984 4526 7464 7338 8056 6838 7372 7328) (6832 7630 6838 8038 4532 4996 4982 8020 4512 7338) (6822 7628 8038 6924 6898 6852 4532 4552 8018 7328) (6820 7624 8048 6900 6918 4994 4520 7326 6854 5710) (6838 7624 8044 6832 4506 4470 4318 4308 8032 6922) (6834 6438 8050 7624 6840 8024 6584 4492 5716 6890) (7630 6432 8054 6836 6838 4498 8028 4528 5022 6578) (7630 6428 6838 4516 8054 8030 6606 6442 6580 5700) (7638 6426 6604 5710 6620 6836 6452 4502 8018 6582) (7628 6430 6440 5704 5000 4488 8042 6598 6576 5720) (4534 4478 7626 8042 6436 4322 6440 4968 6840 6592) (4992 7638 6448 5710 4530 4666 5720 4552 6838 6578) (4996 5706 7636 6438 6434 5716 4508 7646 4866 6836) (4992 4984 7628 4506 6432 4542 4888 5728 5704 8022) (7626 4976 5050 4554 6428 4882 4530 5706 4664 6920) (4992 7626 4514 6432 5704 6188 5380 6920 6836 6600) (5018 4988 4538 7624 4516 6196 6438 4802 4760 4318) (4934 4950 4500 5708 4644 7630 6806 6920 6438 6202) (4992 4492 4882 4896 7630 5704 4776 4650 6432 6920) (4886 4532 4944 4546 5078 4742 7632 5690 6430 6918) (4894 4966 5702 4550 4534 7628 6200 5384 6920 6420) (4462 4510 5706 4640 4850 5008 4382 4226 7636 5082) (5610 4486 5702 4856 4542 5020 7530 5000 6772 4870) (5594 4794 4776 4472 4526 4990 8038 7534 5714 6920) (5590 4748 4518 6642 4982 6844 5054 4456 6918 5944) (5612 4992 4730 4712 4526 4472 5712 5438 7516 6644) (5598 4988 4528 5708 4852 6846 5438 4894 4624 4510) (5594 4516 6846 4978 4494 5692 7532 8026 5434 4678) (5596 6844 5714 4976 4540 6922 5434 4874 8022 7836) (5610 5000 6848 4520 4512 8016 6926 5444 7530 6638) (6846 5600 4998 4504 5722 4474 5702 4666 6920 6640))) :lonset (quote (90 230 280 340 450 590 860 1110 1390 1500 1590 1620 1760 1870 2100 2130 2410 2490 2640 2920 2950 3170 3430 3510 3630 3680 3800 3940 4020 4136 4170 4370 4450 4560 4650 4730 4820 4960 5050 5190 5220 5440 5470 5580 5670 5700 5810 5980 6070 6180 6240 6410 6460 6550 6720 6730 7030 7200 7270 7430 7510 7570 7650 7710 7770 7880 8020 8050 8160 8250 8300 8530 8590 8670 8730 8790 9040 9270 9310 9550 9640 9780 10060 10290 10340 10540 10630 10690 10800 10860 11000 11110 11200 11320 11480 11590 11650 11730 11820 11900 11990 12130 12140 12270 12360 12640 12840 12930 13120 13150 13290 13350 13380 13660 13860 13890 14030 14170 14260 14370 14430 14650 14770 14910 15160 15190 15360 15430 15670 15760 15820 15870 15910 16070 16180 16240 16330 16440 16640 16700 16780 16840 16950 17230 17350 17410 17470 17690 17770 17780 17890 17940 18030 18140 18230 18250 18370 18450 18480 18680 18760 18850 18860 18990 19190 19270 19390 19470 19530 19780 19900 19980 20010 20290)) :ldur (quote ((140 140 140 140 140 140 140 140 140 140) (50 50 50 50 50 50 50 50 50 50) (60 60 60 60 60 60 60 60 60 60) (110 110 110 110 110 110 110 110 110 110) (140 140 140 140 140 140 140 140 140 140) (270 270 270 270 270 270 270 270 270 270) (250 250 250 250 250 250 250 250 250 250) (280 280 280 280 280 280 280 280 280 280) (110 110 110 110 110 110 110 110 110 110) (90 90 90 90 90 90 90 90 90 90) (30 30 30 30 30 30 30 30 30 30) (140 140 140 140 140 140 140 140 140 140) (110 110 110 110 110 110 110 110 110 110) (230 230 230 230 230 230 230 230 230 230) (30 30 30 30 30 30 30 30 30 30) (280 280 280 280 280 280 280 280 280 280) (80 80 80 80 80 80 80 80 80 80) (150 150 150 150 150 150 150 150 150 150) (280 280 280 280 280 280 280 280 280 280) (30 30 30 30 30 30 30 30 30 30) (220 220 220 220 220 220 220 220 220 220) (260 260 260 260 260 260 260 260 260 260) (80 80 80 80 80 80 80 80 80 80) (120 120 120 120 120 120 120 120 120 120) (50 50 50 50 50 50 50 50 50 50) (120 120 120 120 120 120 120 120 120 120) (140 140 140 140 140 140 140 140 140 140) (80 80 80 80 80 80 80 80 80 80) (120 120 120 120 120 120 120 120 120 120) (30 30 30 30 30 30 30 30 30 30) (200 200 200 200 200 200 200 200 200 200) (80 80 80 80 80 80 80 80 80 80) (110 110 110 110 110 110 110 110 110 110) (90 90 90 90 90 90 90 90 90 90) (80 80 80 80 80 80 80 80 80 80) (90 90 90 90 90 90 90 90 90 90) (140 140 140 140 140 140 140 140 140 140) (90 90 90 90 90 90 90 90 90 90) (140 140 140 140 140 140 140 140 140 140) (30 30 30 30 30 30 30 30 30 30) (220 220 220 220 220 220 220 220 220 220) (30 30 30 30 30 30 30 30 30 30) (110 110 110 110 110 110 110 110 110 110) (90 90 90 90 90 90 90 90 90 90) (30 30 30 30 30 30 30 30 30 30) (110 110 110 110 110 110 110 110 110 110) (170 170 170 170 170 170 170 170 170 170) (90 90 90 90 90 90 90 90 90 90) (110 110 110 110 110 110 110 110 110 110) (60 60 60 60 60 60 60 60 60 60) (170 170 170 170 170 170 170 170 170 170) (50 50 50 50 50 50 50 50 50 50) (90 90 90 90 90 90 90 90 90 90) (170 170 170 170 170 170 170 170 170 170) (10 10 10 10 10 10 10 10 10 10) (300 300 300 300 300 300 300 300 300 300) (170 170 170 170 170 170 170 170 170 170) (70 70 70 70 70 70 70 70 70 70) (160 160 160 160 160 160 160 160 160 160) (80 80 80 80 80 80 80 80 80 80) (60 60 60 60 60 60 60 60 60 60) (80 80 80 80 80 80 80 80 80 80) (60 60 60 60 60 60 60 60 60 60) (60 60 60 60 60 60 60 60 60 60) (110 110 110 110 110 110 110 110 110 110) (140 140 140 140 140 140 140 140 140 140) (30 30 30 30 30 30 30 30 30 30) (110 110 110 110 110 110 110 110 110 110) (90 90 90 90 90 90 90 90 90 90) (50 50 50 50 50 50 50 50 50 50) (230 230 230 230 230 230 230 230 230 230) (60 60 60 60 60 60 60 60 60 60) (80 80 80 80 80 80 80 80 80 80) (60 60 60 60 60 60 60 60 60 60) (60 60 60 60 60 60 60 60 60 60) (250 250 250 250 250 250 250 250 250 250) (230 230 230 230 230 230 230 230 230 230) (40 40 40 40 40 40 40 40 40 40) (240 240 240 240 240 240 240 240 240 240) (90 90 90 90 90 90 90 90 90 90) (140 140 140 140 140 140 140 140 140 140) (280 280 280 280 280 280 280 280 280 280) (230 230 230 230 230 230 230 230 230 230) (50 50 50 50 50 50 50 50 50 50) (200 200 200 200 200 200 200 200 200 200) (90 90 90 90 90 90 90 90 90 90) (60 60 60 60 60 60 60 60 60 60) (110 110 110 110 110 110 110 110 110 110) (60 60 60 60 60 60 60 60 60 60) (140 140 140 140 140 140 140 140 140 140) (110 110 110 110 110 110 110 110 110 110) (90 90 90 90 90 90 90 90 90 90) (120 120 120 120 120 120 120 120 120 120) (160 160 160 160 160 160 160 160 160 160) (110 110 110 110 110 110 110 110 110 110) (60 60 60 60 60 60 60 60 60 60) (80 80 80 80 80 80 80 80 80 80) (90 90 90 90 90 90 90 90 90 90) (80 80 80 80 80 80 80 80 80 80) (90 90 90 90 90 90 90 90 90 90) (140 140 140 140 140 140 140 140 140 140) (10 10 10 10 10 10 10 10 10 10) (130 130 130 130 130 130 130 130 130 130) (90 90 90 90 90 90 90 90 90 90) (280 280 280 280 280 280 280 280 280 280) (200 200 200 200 200 200 200 200 200 200) (90 90 90 90 90 90 90 90 90 90) (190 190 190 190 190 190 190 190 190 190) (30 30 30 30 30 30 30 30 30 30) (140 140 140 140 140 140 140 140 140 140) (60 60 60 60 60 60 60 60 60 60) (30 30 30 30 30 30 30 30 30 30) (280 280 280 280 280 280 280 280 280 280) (200 200 200 200 200 200 200 200 200 200) (30 30 30 30 30 30 30 30 30 30) (140 140 140 140 140 140 140 140 140 140) (140 140 140 140 140 140 140 140 140 140) (90 90 90 90 90 90 90 90 90 90) (110 110 110 110 110 110 110 110 110 110) (60 60 60 60 60 60 60 60 60 60) (220 220 220 220 220 220 220 220 220 220) (120 120 120 120 120 120 120 120 120 120) (140 140 140 140 140 140 140 140 140 140) (250 250 250 250 250 250 250 250 250 250) (30 30 30 30 30 30 30 30 30 30) (170 170 170 170 170 170 170 170 170 170) (70 70 70 70 70 70 70 70 70 70) (240 240 240 240 240 240 240 240 240 240) (90 90 90 90 90 90 90 90 90 90) (60 60 60 60 60 60 60 60 60 60) (50 50 50 50 50 50 50 50 50 50) (40 40 40 40 40 40 40 40 40 40) (160 160 160 160 160 160 160 160 160 160) (110 110 110 110 110 110 110 110 110 110) (60 60 60 60 60 60 60 60 60 60) (90 90 90 90 90 90 90 90 90 90) (110 110 110 110 110 110 110 110 110 110) (200 200 200 200 200 200 200 200 200 200) (60 60 60 60 60 60 60 60 60 60) (80 80 80 80 80 80 80 80 80 80) (60 60 60 60 60 60 60 60 60 60) (110 110 110 110 110 110 110 110 110 110) (280 280 280 280 280 280 280 280 280 280) (120 120 120 120 120 120 120 120 120 120) (60 60 60 60 60 60 60 60 60 60) (60 60 60 60 60 60 60 60 60 60) (220 220 220 220 220 220 220 220 220 220) (80 80 80 80 80 80 80 80 80 80) (10 10 10 10 10 10 10 10 10 10) (110 110 110 110 110 110 110 110 110 110) (50 50 50 50 50 50 50 50 50 50) (90 90 90 90 90 90 90 90 90 90) (110 110 110 110 110 110 110 110 110 110) (90 90 90 90 90 90 90 90 90 90) (20 20 20 20 20 20 20 20 20 20) (120 120 120 120 120 120 120 120 120 120) (80 80 80 80 80 80 80 80 80 80) (30 30 30 30 30 30 30 30 30 30) (200 200 200 200 200 200 200 200 200 200) (80 80 80 80 80 80 80 80 80 80) (90 90 90 90 90 90 90 90 90 90) (10 10 10 10 10 10 10 10 10 10) (130 130 130 130 130 130 130 130 130 130) (200 200 200 200 200 200 200 200 200 200) (80 80 80 80 80 80 80 80 80 80) (120 120 120 120 120 120 120 120 120 120) (80 80 80 80 80 80 80 80 80 80) (60 60 60 60 60 60 60 60 60 60) (250 250 250 250 250 250 250 250 250 250) (120 120 120 120 120 120 120 120 120 120) (80 80 80 80 80 80 80 80 80 80) (30 30 30 30 30 30 30 30 30 30) (280 280 280 280 280 280 280 280 280 280))) :lvel (quote ((68 64 59 56 55 49 49 47 46 46) (56 56 54 52 51 50 49 49 49 48) (59 56 56 54 52 52 49 48 48 47) (70 65 62 58 49 49 47 46 46 45) (69 57 54 52 52 51 51 46 46 45) (61 55 55 53 53 51 51 50 47 46) (62 61 52 47 47 47 46 46 46 46) (58 57 56 51 50 48 47 47 46 46) (61 61 58 54 52 50 48 47 45 44) (59 56 52 52 52 50 49 46 46 45) (64 58 55 53 50 49 47 46 46 44) (65 60 54 51 50 48 47 45 44 44) (57 54 52 51 48 47 47 47 46 46) (61 56 52 50 49 48 46 46 46 45) (61 60 51 50 50 48 47 47 47 46) (63 55 51 51 49 48 47 47 46 45) (62 61 60 59 58 58 57 52 51 49) (62 60 60 53 53 52 52 49 47 46) (61 59 56 54 52 51 51 48 47 46) (62 60 59 59 53 52 51 50 50 49) (61 58 57 52 52 50 47 46 46 45) (62 60 57 54 52 48 45 45 45 45) (69 62 56 55 53 51 50 48 45 44) (72 59 57 52 51 50 49 48 48 48) (77 66 55 54 53 52 49 48 47 46) (84 55 54 52 52 50 49 49 48 47) (61 49 49 49 49 48 48 47 47 46) (60 59 57 51 50 50 49 46 46 46) (68 67 64 58 52 49 48 47 46 46) (86 62 56 53 50 48 47 46 46 46) (81 54 54 50 50 46 46 45 45 45) (69 66 55 55 53 52 48 46 46 46) (67 58 56 56 55 51 50 50 48 48) (68 63 63 60 51 50 48 48 47 46) (79 74 69 58 53 52 49 48 47 46) (79 71 65 52 51 47 45 44 44 44) (60 55 53 49 49 48 47 46 45 44) (72 64 63 59 57 47 47 46 45 45) (72 72 55 53 49 48 48 47 47 47) (88 65 59 58 53 50 49 49 48 47) (74 64 57 50 49 48 47 47 46 46) (72 60 57 56 53 51 51 48 48 46) (76 60 59 55 54 51 49 48 47 46) (73 60 58 53 50 48 48 47 47 47) (69 66 63 57 54 51 49 48 48 47) (72 70 64 64 55 51 51 50 49 48) (63 58 56 56 53 50 50 47 46 45) (72 67 62 53 51 51 50 49 48 47) (71 69 67 51 50 50 49 48 46 45) (80 67 64 51 49 48 47 47 47 46) (70 65 58 57 52 48 46 46 46 46) (62 62 54 54 53 50 47 47 46 46) (62 61 57 52 52 51 49 47 47 46) (58 56 54 54 51 51 50 49 48 48) (72 72 59 57 50 49 49 47 46 46) (74 69 51 49 47 46 46 45 45 45) (83 62 52 51 49 47 45 45 45 45) (83 65 63 61 53 49 47 46 45 45) (69 61 59 59 50 47 45 44 44 44) (72 64 54 53 51 50 50 49 46 46) (76 67 61 59 57 54 50 48 47 46) (76 58 58 55 53 52 48 46 45 45) (75 58 55 53 51 50 49 49 48 47) (79 60 56 54 53 51 50 50 49 48) (80 57 55 54 51 49 49 47 47 46) (57 52 52 51 50 50 50 50 47 45) (71 57 56 52 51 49 47 47 47 46) (82 58 55 53 48 46 46 46 46 45) (92 61 55 52 51 51 50 47 46 46) (78 54 53 53 51 50 50 50 47 46) (70 48 48 47 47 46 46 46 46 45) (74 57 55 54 51 50 50 50 49 48) (79 56 52 50 49 48 48 48 47 46) (78 54 52 52 51 49 48 47 47 46) (77 58 58 52 51 50 48 48 48 47) (57 57 52 52 52 48 48 48 47 47) (82 59 56 49 49 48 48 48 47 45) (82 58 57 54 52 51 47 47 45 45) (67 54 51 50 47 46 45 45 44 44) (65 60 60 55 52 51 50 49 49 47) (67 56 55 55 52 52 50 49 48 47) (59 59 54 53 52 50 49 48 47 47) (51 51 50 49 48 48 48 47 47 46) (57 54 53 53 49 49 48 47 46 46) (51 49 48 48 48 47 46 46 46 46) (53 53 50 50 50 50 48 47 46 45) (53 52 50 50 50 49 48 48 47 46) (53 52 51 49 49 48 48 48 48 47) (60 57 54 50 48 48 48 47 47 47) (54 54 52 51 50 50 49 48 47 47) (55 55 51 51 50 50 49 49 49 46) (58 56 56 54 53 52 52 49 48 48) (66 63 62 56 54 52 49 49 48 48) (62 61 58 55 55 54 53 52 50 48) (53 53 52 51 51 51 48 48 47 47) (64 61 56 55 53 52 52 50 48 45) (59 58 57 55 53 51 51 50 48 46) (69 65 58 56 53 53 50 50 50 48) (72 55 53 53 51 51 49 48 46 46) (66 55 55 52 49 48 47 47 46 46) (57 55 53 50 48 47 47 47 46 46) (68 55 53 52 48 47 47 47 46 45) (66 52 51 50 48 47 46 45 45 45) (73 58 51 50 49 47 47 46 46 45) (64 53 51 50 49 47 46 46 45 44) (65 55 55 50 48 48 47 46 46 45) (75 66 58 57 53 48 47 46 45 45) (63 57 56 55 55 48 48 48 44 44) (67 67 56 54 54 53 44 44 44 44) (74 63 58 56 55 49 48 47 45 44) (71 62 56 55 53 51 50 49 47 47) (67 65 60 55 53 53 52 49 47 47) (72 71 54 48 48 48 47 46 46 45) (77 74 60 58 49 48 48 47 46 45) (82 79 76 56 53 52 47 47 46 46) (77 70 66 51 49 48 48 47 46 45) (57 57 55 55 52 50 48 48 48 47) (77 61 60 58 54 52 49 48 47 47) (81 72 71 68 58 51 49 49 49 47) (77 73 69 63 62 56 55 52 51 50) (74 61 57 53 53 51 50 48 47 46) (75 70 65 55 52 50 48 47 45 45) (77 71 56 55 50 48 48 47 47 47) (73 62 56 52 51 49 48 47 47 46) (73 72 57 56 55 54 52 48 47 46) (75 61 56 55 50 49 49 48 47 47) (71 70 60 60 58 53 52 51 50 50) (58 55 54 54 53 53 50 49 48 47) (66 64 58 57 55 55 54 53 51 49) (67 58 57 56 53 51 49 48 48 48) (71 61 59 54 53 51 48 48 47 47) (67 65 60 56 53 51 48 47 47 46) (61 59 58 58 56 55 53 48 48 47) (57 56 53 53 51 50 50 49 49 48) (77 59 54 53 51 49 49 47 47 45) (100 51 50 49 49 49 48 47 46 46) (93 72 57 52 52 49 47 47 47 46) (72 54 52 51 51 49 48 47 46 46) (66 50 50 49 48 47 46 46 46 46) (72 55 53 50 50 48 48 47 46 46) (83 54 53 51 51 49 49 48 48 47) (80 52 52 51 50 49 48 48 48 47) (64 51 51 49 48 48 47 47 46 46) (64 62 60 55 54 53 51 49 49 48) (78 61 52 50 50 50 48 47 46 45) (78 60 50 50 49 49 49 47 47 47) (58 56 51 51 50 47 46 46 45 45) (60 56 55 53 51 49 48 48 47 45) (57 55 53 53 52 51 50 50 48 47) (61 54 51 51 50 49 49 49 47 47) (62 52 51 50 49 48 48 48 47 47) (57 53 52 49 48 48 47 46 46 46) (51 51 50 49 49 49 48 48 47 46) (53 49 49 49 49 48 47 47 46 46) (59 51 50 50 50 50 50 46 46 45) (59 58 53 53 51 51 50 46 46 44) (54 53 51 51 49 49 48 46 46 45) (60 53 51 49 48 45 45 44 44 44) (55 54 53 48 47 46 45 45 45 45) (56 54 53 46 46 45 45 44 44 44) (60 56 54 49 47 47 47 47 45 44) (64 57 55 49 48 48 47 47 45 44) (59 54 51 51 51 47 45 45 44 44) (52 51 50 49 48 47 46 46 45 45) (61 52 51 51 49 48 46 46 45 45) (58 52 51 51 50 48 47 46 45 44) (58 54 50 48 48 47 46 46 45 45) (67 54 53 53 51 49 48 48 47 47) (58 50 49 48 48 47 46 46 46 46) (54 53 52 52 49 48 46 45 45 45) (58 51 51 49 48 45 45 45 44 44) (64 56 52 48 47 46 46 46 45 45) (53 52 52 50 49 47 46 46 45 45))) :loffset (quote ((0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0))) :lchan (quote ((1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.19 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((16) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.19 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((19) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.19 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((21) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.19 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((22) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.19 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((23) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.19 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((27) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.19 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((31) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.19 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((37) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.19 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((40) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.19 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((41) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.19 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((43) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.19 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((47) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.19 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((51) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.19 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((56) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.19 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((59) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.19 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((60) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.19 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((65) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.19 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((71) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.19 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((82) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.19 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 8 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 10 nil 1000 0 (om-make-point 1040 516) (om-make-point 400 23) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "AS->OM" (quote as->om) (quote ((om-load-inputfun (quote input-funbox) "Analyse" "ANALYSE" nil) (om-load-inputfun (quote input-funbox) "vel min" "VMIN" 40) (om-load-inputfun (quote input-funbox) "vel max" "VMAX" 100) (om-load-inputfun (quote input-funbox) "delta" "DELTA" 5) (om-load-inputfun (quote input-funbox) "midic min" "MMIN" 4000) (om-load-inputfun (quote input-funbox) "midic max" "MMAX" 8600) (om-load-inputfun (quote input-funbox) "approx" "APPROX" 8) (om-load-inputfun (quote input-funbox) "poly. density" "NPOLY" 10))) (om-make-point 79 112) nil (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6824 5020 4530 8048 4992 6200 5704 4770 8016 6920) (8042 5036 4560 4522 6828 6202 5702 4760 4014 4972) (5032 4970 4524 8038 5690 4508 6200 6826 4670 8026) (4992 4520 8048 4504 8024 5710 6834 6922 4646 6200) (8054 4530 8018 4986 4540 5694 5032 6920 6838 5366) (4524 8024 5016 8052 4986 6834 4472 5704 6198 5376) (4514 6834 5018 8038 8024 6920 6202 5718 5708 5374) (4526 6836 5020 4982 8058 6920 8030 6840 6188 5722) (5008 4518 6816 4980 4492 8038 5698 8024 6920 6204) (8030 4534 5054 5034 4986 8054 5692 6840 6202 6580) (4996 8028 4524 5704 8052 4512 6194 5684 5376 6920) (4998 4512 8054 4454 8028 5710 6840 6188 8012 6920) (4544 8038 4972 5032 4316 8014 6836 5096 6920 5708) (4518 5014 4984 5704 6922 8060 8136 5718 5374 8028) (5704 4520 6922 8138 5380 8028 8136 6198 5018 8054) (4526 5704 5722 5018 6922 6938 8140 5370 8028 8114) (4526 7338 4510 6926 8138 4988 7332 8538 5708 5718) (8114 6922 4526 7326 6940 5028 4982 8538 5704 8536) (6922 8138 4522 5018 4988 7338 6942 7328 5706 5720) (8136 4516 8138 4996 4484 6834 7338 6940 5710 8042) (8138 6830 4524 6938 5698 6928 4988 7332 4500 5370) (6940 8134 4524 6836 6840 4504 6900 6444 5706 5374) (6940 8134 4526 6432 7632 6836 4502 6842 5014 8048) (6938 8136 7638 4530 6424 6840 6606 8056 6654 6450) (8136 6940 4516 6436 5702 6446 7638 4994 6832 6596) (8134 6940 4506 6430 5016 7638 5722 5006 6588 4550) (8140 8136 6444 5014 4702 6944 5718 7640 4548 5394) (6926 8118 8040 6430 7624 4718 4674 5726 5058 4504) (8136 8138 6934 8040 4744 7626 4506 6430 5716 4234) (8136 6934 4696 8018 8046 4518 7624 6418 5034 4502) (8136 8040 6924 4726 4678 5380 4138 8020 7624 4470) (7474 7454 7490 4692 8138 6928 5388 8034 7542 5042) (7442 6936 8138 8114 7468 6938 4716 4670 7498 5382) (8140 8134 7440 7470 4638 5392 8040 6934 7498 4240) (7446 7464 8138 7494 8134 5390 4684 6938 7540 4200) (7440 8128 7470 6940 4200 5376 6904 8022 7542 5714) (7442 8134 7486 6944 4238 4236 5392 7050 4674 7496) (8136 7442 6946 6934 8140 7492 4228 5380 7044 5392) (8134 6940 6920 7442 4688 7028 4230 7488 7470 7046) (6940 8118 7444 6924 4698 7044 7492 4200 8152 5384) (6938 8134 6922 7444 7434 4670 7488 5378 4774 4142) (8136 6930 6940 6642 4674 5392 4690 7438 4230 7476) (8136 6640 6636 6942 6920 4658 4702 5388 4230 7440) (8136 6648 6944 4682 5390 6610 4230 6920 6790 5894) (8134 6646 6940 4698 5392 4686 4206 5890 5070 7480) (6646 6940 8132 6636 4676 4696 4214 5398 5384 5072) (4232 6942 8130 6648 4666 7610 6928 4898 7470 5392) (7620 4224 7610 8118 8140 6644 4672 6636 6944 6918) (7640 4242 7616 6940 8134 6924 4670 7472 6644 7588) (7616 4214 6938 7466 7588 4896 8138 7650 7494 7582) (6938 7616 6936 4238 7644 8140 7466 6606 4770 4590) (7640 6938 7614 4200 7352 4662 6918 4922 8144 7464) (7614 4214 7638 7342 4890 6914 8138 8538 7332 5402) (7618 4240 8134 6932 8140 7338 7642 8538 7466 7372) (8138 6932 7340 7614 4894 5404 4200 8540 7394 7380) (6934 8138 4882 4208 5400 7372 7338 7646 7622 7334) (8136 6924 6832 4234 4872 7624 8056 7354 6608 4888) (8136 6928 4212 6838 4890 6910 7616 6956 8100 7338) (6926 4230 8136 6834 4864 4940 4520 8100 7620 7374) (6916 4224 6840 4894 6470 8138 6460 8134 7666 5402) (4218 6922 6450 4890 8132 6836 6844 5402 6478 6432) (4246 8134 6924 6460 6834 4870 7640 4956 6650 6622) (4230 6468 8136 8138 6920 6426 7640 4874 6500 6830) (4214 6456 6466 8136 4888 5400 8138 6918 7640 7666) (4220 6452 4882 6920 6436 7640 4888 8138 5400 6592) (6920 7616 7612 4230 7474 6432 4870 4240 7546 7490) (7622 6920 6444 7542 7470 7586 7488 5380 4874 5010) (7632 7610 6922 6436 7540 7472 6844 4872 4540 4584) (7638 7620 7598 7466 7586 6924 6436 7548 5702 4528) (7620 7466 7650 7584 7538 7494 6438 4500 5708 6918) (7620 6434 4468 8048 7488 7464 6920 6834 5704 7582) (7624 7650 6818 4494 4994 7608 7338 6926 6440 8044) (7626 4520 7608 7318 6938 8538 7384 6822 6432 8022) (7628 7376 7338 4516 7602 6914 5702 8538 8028 8044) (7636 7366 7350 4996 4530 4506 8028 7604 5708 7388) (7636 4524 5018 4986 4500 8058 7338 6834 8028 7374) (6826 7626 4524 8056 6892 8022 5704 4996 6934 7606) (6830 4524 7626 4498 6892 5706 8040 4974 8014 7606) (6830 4524 7628 4508 5704 6438 8042 8022 7376 6952) (6436 6814 4520 4496 6452 6854 8038 8020 7624 5708) (6834 8052 7638 4522 8026 6426 6608 6490 4548 6648) (6838 6436 4524 8022 4468 8056 4984 5004 7636 6836) (4982 4526 4990 7624 6834 6434 4472 8138 8136 8050) (4992 6436 8134 4522 6918 4480 5712 6826 8028 7638) (6436 6930 8134 5024 4528 4992 8026 5704 4818 4380) (7330 7298 8132 6940 4512 4478 5710 6436 7338 8504) (4510 8136 8138 7340 7332 6922 6960 4484 7270 8534) (8136 6922 7294 6956 6904 8532 7340 5704 4536 7274) (8136 7298 6924 5708 7264 4522 4486 7182 6436 5016) (6928 4512 8138 7340 7330 4460 7294 6906 5702 5016) (6938 6892 8138 8136 5706 4534 6844 5010 4984 7292) (6938 6830 5014 4990 4530 8138 4498 7288 8042 7330) (6940 6830 8136 6896 4524 4980 5010 4544 7296 5706) (8138 8134 6836 6942 4996 4530 4540 6932 6904 6854) (6930 6444 6814 8132 4526 4512 6948 4972 5710 5034) (6936 6438 4496 4988 8114 7638 6836 6848 5712 6944) (6924 7642 8140 4518 6426 6850 5012 6814 5052 5696) (8140 8136 6924 7642 6486 6458 6602 5702 4538 6830) (8134 6442 6936 4518 5710 4494 6940 7642 6856 6580) (8134 6920 4498 7644 4438 6440 6588 4632 6464 4298) (8136 6914 6440 4518 7640 8026 4492 4248 5702 5078) (8134 6928 6432 8028 8050 4680 4518 4212 7644 7968) (8114 8042 6922 6434 4238 4642 7964 8110 7636 6908) (8134 8042 4686 4694 4490 6914 4214 7970 6434 8020) (8136 6938 4672 7476 6922 8042 8018 6434 7490 7456) (7446 7468 4660 4732 8130 7498 6926 6436 4492 4240) (7468 7444 4692 7494 6934 8134 7542 5396 8044 8022) (6938 7480 7442 8134 4662 8138 4672 4226 6436 4510) (8134 6944 4690 7446 4684 7488 7486 7022 6436 4474) (8138 8134 6942 7440 4662 7468 4676 7488 4246 5390) (8136 6926 7444 8138 4672 7470 6942 7490 7028 5390) (6914 8118 6948 7444 8138 4684 7464 7492 5386 4198) (6922 6940 8134 7488 6642 4690 7442 7476 5392 4210) (6642 6940 6926 8132 4724 5390 4702 4230 7478 8052) (6642 6926 6938 4704 8122 5392 8538 8138 7464 6828) (6642 6940 6922 4702 5406 8140 4248 4716 7488 7480) (6920 6642 7482 5400 6944 4244 8142 7624 7488 7546) (7630 8138 6924 8136 6638 5402 4216 6944 7540 7472) (7638 8118 8138 7628 6918 4224 7488 7472 6648 5388) (7638 8134 8138 7626 6920 4208 7468 5394 7494 6644) (7628 6938 4230 8118 6920 8138 7484 7488 5384 6646) (7630 4228 6922 7340 8116 5384 4884 7372 8538 7474) (7624 4228 6920 5394 8118 7464 7340 7366 7328 4504) (4228 7626 6918 7342 5392 8138 4878 8118 7332 7466) (4214 4212 8138 7630 5392 6920 6814 7338 4882 7480) (4238 7628 8138 6926 6818 7334 5384 5388 7342 4866) (4214 4212 7626 6828 6936 6898 5388 6948 8114 4890) (4222 8136 6836 5392 7626 6938 4882 6838 6910 6460) (6452 5394 4214 8134 7630 6832 4890 8138 6468 6426) (7638 5380 6442 4238 8136 4868 7628 6846 6836 5464) (7638 5396 6470 6512 4220 6424 8118 4868 7626 6940) (5402 7640 6468 6458 4196 4888 6828 7634 6938 6842) (5402 4214 6452 6434 5382 4890 7634 7642 6936 6820) (6436 7478 7640 7618 5390 4872 4248 7488 4272 5002) (7624 6442 7464 4996 4496 7540 5396 7586 5702 6832) (7630 6432 7474 5394 5030 4510 4992 7538 7494 6840) (7638 7626 7468 6438 5394 5706 7582 5016 4528 6842) (7628 7466 4498 7490 6434 6834 5388 5024 7538 4866) (7638 7614 4996 6428 7464 5716 7492 7366 5392 4550) (7628 4994 7340 7334 6438 7372 4490 8540 7540 7490) (7626 7330 7338 5042 4524 7464 7384 8538 4966 8038) (7626 7466 7388 4510 5028 6844 7382 7324 4976 8538) (7626 5008 4984 4526 7464 7338 8056 6838 7372 7328) (6832 7630 6838 8038 4532 4996 4982 8020 4512 7338) (6822 7628 8038 6924 6898 6852 4532 4552 8018 7328) (6820 7624 8048 6900 6918 4994 4520 7326 6854 5710) (6838 7624 8044 6832 4506 4470 4318 4308 8032 6922) (6834 6438 8050 7624 6840 8024 6584 4492 5716 6890) (7630 6432 8054 6836 6838 4498 8028 4528 5022 6578) (7630 6428 6838 4516 8054 8030 6606 6442 6580 5700) (7638 6426 6604 5710 6620 6836 6452 4502 8018 6582) (7628 6430 6440 5704 5000 4488 8042 6598 6576 5720) (4534 4478 7626 8042 6436 4322 6440 4968 6840 6592) (4992 7638 6448 5710 4530 4666 5720 4552 6838 6578) (4996 5706 7636 6438 6434 5716 4508 7646 4866 6836) (4992 4984 7628 4506 6432 4542 4888 5728 5704 8022) (7626 4976 5050 4554 6428 4882 4530 5706 4664 6920) (4992 7626 4514 6432 5704 6188 5380 6920 6836 6600) (5018 4988 4538 7624 4516 6196 6438 4802 4760 4318) (4934 4950 4500 5708 4644 7630 6806 6920 6438 6202) (4992 4492 4882 4896 7630 5704 4776 4650 6432 6920) (4886 4532 4944 4546 5078 4742 7632 5690 6430 6918) (4894 4966 5702 4550 4534 7628 6200 5384 6920 6420) (4462 4510 5706 4640 4850 5008 4382 4226 7636 5082) (5610 4486 5702 4856 4542 5020 7530 5000 6772 4870) (5594 4794 4776 4472 4526 4990 8038 7534 5714 6920) (5590 4748 4518 6642 4982 6844 5054 4456 6918 5944) (5612 4992 4730 4712 4526 4472 5712 5438 7516 6644) (5598 4988 4528 5708 4852 6846 5438 4894 4624 4510) (5594 4516 6846 4978 4494 5692 7532 8026 5434 4678) (5596 6844 5714 4976 4540 6922 5434 4874 8022 7836) (5610 5000 6848 4520 4512 8016 6926 5444 7530 6638) (6846 5600 4998 4504 5722 4474 5702 4666 6920 6640))) :lonset (quote (90 230 280 340 450 590 860 1110 1390 1500 1590 1620 1760 1870 2100 2130 2410 2490 2640 2920 2950 3170 3430 3510 3630 3680 3800 3940 4020 4140 4170 4370 4450 4560 4650 4730 4820 4960 5050 5190 5220 5440 5470 5580 5670 5700 5810 5980 6070 6180 6240 6410 6460 6550 6720 6730 7030 7200 7270 7430 7510 7570 7650 7710 7770 7880 8020 8050 8160 8250 8300 8530 8590 8670 8730 8790 9040 9270 9310 9550 9640 9780 10060 10290 10340 10540 10630 10690 10800 10860 11000 11110 11200 11320 11480 11590 11650 11730 11820 11900 11990 12130 12140 12270 12360 12640 12840 12930 13120 13150 13290 13350 13380 13660 13860 13890 14030 14170 14260 14370 14430 14650 14770 14910 15160 15190 15360 15430 15670 15760 15820 15870 15910 16070 16180 16240 16330 16440 16640 16700 16780 16840 16950 17230 17350 17410 17470 17690 17770 17780 17890 17940 18030 18140 18230 18250 18370 18450 18480 18680 18760 18850 18860 18990 19190 19270 19390 19470 19530 19780 19900 19980 20010 20290)) :ldur (quote ((140 140 140 140 140 140 140 140 140 140) (50 50 50 50 50 50 50 50 50 50) (60 60 60 60 60 60 60 60 60 60) (110 110 110 110 110 110 110 110 110 110) (140 140 140 140 140 140 140 140 140 140) (270 270 270 270 270 270 270 270 270 270) (250 250 250 250 250 250 250 250 250 250) (280 280 280 280 280 280 280 280 280 280) (110 110 110 110 110 110 110 110 110 110) (90 90 90 90 90 90 90 90 90 90) (30 30 30 30 30 30 30 30 30 30) (140 140 140 140 140 140 140 140 140 140) (110 110 110 110 110 110 110 110 110 110) (230 230 230 230 230 230 230 230 230 230) (30 30 30 30 30 30 30 30 30 30) (280 280 280 280 280 280 280 280 280 280) (80 80 80 80 80 80 80 80 80 80) (150 150 150 150 150 150 150 150 150 150) (280 280 280 280 280 280 280 280 280 280) (30 30 30 30 30 30 30 30 30 30) (220 220 220 220 220 220 220 220 220 220) (260 260 260 260 260 260 260 260 260 260) (80 80 80 80 80 80 80 80 80 80) (120 120 120 120 120 120 120 120 120 120) (50 50 50 50 50 50 50 50 50 50) (120 120 120 120 120 120 120 120 120 120) (140 140 140 140 140 140 140 140 140 140) (80 80 80 80 80 80 80 80 80 80) (120 120 120 120 120 120 120 120 120 120) (30 30 30 30 30 30 30 30 30 30) (200 200 200 200 200 200 200 200 200 200) (80 80 80 80 80 80 80 80 80 80) (110 110 110 110 110 110 110 110 110 110) (90 90 90 90 90 90 90 90 90 90) (80 80 80 80 80 80 80 80 80 80) (90 90 90 90 90 90 90 90 90 90) (140 140 140 140 140 140 140 140 140 140) (90 90 90 90 90 90 90 90 90 90) (140 140 140 140 140 140 140 140 140 140) (30 30 30 30 30 30 30 30 30 30) (220 220 220 220 220 220 220 220 220 220) (30 30 30 30 30 30 30 30 30 30) (110 110 110 110 110 110 110 110 110 110) (90 90 90 90 90 90 90 90 90 90) (30 30 30 30 30 30 30 30 30 30) (110 110 110 110 110 110 110 110 110 110) (170 170 170 170 170 170 170 170 170 170) (90 90 90 90 90 90 90 90 90 90) (110 110 110 110 110 110 110 110 110 110) (60 60 60 60 60 60 60 60 60 60) (170 170 170 170 170 170 170 170 170 170) (50 50 50 50 50 50 50 50 50 50) (90 90 90 90 90 90 90 90 90 90) (170 170 170 170 170 170 170 170 170 170) (10 10 10 10 10 10 10 10 10 10) (300 300 300 300 300 300 300 300 300 300) (170 170 170 170 170 170 170 170 170 170) (70 70 70 70 70 70 70 70 70 70) (160 160 160 160 160 160 160 160 160 160) (80 80 80 80 80 80 80 80 80 80) (60 60 60 60 60 60 60 60 60 60) (80 80 80 80 80 80 80 80 80 80) (60 60 60 60 60 60 60 60 60 60) (60 60 60 60 60 60 60 60 60 60) (110 110 110 110 110 110 110 110 110 110) (140 140 140 140 140 140 140 140 140 140) (30 30 30 30 30 30 30 30 30 30) (110 110 110 110 110 110 110 110 110 110) (90 90 90 90 90 90 90 90 90 90) (50 50 50 50 50 50 50 50 50 50) (230 230 230 230 230 230 230 230 230 230) (60 60 60 60 60 60 60 60 60 60) (80 80 80 80 80 80 80 80 80 80) (60 60 60 60 60 60 60 60 60 60) (60 60 60 60 60 60 60 60 60 60) (250 250 250 250 250 250 250 250 250 250) (230 230 230 230 230 230 230 230 230 230) (40 40 40 40 40 40 40 40 40 40) (240 240 240 240 240 240 240 240 240 240) (90 90 90 90 90 90 90 90 90 90) (140 140 140 140 140 140 140 140 140 140) (280 280 280 280 280 280 280 280 280 280) (230 230 230 230 230 230 230 230 230 230) (50 50 50 50 50 50 50 50 50 50) (200 200 200 200 200 200 200 200 200 200) (90 90 90 90 90 90 90 90 90 90) (60 60 60 60 60 60 60 60 60 60) (110 110 110 110 110 110 110 110 110 110) (60 60 60 60 60 60 60 60 60 60) (140 140 140 140 140 140 140 140 140 140) (110 110 110 110 110 110 110 110 110 110) (90 90 90 90 90 90 90 90 90 90) (120 120 120 120 120 120 120 120 120 120) (160 160 160 160 160 160 160 160 160 160) (110 110 110 110 110 110 110 110 110 110) (60 60 60 60 60 60 60 60 60 60) (80 80 80 80 80 80 80 80 80 80) (90 90 90 90 90 90 90 90 90 90) (80 80 80 80 80 80 80 80 80 80) (90 90 90 90 90 90 90 90 90 90) (140 140 140 140 140 140 140 140 140 140) (10 10 10 10 10 10 10 10 10 10) (130 130 130 130 130 130 130 130 130 130) (90 90 90 90 90 90 90 90 90 90) (280 280 280 280 280 280 280 280 280 280) (200 200 200 200 200 200 200 200 200 200) (90 90 90 90 90 90 90 90 90 90) (190 190 190 190 190 190 190 190 190 190) (30 30 30 30 30 30 30 30 30 30) (140 140 140 140 140 140 140 140 140 140) (60 60 60 60 60 60 60 60 60 60) (30 30 30 30 30 30 30 30 30 30) (280 280 280 280 280 280 280 280 280 280) (200 200 200 200 200 200 200 200 200 200) (30 30 30 30 30 30 30 30 30 30) (140 140 140 140 140 140 140 140 140 140) (140 140 140 140 140 140 140 140 140 140) (90 90 90 90 90 90 90 90 90 90) (110 110 110 110 110 110 110 110 110 110) (60 60 60 60 60 60 60 60 60 60) (220 220 220 220 220 220 220 220 220 220) (120 120 120 120 120 120 120 120 120 120) (140 140 140 140 140 140 140 140 140 140) (250 250 250 250 250 250 250 250 250 250) (30 30 30 30 30 30 30 30 30 30) (170 170 170 170 170 170 170 170 170 170) (70 70 70 70 70 70 70 70 70 70) (240 240 240 240 240 240 240 240 240 240) (90 90 90 90 90 90 90 90 90 90) (60 60 60 60 60 60 60 60 60 60) (50 50 50 50 50 50 50 50 50 50) (40 40 40 40 40 40 40 40 40 40) (160 160 160 160 160 160 160 160 160 160) (110 110 110 110 110 110 110 110 110 110) (60 60 60 60 60 60 60 60 60 60) (90 90 90 90 90 90 90 90 90 90) (110 110 110 110 110 110 110 110 110 110) (200 200 200 200 200 200 200 200 200 200) (60 60 60 60 60 60 60 60 60 60) (80 80 80 80 80 80 80 80 80 80) (60 60 60 60 60 60 60 60 60 60) (110 110 110 110 110 110 110 110 110 110) (280 280 280 280 280 280 280 280 280 280) (120 120 120 120 120 120 120 120 120 120) (60 60 60 60 60 60 60 60 60 60) (60 60 60 60 60 60 60 60 60 60) (220 220 220 220 220 220 220 220 220 220) (80 80 80 80 80 80 80 80 80 80) (10 10 10 10 10 10 10 10 10 10) (110 110 110 110 110 110 110 110 110 110) (50 50 50 50 50 50 50 50 50 50) (90 90 90 90 90 90 90 90 90 90) (110 110 110 110 110 110 110 110 110 110) (90 90 90 90 90 90 90 90 90 90) (20 20 20 20 20 20 20 20 20 20) (120 120 120 120 120 120 120 120 120 120) (80 80 80 80 80 80 80 80 80 80) (30 30 30 30 30 30 30 30 30 30) (200 200 200 200 200 200 200 200 200 200) (80 80 80 80 80 80 80 80 80 80) (90 90 90 90 90 90 90 90 90 90) (10 10 10 10 10 10 10 10 10 10) (130 130 130 130 130 130 130 130 130 130) (200 200 200 200 200 200 200 200 200 200) (80 80 80 80 80 80 80 80 80 80) (120 120 120 120 120 120 120 120 120 120) (80 80 80 80 80 80 80 80 80 80) (60 60 60 60 60 60 60 60 60 60) (250 250 250 250 250 250 250 250 250 250) (120 120 120 120 120 120 120 120 120 120) (80 80 80 80 80 80 80 80 80 80) (30 30 30 30 30 30 30 30 30 30) (280 280 280 280 280 280 280 280 280 280))) :lvel (quote ((68 64 59 56 55 49 49 47 46 46) (56 56 54 52 51 50 49 49 49 48) (59 56 56 54 52 52 49 48 48 47) (70 65 62 58 49 49 47 46 46 45) (69 57 54 52 52 51 51 46 46 45) (61 55 55 53 53 51 51 50 47 46) (62 61 52 47 47 47 46 46 46 46) (58 57 56 51 50 48 47 47 46 46) (61 61 58 54 52 50 48 47 45 44) (59 56 52 52 52 50 49 46 46 45) (64 58 55 53 50 49 47 46 46 44) (65 60 54 51 50 48 47 45 44 44) (57 54 52 51 48 47 47 47 46 46) (61 56 52 50 49 48 46 46 46 45) (61 60 51 50 50 48 47 47 47 46) (63 55 51 51 49 48 47 47 46 45) (62 61 60 59 58 58 57 52 51 49) (62 60 60 53 53 52 52 49 47 46) (61 59 56 54 52 51 51 48 47 46) (62 60 59 59 53 52 51 50 50 49) (61 58 57 52 52 50 47 46 46 45) (62 60 57 54 52 48 45 45 45 45) (69 62 56 55 53 51 50 48 45 44) (72 59 57 52 51 50 49 48 48 48) (77 66 55 54 53 52 49 48 47 46) (84 55 54 52 52 50 49 49 48 47) (61 49 49 49 49 48 48 47 47 46) (60 59 57 51 50 50 49 46 46 46) (68 67 64 58 52 49 48 47 46 46) (86 62 56 53 50 48 47 46 46 46) (81 54 54 50 50 46 46 45 45 45) (69 66 55 55 53 52 48 46 46 46) (67 58 56 56 55 51 50 50 48 48) (68 63 63 60 51 50 48 48 47 46) (79 74 69 58 53 52 49 48 47 46) (79 71 65 52 51 47 45 44 44 44) (60 55 53 49 49 48 47 46 45 44) (72 64 63 59 57 47 47 46 45 45) (72 72 55 53 49 48 48 47 47 47) (88 65 59 58 53 50 49 49 48 47) (74 64 57 50 49 48 47 47 46 46) (72 60 57 56 53 51 51 48 48 46) (76 60 59 55 54 51 49 48 47 46) (73 60 58 53 50 48 48 47 47 47) (69 66 63 57 54 51 49 48 48 47) (72 70 64 64 55 51 51 50 49 48) (63 58 56 56 53 50 50 47 46 45) (72 67 62 53 51 51 50 49 48 47) (71 69 67 51 50 50 49 48 46 45) (80 67 64 51 49 48 47 47 47 46) (70 65 58 57 52 48 46 46 46 46) (62 62 54 54 53 50 47 47 46 46) (62 61 57 52 52 51 49 47 47 46) (58 56 54 54 51 51 50 49 48 48) (72 72 59 57 50 49 49 47 46 46) (74 69 51 49 47 46 46 45 45 45) (83 62 52 51 49 47 45 45 45 45) (83 65 63 61 53 49 47 46 45 45) (69 61 59 59 50 47 45 44 44 44) (72 64 54 53 51 50 50 49 46 46) (76 67 61 59 57 54 50 48 47 46) (76 58 58 55 53 52 48 46 45 45) (75 58 55 53 51 50 49 49 48 47) (79 60 56 54 53 51 50 50 49 48) (80 57 55 54 51 49 49 47 47 46) (57 52 52 51 50 50 50 50 47 45) (71 57 56 52 51 49 47 47 47 46) (82 58 55 53 48 46 46 46 46 45) (92 61 55 52 51 51 50 47 46 46) (78 54 53 53 51 50 50 50 47 46) (70 48 48 47 47 46 46 46 46 45) (74 57 55 54 51 50 50 50 49 48) (79 56 52 50 49 48 48 48 47 46) (78 54 52 52 51 49 48 47 47 46) (77 58 58 52 51 50 48 48 48 47) (57 57 52 52 52 48 48 48 47 47) (82 59 56 49 49 48 48 48 47 45) (82 58 57 54 52 51 47 47 45 45) (67 54 51 50 47 46 45 45 44 44) (65 60 60 55 52 51 50 49 49 47) (67 56 55 55 52 52 50 49 48 47) (59 59 54 53 52 50 49 48 47 47) (51 51 50 49 48 48 48 47 47 46) (57 54 53 53 49 49 48 47 46 46) (51 49 48 48 48 47 46 46 46 46) (53 53 50 50 50 50 48 47 46 45) (53 52 50 50 50 49 48 48 47 46) (53 52 51 49 49 48 48 48 48 47) (60 57 54 50 48 48 48 47 47 47) (54 54 52 51 50 50 49 48 47 47) (55 55 51 51 50 50 49 49 49 46) (58 56 56 54 53 52 52 49 48 48) (66 63 62 56 54 52 49 49 48 48) (62 61 58 55 55 54 53 52 50 48) (53 53 52 51 51 51 48 48 47 47) (64 61 56 55 53 52 52 50 48 45) (59 58 57 55 53 51 51 50 48 46) (69 65 58 56 53 53 50 50 50 48) (72 55 53 53 51 51 49 48 46 46) (66 55 55 52 49 48 47 47 46 46) (57 55 53 50 48 47 47 47 46 46) (68 55 53 52 48 47 47 47 46 45) (66 52 51 50 48 47 46 45 45 45) (73 58 51 50 49 47 47 46 46 45) (64 53 51 50 49 47 46 46 45 44) (65 55 55 50 48 48 47 46 46 45) (75 66 58 57 53 48 47 46 45 45) (63 57 56 55 55 48 48 48 44 44) (67 67 56 54 54 53 44 44 44 44) (74 63 58 56 55 49 48 47 45 44) (71 62 56 55 53 51 50 49 47 47) (67 65 60 55 53 53 52 49 47 47) (72 71 54 48 48 48 47 46 46 45) (77 74 60 58 49 48 48 47 46 45) (82 79 76 56 53 52 47 47 46 46) (77 70 66 51 49 48 48 47 46 45) (57 57 55 55 52 50 48 48 48 47) (77 61 60 58 54 52 49 48 47 47) (81 72 71 68 58 51 49 49 49 47) (77 73 69 63 62 56 55 52 51 50) (74 61 57 53 53 51 50 48 47 46) (75 70 65 55 52 50 48 47 45 45) (77 71 56 55 50 48 48 47 47 47) (73 62 56 52 51 49 48 47 47 46) (73 72 57 56 55 54 52 48 47 46) (75 61 56 55 50 49 49 48 47 47) (71 70 60 60 58 53 52 51 50 50) (58 55 54 54 53 53 50 49 48 47) (66 64 58 57 55 55 54 53 51 49) (67 58 57 56 53 51 49 48 48 48) (71 61 59 54 53 51 48 48 47 47) (67 65 60 56 53 51 48 47 47 46) (61 59 58 58 56 55 53 48 48 47) (57 56 53 53 51 50 50 49 49 48) (77 59 54 53 51 49 49 47 47 45) (100 51 50 49 49 49 48 47 46 46) (93 72 57 52 52 49 47 47 47 46) (72 54 52 51 51 49 48 47 46 46) (66 50 50 49 48 47 46 46 46 46) (72 55 53 50 50 48 48 47 46 46) (83 54 53 51 51 49 49 48 48 47) (80 52 52 51 50 49 48 48 48 47) (64 51 51 49 48 48 47 47 46 46) (64 62 60 55 54 53 51 49 49 48) (78 61 52 50 50 50 48 47 46 45) (78 60 50 50 49 49 49 47 47 47) (58 56 51 51 50 47 46 46 45 45) (60 56 55 53 51 49 48 48 47 45) (57 55 53 53 52 51 50 50 48 47) (61 54 51 51 50 49 49 49 47 47) (62 52 51 50 49 48 48 48 47 47) (57 53 52 49 48 48 47 46 46 46) (51 51 50 49 49 49 48 48 47 46) (53 49 49 49 49 48 47 47 46 46) (59 51 50 50 50 50 50 46 46 45) (59 58 53 53 51 51 50 46 46 44) (54 53 51 51 49 49 48 46 46 45) (60 53 51 49 48 45 45 44 44 44) (55 54 53 48 47 46 45 45 45 45) (56 54 53 46 46 45 45 44 44 44) (60 56 54 49 47 47 47 47 45 44) (64 57 55 49 48 48 47 47 45 44) (59 54 51 51 51 47 45 45 44 44) (52 51 50 49 48 47 46 46 45 45) (61 52 51 51 49 48 46 46 45 45) (58 52 51 51 50 48 47 46 45 44) (58 54 50 48 48 47 46 46 45 45) (67 54 53 53 51 49 48 48 47 47) (58 50 49 48 48 47 46 46 46 46) (54 53 52 52 49 48 46 45 45 45) (58 51 51 49 48 45 45 45 44 44) (64 56 52 48 47 46 46 46 45 45) (53 52 52 50 49 47 46 46 45 45))) :loffset (quote ((0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0))) :lchan (quote ((1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "good bit of perfect girl-cs.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 84 42) (om-make-point 70 50) (let ((newobj (load-sdif-file (om-make-pathname :directory (quote (:absolute "Users" "samdvorin" "Desktop" "music" "audiosculpt" "ChordSeqs")) :device nil :host nil :name "good bit of perfect girl-cs" :type "sdif")))) (when newobj) newobj) "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 400 500))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 1 2 nil 0) (3 1 2 0 nil 0) (5 0 4 0 nil 0) (16 1 5 0 nil 0) (14 1 5 1 nil 0) (7 0 6 1 nil 0) (24 0 23 0 nil 0) (25 0 24 0 nil 0))) nil 6.19))
