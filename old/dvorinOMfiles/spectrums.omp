; OM File Header - Saved 2021/10/28 9:17:19
; (6.19 :patc (om-make-point 251 12) (om-make-point 317 23) (om-make-point 881 702) "" 183 0 "2021/10/18 17:41:02" "2021/10/19 11:31:22")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "spectrums" (quote ((let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 310 182) (om-make-point 192 102) (list (list 1.017 1.028 1.052 1.056 1.297 1.301 1.329 1.413 1.414 1.457 1.516 1.621 1.623 1.625 1.626 1.628 1.668 1.853 1.934 1.957) (list 2.005 2.235 2.437 2.445 2.459 2.491 2.52 2.523 2.526 2.54 2.579 2.651 2.905 2.915 2.972) (list 3.007 3.01 3.014 3.024 3.063 3.067 3.07 3.074 3.092 3.23 3.446 3.502 3.519 3.523 3.539 3.58 3.837 3.954 3.963 3.986) (list 4.009 4.019 4.028 4.089 4.093 4.433 4.542 4.953 4.959 4.965 4.97) (list 5.011 5.016 5.022 5.028 5.034 5.081 5.086 5.098 5.445 5.521 5.534 5.54 5.547 5.56) (list 6.0 6.007 6.021 6.028 6.035 6.528 6.536 6.551 6.558 6.981) (list 7.029 7.037 7.045 7.062 7.086 7.508 7.534 7.542 7.56 7.568 7.595 7.844) (list 8.009 8.056 8.065 8.102 8.121 8.495 8.554 8.564) (list 9.032 9.042 9.063 9.074 9.448 9.547 9.558 9.58) (list 10.044 10.056 10.068 10.079 10.091 10.103 10.495 10.532 10.544 10.556 10.568 10.58 10.593) (list 11.03 11.068 11.081 11.525 11.565 11.578 11.605 11.986) (list 12.014 12.028 12.07 12.084 12.098 12.112 12.126 12.452 12.553 12.568 12.582 12.597 12.611 12.626 12.788 12.817) (list 13.056 13.071 13.086 13.117 13.548 13.564 13.579 13.595 13.611 13.626 13.705) (list 14.009 14.042 14.058 14.091 14.487 14.537 14.571 14.588 14.604 14.621) (list 15.067 15.085 15.102 15.545 15.562 15.58) (list 16.056 16.093 16.111 16.583 16.622) (list 17.069 17.109 17.59) (list 18.043 18.126 18.147 18.507 18.55 18.657) (list 19.071 19.517 19.63 19.812) (list 20.043 20.066 20.182 20.252 20.464) (list 21.506 21.606 21.656) (list 22.136 22.368 22.627 22.758 22.838 22.864) (list 23.023 23.05 23.13 23.264 23.643) (list 24.056) (list 27.347)) "((1.017 1.028 1.052 1.056 1.297 1.301 1.329 1.413 1.414 1.457 1.516 1.621 1.623 1.625 1.626 1.628 1.668 1.853 1.934 1.957)( 2.005 2.235 2.437 2.445 2.459 2.491 2.52 2.523 2.526 2.54 2.579 2.651 2.905 2.915 2.972)( 3.007 3.01 3.014 3.024 3.063 3.067 3.07 3.074 3.092 3.23 3.446 3.502 3.519 3.523 3.539 3.58 3.837 3.954 3.963 3.986)( 4.009 4.019 4.028 4.089 4.093 4.433 4.542 4.953 4.959 4.965 4.97)( 5.011 5.016 5.022 5.028 5.034 5.081 5.086 5.098 5.445 5.521 5.534 5.54 5.547 5.56)( 6.0 6.007 6.021 6.028 6.035 6.528 6.536 6.551 6.558 6.981 )(7.029 7.037 7.045 7.062 7.086 7.508 7.534 7.542 7.56 7.568 7.595 7.844 )(8.009 8.056 8.065 8.102 8.121 8.495 8.554 8.564 )(9.032 9.042 9.063 9.074 9.448 9.547 9.558 9.58 )(10.044 10.056 10.068 10.079 10.091 10.103 10.495 10.532 10.544 10.556 10.568 10.58 10.593)( 11.03 11.068 11.081 11.525 11.565 11.578 11.605 11.986)( 12.014 12.028 12.07 12.084 12.098 12.112 12.126 12.452 12.553 12.568 12.582 12.597 12.611 12.626 12.788 12.817 )(13.056 13.071 13.086 13.117 13.548 13.564 13.579 13.595 13.611 13.626 13.705 )(14.009 14.042 14.058 14.091 14.487 14.537 14.571 14.588 14.604 14.621)( 15.067 15.085 15.102 15.545 15.562 15.58)( 16.056 16.093 16.111 16.583 16.622 )(17.069 17.109 17.59 )(18.043 18.126 18.147 18.507 18.55 18.657)( 19.071 19.517 19.63 19.812)( 20.043 20.066 20.182 20.252 20.464)( 21.506 21.606 21.656)( 22.136 22.368 22.627 22.758 22.838 22.864)( 23.023 23.05 23.13 23.264 23.643)( 24.056)( 27.347))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "spectrums list" (om-load-patch-abs1 "spectrums list" (quote ((let ((box (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 13 213) (om-make-point 857 30) (list 1 1.62 2.54 3.84 4.54 5.56 6.0 7.03 8.55 9.58 10.09 11.58 12.57 13.61 14.62 15.54 16.58 17.07 18.13 19.63 20.07 21.66 22.63 23.05 24.06 27.35) " (1 1.62 2.54 3.84 4.54 5.56 6.0 7.03 8.55 9.58 10.09 11.58 12.57 13.61 14.62 15.54 16.58 17.07 18.13 19.63 20.07 21.66 22.63 23.05 24.06 27.35)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 9 177) (om-make-point 846 30) (list 1 1.63 2.54 3.07 4.01 5.09 6.56 7.09 8.56 9.55 10.59 11.6 12.79 13.06 14.54 15.1 16.62 17.11 18.51 19.52 20.46 21.66 22.14 23.02 24.06 27.35) "(1 1.63 2.54 3.07 4.01 5.09 6.56 7.09 8.56 9.55 10.59 11.6 12.79 13.06 14.54 15.1 16.62 17.11 18.51 19.52 20.46 21.66 22.14 23.02 24.06 27.35)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 5 144) (om-make-point 846 30) (list 1 1.85 2.65 3.95 4.09 5.1 6.53 7.51 8.55 9.55 10.08 11.58 12.07 13.56 14.6 15.56 16.09 17.59 18.51 19.07 20.04 21.66 22.86 23.26 24.06 27.35) "(1 1.85 2.65 3.95 4.09 5.1 6.53 7.51 8.55 9.55 10.08 11.58 12.07 13.56 14.6 15.56 16.09 17.59 18.51 19.07 20.04 21.66 22.86 23.26 24.06 27.35)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 6 113) (om-make-point 856 30) (list 1 1.03 2.9 3.07 4.96 5.09 6.55 7.84 8.06 9.45 10.58 11.58 12.57 13.56 14.09 15.1 16.09 17.59 18.13 19.63 20.18 21.61 22.37 23.02 24.06 27.35) "(1 1.03 2.9 3.07 4.96 5.09 6.55 7.84 8.06 9.45 10.58 11.58 12.57 13.56 14.09 15.1 16.09 17.59 18.13 19.63 20.18 21.61 22.37 23.02 24.06 27.35)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 10 79) (om-make-point 856 30) (list 1 1.41 2.46 3.95 4.95 5.55 6.03 7.84 8.1 9.55 10.54 11.07 12.1 13.55 14.57 15.54 16.06 17.11 18.13 19.07 20.46 21.61 22.37 23.05 24.06 27.35) "(1 1.41 2.46 3.95 4.95 5.55 6.03 7.84 8.1 9.55 10.54 11.07 12.1 13.55 14.57 15.54 16.06 17.11 18.13 19.07 20.46 21.61 22.37 23.05 24.06 27.35)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 8 53) (om-make-point 856 30) (list 1 1.96 2.49 3.01 4.09 5.54 6.03 7.09 8.5 9.07 10.59 11.08 12.03 13.59 14.09 15.1 16.06 17.11 18.04 19.52 20.04 21.61 22.84 23.13 24.06 27.35) "(1 1.96 2.49 3.01 4.09 5.54 6.03 7.09 8.5 9.07 10.59 11.08 12.03 13.59 14.09 15.1 16.06 17.11 18.04 19.52 20.04 21.61 22.84 23.13 24.06 27.35)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote nil) 6.19 nil "" (om-make-point 585 223) (om-make-point 635 618)) (quote nil) (om-make-point 326 417) nil nil nil "spectrums list"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" (list 1)) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 57 586) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "get small series" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil))) (om-make-point 37 498) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "NTH-RANDOM" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 79 343) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil) (om-load-inputfun (quote input-funbox) "anything" "RETARD" nil))) (om-make-point 97 464) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 157 191) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "for" (quote forloop) (quote ((om-load-inputfun (quote input-funbox) "low value" "FROM" 0) (om-load-inputfun (quote input-funbox) "high value" "TO" 10))) (om-make-point 62 190) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 135 92) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 72 91) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 5 40) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 170 570) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 57 551) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((2 0 0 0 nil 0) (0 0 1 0 nil 0) (3 0 2 0 nil 0) (6 0 2 1 nil 0) (4 0 3 1 nil 0) (5 0 4 0 nil 0) (6 0 5 0 nil 0) (1 1 7 0 nil 0) (1 0 8 0 nil 0))) 1 "get small series" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 706 562) (om-make-point 7167 30) (list (list 1.02 1.03 1.05 1.06 1.3 1.3 1.33 1.41 1.41 1.46 1.52 1.62 1.62 1.62 1.63 1.63 1.67 1.85 1.93 1.96) (list 2.0 2.23 2.44 2.45 2.46 2.49 2.52 2.52 2.53 2.54 2.58 2.65 2.9 2.91 2.97) (list 3.01 3.01 3.01 3.02 3.06 3.07 3.07 3.07 3.09 3.23 3.45 3.5 3.52 3.52 3.54 3.58 3.84 3.95 3.96 3.99) (list 4.01 4.02 4.03 4.09 4.09 4.43 4.54 4.95 4.96 4.96 4.97) (list 5.01 5.02 5.02 5.03 5.03 5.08 5.09 5.1 5.45 5.52 5.53 5.54 5.55 5.56) (list 6.0 6.01 6.02 6.03 6.03 6.53 6.54 6.55 6.56 6.98) (list 7.03 7.04 7.05 7.06 7.09 7.51 7.53 7.54 7.56 7.57 7.59 7.84) (list 8.01 8.06 8.06 8.1 8.12 8.5 8.55 8.56) (list 9.03 9.04 9.06 9.07 9.45 9.55 9.56 9.58) (list 10.04 10.06 10.07 10.08 10.09 10.1 10.5 10.53 10.54 10.56 10.57 10.58 10.59) (list 11.03 11.07 11.08 11.52 11.56 11.58 11.6 11.99) (list 12.01 12.03 12.07 12.08 12.1 12.11 12.13 12.45 12.55 12.57 12.58 12.6 12.61 12.63 12.79 12.82) (list 13.06 13.07 13.09 13.12 13.55 13.56 13.58 13.59 13.61 13.63 13.71) (list 14.01 14.04 14.06 14.09 14.49 14.54 14.57 14.59 14.6 14.62) (list 15.07 15.08 15.1 15.54 15.56 15.58) (list 16.06 16.09 16.11 16.58 16.62) (list 17.07 17.11 17.59) (list 18.04 18.13 18.15 18.51 18.55 18.66) (list 19.07 19.52 19.63 19.81) (list 20.04 20.07 20.18 20.25 20.46) (list 21.51 21.61 21.66) (list 22.14 22.37 22.63 22.76 22.84 22.86) (list 23.02 23.05 23.13 23.26 23.64) (list 24.06) (list 27.35)) "((1.02 1.03 1.05 1.06 1.3 1.3 1.33 1.41 1.41 1.46 1.52 1.62 1.62 1.62 1.63 1.63 1.67 1.85 1.93 1.96)(2.0 2.23 2.44 2.45 2.46 2.49 2.52 2.52 2.53 2.54 2.58 2.65 2.9 2.91 2.97)(3.01 3.01 3.01 3.02 3.06 3.07 3.07 3.07 3.09 3.23 3.45 3.5 3.52 3.52 3.54 3.58 3.84 3.95 3.96 3.99)(4.01 4.02 4.03 4.09 4.09 4.43 4.54 4.95 4.96 4.96 4.97)(5.01 5.02 5.02 5.03 5.03 5.08 5.09 5.1 5.45 5.52 5.53 5.54 5.55 5.56)(6.0 6.01 6.02 6.03 6.03 6.53 6.54 6.55 6.56 6.98)(7.03 7.04 7.05 7.06 7.09 7.51 7.53 7.54 7.56 7.57 7.59 7.84)(8.01 8.06 8.06 8.1 8.12 8.5 8.55 8.56)(9.03 9.04 9.06 9.07 9.45 9.55 9.56 9.58)(10.04 10.06 10.07 10.08 10.09 10.1 10.5 10.53 10.54 10.56 10.57 10.58 10.59)(11.03 11.07 11.08 11.52 11.56 11.58 11.6 11.99)(12.01 12.03 12.07 12.08 12.1 12.11 12.13 12.45 12.55 12.57 12.58 12.6 12.61 12.63 12.79 12.82)(13.06 13.07 13.09 13.12 13.55 13.56 13.58 13.59 13.61 13.63 13.71)(14.01 14.04 14.06 14.09 14.49 14.54 14.57 14.59 14.6 14.62)(15.07 15.08 15.1 15.54 15.56 15.58)(16.06 16.09 16.11 16.58 16.62)(17.07 17.11 17.59)(18.04 18.13 18.15 18.51 18.55 18.66)(19.07 19.52 19.63 19.81)(20.04 20.07 20.18 20.25 20.46)(21.51 21.61 21.66)(22.14 22.37 22.63 22.76 22.84 22.86)(23.02 23.05 23.13 23.26 23.64)(24.06)(27.35))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 415 554) (quote "((0.83 0.99) $(1.0 1.02 1.03 1.05 1.06 1.3 1.3 1.33 1.41 1.41 1.46 1.52 1.62 1.62 1.62 1.63 1.63 1.67 1.85 1.93 1.96)$(2.0 2.23 2.44 2.45 2.46 2.49 2.52 2.52 2.53 2.54 2.58 2.65 2.9 2.91 2.97)$(3.01 3.01 3.01 3.02 3.06 3.07 3.07 3.07 3.09 3.23 3.45 3.5 3.52 3.52 3.54 3.58 3.84 3.95 3.96 3.99)$(4.01 4.02 4.03 4.09 4.09 4.43 4.54 4.95 4.96 4.96 4.97)$(5.01 5.02 5.02 5.03 5.03 5.08 5.09 5.1 5.45 5.52 5.53 5.54 5.55 5.56)$(6.0 6.01 6.02 6.03 6.03 6.53 6.54 6.55 6.56 6.98)$(7.03 7.04 7.05 7.06 7.09 7.51 7.53 7.54 7.56 7.57 7.59 7.84)$(8.01 8.06 8.06 8.1 8.12 8.5 8.55 8.56)$(9.03 9.04 9.06 9.07 9.45 9.55 9.56 9.58)$(10.04 10.06 10.07 10.08 10.09 10.1 10.5 10.53 10.54 10.56 10.57 10.58 10.59)$(11.03 11.07 11.08 11.52 11.56 11.58 11.6 11.99)$(12.01 12.03 12.07 12.08 12.1 12.11 12.13 12.45 12.55 12.57 12.58 12.6 12.61 12.63 12.79 12.82)$(13.06 13.07 13.09 13.12 13.55 13.56 13.58 13.59 13.61 13.63 13.71)$(14.01 14.04 14.06 14.09 14.49 14.54 14.57 14.59 14.6 14.62)$(15.07 15.08 15.1 15.54 15.56 15.58)$(16.06 16.09 16.11 16.58 16.62)$(17.07 17.11 17.59)$(18.04 18.13 18.15 18.51 18.55 18.66)$(19.07 19.52 19.63 19.81)$(20.04 20.07 20.18 20.25 20.46)$(21.51 21.61 21.66)$(22.14 22.37 22.63 22.76 22.84 22.86)$(23.02 23.05 23.13 23.26 23.64)$(24.06)$(27.35)") "" (om-make-point 849 10) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REMOVE-DUP" (quote remove-dup) (quote ((om-load-inputfun (quote input-funbox) "list" "LIST" (list 1 2 3 4)) (om-load-inputfun (quote input-funbox) "equality test (function or function name)" "TEST" (quote eq)) (om-load-inputfun (quote input-funbox) "an integer" "DEPTH" 1))) (om-make-point 220 255) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1) (om-load-inputfun (quote input-funbox) "number of decimals" "DECIMALS" 3))) (om-make-point 202 182) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 368 96) (om-make-point 63 30) 92.17857 "92.17857" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "get big series" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil) (om-load-inputfun (quote input-funbox) "" "input1" nil))) (om-make-point 84 155) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 4))) (om-make-point 206 255) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input1" 1 (om-make-point 192 39) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 134 294) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 157 191) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "for" (quote forloop) (quote ((om-load-inputfun (quote input-funbox) "low value" "FROM" 0) (om-load-inputfun (quote input-funbox) "high value" "TO" 10))) (om-make-point 62 190) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 135 92) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 72 91) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 5 40) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 207 400) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 94 381) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((3 0 0 0 nil 0) (1 0 0 1 nil 0) (0 0 2 0 nil 0) (4 0 3 0 nil 0) (7 0 3 1 nil 0) (5 0 4 1 nil 0) (6 0 5 0 nil 0) (7 0 6 0 nil 0) (2 1 8 0 nil 0) (2 0 9 0 nil 0))) 1 "get big series" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "on 92.17857") "" (om-make-point 336 28) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 12" (quote list) (quote nil) (om-make-point 67 21) (om-make-point 253 105) (list 76.093056 90.90953 92.07216 93.78984 94.77008 96.98523 97.32192 119.54084 119.95585 122.47637 130.2097 130.36022 134.33515 139.71662 149.39897 149.57167 149.74456 149.91765 150.09095 153.7767 170.82315 178.28314 180.35468 184.78362 205.97989 224.62265 225.40251 226.70825 229.60758 232.27547 232.54398 232.81276 234.16144 237.70465 244.38744 267.74078 268.67032 273.99893 277.18265 277.50302 277.8238 278.78833 282.3537 282.68008 283.00684 283.33395 284.97528 297.7642 317.66443 322.8439 324.33923 324.71414 326.2181 330.00858 353.69446 364.4793 365.3224 367.43866 369.56723 370.4221 371.27896 376.89697 377.33264 408.6418 418.67676 456.57025 457.09802 457.62637 458.15533 461.87537 462.4092 462.94376 463.47885 464.01462 468.32288 468.86423 469.9488 501.93607 508.9428 510.12006 510.70972 511.30005 512.4827 553.08594 553.7252 555.0061 555.64765 556.2899 601.7525 602.44806 603.8416 604.5396 643.4539 647.9295 648.67847 649.4283 650.9305 653.19037 692.03107 694.43366 695.2364 696.84455 697.6501 700.07215 723.08747 738.28107 742.5579 743.41626 746.8595 748.5871 783.0857 788.5325 789.4439 832.53077 833.4931 835.4211 836.3868 870.8979 880.0 881.01716 883.0551 925.8875 926.9577 928.02924 929.102 930.1759 931.25116 967.43866 970.7974 971.91956 973.04297 974.1678 975.2938 976.4211 1016.7104 1020.2402 1021.41944 1062.3374 1066.0256 1067.2578 1069.7266 1104.8947 1107.4505 1108.7306 1112.5798 1113.8659 1115.1535 1116.4424 1117.7329 1147.8298 1157.1495 1158.4872 1159.8263 1161.1669 1162.5092 1163.8529 1178.7372 1181.4638 1203.505 1204.8963 1206.289 1209.0792 1248.8285 1250.2721 1251.7173 1253.1642 1254.6127 1256.0629 1263.3392 1291.3756 1294.3628 1295.8589 1298.8565 1335.3723 1340.0084 1343.108 1344.6607 1346.215 1347.7711 1388.8673 1390.4727 1392.08 1432.8711 1434.5274 1436.1856 1479.9777 1483.4011 1485.1159 1528.633 1532.169 1573.4254 1577.065 1621.4024 1663.1389 1670.842 1672.7734 1705.9501 1709.8963 1719.8015 1757.9679 1799.0586 1809.4804 1826.281 1847.5012 1849.6371 1860.3518 1866.8106 1886.3212 1982.3916 1991.5735 1996.1802 2040.4804 2061.8062 2085.7632 2097.846 2105.1294 2107.5625 2122.2217 2124.675 2132.0513 2144.4024 2179.3665 2217.461 2520.8474) "(76.093056 90.90953 92.07216 93.78984 94.77008 96.98523 97.32192 119.54084 119.95585 122.47637 130.2097 130.36022 134.33515 139.71662 149.39897 149.57167 149.74456 149.91765 150.09095 153.7767 170.82315 178.28314 180.35468 184.78362 205.97989 224.62265 225.40251 226.70825 229.60758 232.27547 232.54398 232.81276 234.16144 237.70465 244.38744 267.74078 268.67032 273.99893 277.18265 277.50302 277.8238 278.78833 282.3537 282.68008 283.00684 283.33395 284.97528 297.7642 317.66443 322.8439 324.33923 324.71414 326.2181 330.00858 353.69446 364.4793 365.3224 367.43866 369.56723 370.4221 371.27896 376.89697 377.33264 408.6418 418.67676 456.57025 457.09802 457.62637 458.15533 461.87537 462.4092 462.94376 463.47885 464.01462 468.32288 468.86423 469.9488 501.93607 508.9428 510.12006 510.70972 511.30005 512.4827 553.08594 553.7252 555.0061 555.64765 556.2899 601.7525 602.44806 603.8416 604.5396 643.4539 647.9295 648.67847 649.4283 650.9305 653.19037 692.03107 694.43366 695.2364 696.84455 697.6501 700.07215 723.08747 738.28107 742.5579 743.41626 746.8595 748.5871 783.0857 788.5325 789.4439 832.53077 833.4931 835.4211 836.3868 870.8979 880.0 881.01716 883.0551 925.8875 926.9577 928.02924 929.102 930.1759 931.25116 967.43866 970.7974 971.91956 973.04297 974.1678 975.2938 976.4211 1016.7104 1020.2402 1021.41944 1062.3374 1066.0256 1067.2578 1069.7266 1104.8947 1107.4505 1108.7306 1112.5798 1113.8659 1115.1535 1116.4424 1117.7329 1147.8298 1157.1495 1158.4872 1159.8263 1161.1669 1162.5092 1163.8529 1178.7372 1181.4638 1203.505 1204.8963 1206.289 1209.0792 1248.8285 1250.2721 1251.7173 1253.1642 1254.6127 1256.0629 1263.3392 1291.3756 1294.3628 1295.8589 1298.8565 1335.3723 1340.0084 1343.108 1344.6607 1346.215 1347.7711 1388.8673 1390.4727 1392.08 1432.8711 1434.5274 1436.1856 1479.9777 1483.4011 1485.1159 1528.633 1532.169 1573.4254 1577.065 1621.4024 1663.1389 1670.842 1672.7734 1705.9501 1709.8963 1719.8015 1757.9679 1799.0586 1809.4804 1826.281 1847.5012 1849.6371 1860.3518 1866.8106 1886.3212 1982.3916 1991.5735 1996.1802 2040.4804 2061.8062 2085.7632 2097.846 2105.1294 2107.5625 2122.2217 2124.675 2132.0513 2144.4024 2179.3665 2217.461 2520.8474)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 2 1 nil 0) (0 0 3 0 nil 0) (7 0 6 0 nil 0) (9 0 7 0 nil 0) (11 0 9 0 nil 0) (8 0 9 1 nil 0))) nil 6.19))
