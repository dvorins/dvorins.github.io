; OM File Header - Saved 2023/10/10 17:09:28
; (6.19 :patc (om-make-point 604 10) (om-make-point 50 50) (om-make-point 693 506) "" 183 0 "2022/02/02 20:18:30" "2022/02/02 20:28:02")
; End File Header
; External resources 
; (list (list (quote :sdif) "#P\"../../../audiosculpt/ChordSeqs/2.2 sample 2-cs.sdif\"" "#P\"../../../audiosculpt/ChordSeqs/2.2 sample-cs.sdif\""))
(in-package :om)(load-lib-for (quote ("Repmus")))(setf *om-current-persistent* (om-load-patch1 "jan string quartet stuff" (quote ((let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 389 247) (om-make-point 207 125) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8006 7322 8514 6118 8584 8082) (7388 6116 6182 8088 7320 8586 8020 8520) (7386 8084 6882 6182 8584) (6884 8084 7790 6178) (7384 8084 6884 6184 8584) (8002 7388 6178 8088 6096 7302 8502 8584 7344) (8084 7386 8584 6178 6882 7330) (8086 6176 7384 6876 7304 7278) (7774 8086 6880) (7386 8088 6182 8584 6882 7304) (7388 6178 8088 8584 8008 7306 6102 8492))) :lonset (quote (0 690 4080 7720 10560 13570 16160 19110 19960 23150 26700 29650)) :ldur (quote ((690 690 690 690 690 690) (3390 3390 3390 3390 3390 3390 3390 3390) (3640 3640 3640 3640 3640) (2840 2840 2840 2840) (3010 3010 3010 3010 3010) (2590 2590 2590 2590 2590 2590 2590 2590 2590) (2950 2950 2950 2950 2950 2950) (850 850 850 850 850 850) (3190 3190 3190) (3550 3550 3550 3550 3550 3550) (2950 2950 2950 2950 2950 2950 2950 2950))) :lvel (quote ((44 44 43 43 41 40) (69 54 50 47 46 45 44 42) (65 63 62 54 47) (58 56 50 40) (72 66 66 56 44) (57 52 50 48 48 45 44 43 41) (51 50 46 46 45 41) (46 42 41 41 40 40) (48 46 42) (63 57 48 43 41 40) (65 52 50 45 45 45 43 42))) :loffset (quote ((0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0))) :lchan (quote ((1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.19 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 201 23) (om-make-point 952 283) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "AS->OM 2" (quote as->om) (quote ((om-load-inputfun (quote input-funbox) "Analyse" "ANALYSE" nil) (om-load-inputfun (quote input-funbox) "vel min" "VMIN" 40) (om-load-inputfun (quote input-funbox) "vel max" "VMAX" 100) (om-load-inputfun (quote input-funbox) "delta" "DELTA" 5) (om-load-inputfun (quote input-funbox) "midic min" "MMIN" 4000) (om-load-inputfun (quote input-funbox) "midic max" "MMAX" 8600) (om-load-inputfun (quote input-funbox) "approx" "APPROX" 8) (om-load-inputfun (quote input-funbox) "poly. density" "NPOLY" 10))) (om-make-point 368 148) nil (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8006 7322 8514 6118 8584 8082) (7388 6116 6182 8088 7320 8586 8020 8520) (7386 8084 6882 6182 8584) (6884 8084 7790 6178) (7384 8084 6884 6184 8584) (8002 7388 6178 8088 6096 7302 8502 8584 7344) (8084 7386 8584 6178 6882 7330) (8086 6176 7384 6876 7304 7278) (7774 8086 6880) (7386 8088 6182 8584 6882 7304) (7388 6178 8088 8584 8008 7306 6102 8492))) :lonset (quote (0 690 4080 7720 10560 13570 16160 19110 19960 23150 26700 29650)) :ldur (quote ((690 690 690 690 690 690) (3390 3390 3390 3390 3390 3390 3390 3390) (3640 3640 3640 3640 3640) (2840 2840 2840 2840) (3010 3010 3010 3010 3010) (2590 2590 2590 2590 2590 2590 2590 2590 2590) (2950 2950 2950 2950 2950 2950) (850 850 850 850 850 850) (3190 3190 3190) (3550 3550 3550 3550 3550 3550) (2950 2950 2950 2950 2950 2950 2950 2950))) :lvel (quote ((44 44 43 43 41 40) (69 54 50 47 46 45 44 42) (65 63 62 54 47) (58 56 50 40) (72 66 66 56 44) (57 52 50 48 48 45 44 43 41) (51 50 46 46 45 41) (46 42 41 41 40 40) (48 46 42) (63 57 48 43 41 40) (65 52 50 45 45 45 43 42))) :loffset (quote ((0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0))) :lchan (quote ((1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "2.2 sample 2-cs.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 280 23) (om-make-point 70 50) (let ((newobj (load-sdif-file (om-make-pathname :directory (quote (:absolute "Users" "samdvorin" "Desktop" "music" "audiosculpt" "ChordSeqs")) :device nil :host nil :name "2.2 sample 2-cs" :type "sdif")))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 400 500) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 59 232) (om-make-point 207 125) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8584 7388 8288 7286 7346 7792 7080 6066 8086 7234) (8584 8092 7294 7392 6856 7338 8332 6068) (8584 8292 7796 7388 8086 7326 7294 7074 6174 6852) (8584 7390 6858 7322 7288 6066) (8584 7388 8088 7300 6176 7790 8286 6852 6072) (8584 8088 7388 8286 7316 7788 7072 6070) (7300 8482 8092 6850 7404 6060 8052 7436 7254 6682) (7788 8288 7088 7332 8090 7386 7268 5870) (7386 8586 8088 6176 7300 7334 7786 7254))) :lonset (quote (0 1330 2070 2760 3490 7990 10150 10750 11140 12330)) :ldur (quote ((1330 1330 1330 1330 1330 1330 1330 1330 1330 1330) (740 740 740 740 740 740 740 740) (690 690 690 690 690 690 690 690 690 690) (730 730 730 730 730 730) (4500 4500 4500 4500 4500 4500 4500 4500 4500) (2160 2160 2160 2160 2160 2160 2160 2160) (600 600 600 600 600 600 600 600 600 600) (390 390 390 390 390 390 390 390) (1190 1190 1190 1190 1190 1190 1190 1190))) :lvel (quote ((82 52 45 45 44 43 42 42 41 40) (65 48 47 46 46 45 42 42) (75 71 59 50 48 44 44 43 42 41) (62 53 51 45 45 43) (77 60 49 45 45 42 41 41 41) (63 48 47 46 44 43 40 40) (46 44 44 42 41 41 40 40 40 40) (58 47 46 44 42 42 42 42) (100 79 56 53 44 43 40 40))) :loffset (quote ((0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0))) :lchan (quote ((1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.19 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((0) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.19 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((1) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.19 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((2) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.19 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((3) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.19 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((4) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.19 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((5) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.19 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((6) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.19 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 201 23) (om-make-point 952 283) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "AS->OM" (quote as->om) (quote ((om-load-inputfun (quote input-funbox) "Analyse" "ANALYSE" nil) (om-load-inputfun (quote input-funbox) "vel min" "VMIN" 40) (om-load-inputfun (quote input-funbox) "vel max" "VMAX" 100) (om-load-inputfun (quote input-funbox) "delta" "DELTA" 5) (om-load-inputfun (quote input-funbox) "midic min" "MMIN" 4000) (om-load-inputfun (quote input-funbox) "midic max" "MMAX" 8600) (om-load-inputfun (quote input-funbox) "approx" "APPROX" 8) (om-load-inputfun (quote input-funbox) "poly. density" "NPOLY" 10))) (om-make-point 38 133) nil (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8584 7388 8288 7286 7346 7792 7080 6066 8086 7234) (8584 8092 7294 7392 6856 7338 8332 6068) (8584 8292 7796 7388 8086 7326 7294 7074 6174 6852) (8584 7390 6858 7322 7288 6066) (8584 7388 8088 7300 6176 7790 8286 6852 6072) (8584 8088 7388 8286 7316 7788 7072 6070) (7300 8482 8092 6850 7404 6060 8052 7436 7254 6682) (7788 8288 7088 7332 8090 7386 7268 5870) (7386 8586 8088 6176 7300 7334 7786 7254))) :lonset (quote (0 1330 2070 2760 3490 7990 10150 10750 11140 12330)) :ldur (quote ((1330 1330 1330 1330 1330 1330 1330 1330 1330 1330) (740 740 740 740 740 740 740 740) (690 690 690 690 690 690 690 690 690 690) (730 730 730 730 730 730) (4500 4500 4500 4500 4500 4500 4500 4500 4500) (2160 2160 2160 2160 2160 2160 2160 2160) (600 600 600 600 600 600 600 600 600 600) (390 390 390 390 390 390 390 390) (1190 1190 1190 1190 1190 1190 1190 1190))) :lvel (quote ((82 52 45 45 44 43 42 42 41 40) (65 48 47 46 46 45 42 42) (75 71 59 50 48 44 44 43 42 41) (62 53 51 45 45 43) (77 60 49 45 45 42 41 41 41) (63 48 47 46 44 43 40 40) (46 44 44 42 41 41 40 40 40 40) (58 47 46 44 42 42 42 42) (100 79 56 53 44 43 40 40))) :loffset (quote ((0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0))) :lchan (quote ((1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "2.2 sample-cs.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 86 49) (om-make-point 70 50) (let ((newobj (load-sdif-file (om-make-pathname :directory (quote (:absolute "Users" "samdvorin" "Desktop" "music" "audiosculpt" "ChordSeqs")) :device nil :host nil :name "2.2 sample-cs" :type "sdif")))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 400 500) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (2 0 1 0 nil 0) (4 0 3 0 nil 0) (5 0 4 0 nil 0))) nil 6.19))
