; OM File Header - Saved 2024/02/06 13:56:41
; (7.01 :patc (om-make-point 442 45) (om-make-point 0 44) (om-make-point 1800 1037) "" 183 0 "2023/07/05 16:00:28" "2023/07/11 15:52:54")
; End File Header
(in-package :om)(load-lib-for (quote ("Alea")))(setf *om-current-persistent* (om-load-patch1 "bassline for woman" (quote ((let ((box (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 1241 464) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 725 486) (om-make-point 48 30) 9000 "9000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 610 442) (om-make-point 48 30) 1500 "1500" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 3" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 583 595) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400 1500 1600 1700 1800 1900 2000 2100 2200 2300 2400 2500 2600 2700 2800 2900)) (quote (4999 5520 4755 5755 4496 6016 4265 6245 4020 6502 3750 6782 3498 7027 3234 7292 2981 7514 2740 7754 2488 8021 2227 8270 1988 8516 1740 8782 1500 9000)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "BPF 3") newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "BPF-SCALE" (quote bpf-scale) (quote ((om-load-inputfun (quote input-funbox) "a BPF" "SELF" nil) (om-load-inputkeyword (quote input-keyword) "xmin" "x1" (quote :x1) nil nil) (om-load-inputkeyword (quote input-keyword) "xmax" "x2" (quote :x2) nil nil) (om-load-inputkeyword (quote input-keyword) "ymin" "y1" (quote :y1) nil nil) (om-load-inputkeyword (quote input-keyword) "ymax" "y2" (quote :y2) nil nil))) (om-make-point 550 491) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "BROWNIAN2" (quote alea::brownian2) (quote ((om-load-inputfun (quote input-funbox) "first value" "NC" 6000) (om-load-inputfun (quote input-funbox) "lower boundary" "BINF" 8400) (om-load-inputfun (quote input-funbox) "upper boundary" "BSUP" 7200) (om-load-inputfun (quote input-funbox) "sequence length" "LONG" 30) (om-load-inputfun (quote input-funbox) "bandwidth of the gaussian distribution" "SIGMA" 1.4))) (om-make-point 693 156) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 484 260) (om-make-point 209 149) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400 1500 1600 1700 1800 1900 2000 2100 2200 2300 2400 2500 2600 2700 2800 2900)) (quote (6000 10816 3735 12989 1347 15401 -792 17520 -3056 19899 -5552 22481 -7890 24748 -10329 27198 -12668 29255 -14894 31475 -17224 33945 -19642 36245 -21854 38520 -24146 40981 -26364 42998)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "BPF 2") newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 44) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 160) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 858 626) (om-make-point 130 70) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (121 (((4 4) (4)) ((4 4) (3.0 1)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (1.0 3)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4)) ((4 4) (4)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (1.0 3)) ((4 4) (4.0)) ((4 4) (1.0 3)) ((4 4) (3.0 1)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (1.0 3)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (1.0 3)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (1.0 3)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (1.0 3)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (3.0 1)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (1.0 3)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (1.0 3)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (2.0 2)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (2.0 2)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (2.0 -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4999)) :ldur (quote (1500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5520)) :ldur (quote (375)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4755)) :ldur (quote (1125)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5755)) :ldur (quote (1500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4496)) :ldur (quote (1500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6016)) :ldur (quote (1125)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4265)) :ldur (quote (1125)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6245)) :ldur (quote (375)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4020)) :ldur (quote (1125)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6502)) :ldur (quote (1500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3750)) :ldur (quote (1125)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6782)) :ldur (quote (1125)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3498)) :ldur (quote (1125)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7027)) :ldur (quote (1500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3234)) :ldur (quote (375)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7292)) :ldur (quote (1500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2981)) :ldur (quote (1125)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7514)) :ldur (quote (1125)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2740)) :ldur (quote (1500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7754)) :ldur (quote (750)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2488)) :ldur (quote (750)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8021)) :ldur (quote (1500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 160) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.01 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 44) (om-make-point 1234 579) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 22)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 40)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 1101 276) (om-make-point 287 144) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 2 3 4 5 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22)) (quote (32 30 28 37 35 31 26 19 17 27 34 29 20 18 11 8 6 24 22 17 7 4)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "BPF") newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 44) (om-make-point 978 511))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 990 391) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 4))) (om-make-point 1157 579) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((8 2 0 0 nil 0) (4 0 3 0 nil 0) (6 0 4 0 nil 0) (2 0 4 3 nil 0) (1 0 4 4 nil 0) (5 0 6 2 nil 0) (10 0 7 1 nil 0) (3 2 7 2 nil 0) (0 0 10 0 nil 0))) nil 7.01))
