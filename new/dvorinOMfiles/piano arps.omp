; OM File Header - Saved 2024/02/06 13:56:41
; (7.01 :patc (om-make-point 369 76) (om-make-point 50 50) (om-make-point 500 400) "" 183 0 "2022/02/08 12:03:32" "2022/07/20 15:54:37")
; End File Header
; External resources 
; (list (list (quote :sdif) "#P\"../../../audiosculpt/ChordSeqs/New Recording 80-cs.sdif\"" "#P\"../../../audiosculpt/ChordSeqs/New Recording 79-cs.sdif\""))
(in-package :om)(load-lib-for (quote ("Repmus")))(setf *om-current-persistent* (om-load-patch1 "piano arps" (quote ((let ((box (om-load-editor-box1 "dragged 2" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 208 148) (om-make-point 60 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (6492 7194 5288 7462 4088 6878 8532 8252 3384 8084 5990 8678 8548 7696 8406 9488 7900 8914 8800 9570 9404 9316 4578 9646 9606 9224 9126 7158 6790 5726)) :ldur (quote (26240 26240 26240 26240 26240 26240 26240 26240 26240 26240 26240 26240 26240 26240 26240 26240 26240 26240 26240 26240 26240 26240 26240 26240 26240 26240 26240 26240 26240 26240)) :lvel (quote (87 81 79 73 70 63 59 59 56 54 53 50 50 48 45 44 44 43 43 42 42 42 42 41 41 41 41 41 41 41)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 0 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "dragged" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 301 175) (om-make-point 60 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (6490 5792 6992 4590 7378 3388 3688 7968 8756 9530 8402 9540 8908 9422 9192 9182 9052 8586 8198 7696 9644 9636 9034 5480 4978 9914 9836 9316 9304 8998)) :ldur (quote (36520 36520 36520 36520 36520 36520 36520 36520 36520 36520 36520 36520 36520 36520 36520 36520 36520 36520 36520 36520 36520 36520 36520 36520 36520 36520 36520 36520 36520 36520)) :lvel (quote (100 77 70 63 59 57 51 48 47 45 44 43 43 42 42 42 42 42 42 42 41 41 41 41 41 40 40 40 40 40)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 0 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "New Recording 80-cs.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 335 53) (om-make-point 70 50) (let ((newobj (load-sdif-file (om-make-pathname :directory (quote (:absolute "Users" "samdvorin" "Desktop" "music" "audiosculpt" "ChordSeqs")) :device nil :host nil :name "New Recording 80-cs" :type "sdif")))) (when newobj) newobj) "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 400 500))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 150 253) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6492 7194 5288 7462 4088 6878 8532 8252 3384 8084 5990 8678 8548 7696 8406 9488 7900 8914 8800 9570 9404 9316 4578 9646 9606 9224 9126 7158 6790 5726) (6490 5792 6992 4590 7378 3388 3688 7968 8756 9530 8402 9540 8908 9422 9192 9182 9052 8586 8198 7696 9644 9636 9034 5480 4978 9914 9836 9316 9304 8998))) :lonset (quote (1010 27250 63770)) :ldur (quote ((26240 26240 26240 26240 26240 26240 26240 26240 26240 26240 26240 26240 26240 26240 26240 26240 26240 26240 26240 26240 26240 26240 26240 26240 26240 26240 26240 26240 26240 26240) (36520 36520 36520 36520 36520 36520 36520 36520 36520 36520 36520 36520 36520 36520 36520 36520 36520 36520 36520 36520 36520 36520 36520 36520 36520 36520 36520 36520 36520 36520))) :lvel (quote ((87 81 79 73 70 63 59 59 56 54 53 50 50 48 45 44 44 43 43 42 42 42 42 41 41 41 41 41 41 41) (100 77 70 63 59 57 51 48 47 45 44 43 43 42 42 42 42 42 42 42 41 41 41 41 41 40 40 40 40 40))) :loffset (quote ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))) :lchan (quote ((1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.19 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 23) (om-make-point 959 371) 0 1000 nil 13/100 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "AS->OM" (quote as->om) (quote ((om-load-inputfun (quote input-funbox) "Analyse" "ANALYSE" nil) (om-load-inputfun (quote input-funbox) "vel min" "VMIN" 40) (om-load-inputfun (quote input-funbox) "vel max" "VMAX" 100) (om-load-inputfun (quote input-funbox) "delta" "DELTA" 5) (om-load-inputfun (quote input-funbox) "midic min" "MMIN" 2000) (om-load-inputfun (quote input-funbox) "midic max" "MMAX" 10000) (om-load-inputfun (quote input-funbox) "approx" "APPROX" 8) (om-load-inputfun (quote input-funbox) "poly. density" "NPOLY" 30))) (om-make-point 91 141) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "New Recording 79-cs.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 83 39) (om-make-point 70 50) (let ((newobj (load-sdif-file (om-make-pathname :directory (quote (:absolute "Users" "samdvorin" "Desktop" "music" "audiosculpt" "ChordSeqs")) :device nil :host nil :name "New Recording 79-cs" :type "sdif")))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 400 500) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 3 0 nil 0) (2 0 4 0 nil 0))) nil 6.19))
