; OM File Header - Saved 2023/02/15 12:03:17
; (7.01 :patc (om-make-point 334 10) (om-make-point 169 44) (om-make-point 1101 814) "" 183 0 "2021/10/19 22:03:05" "2023/02/15 12:03:17")
; End File Header
(in-package :om)(load-lib-for (quote ("OMTristan")))(setf *om-current-persistent* (om-load-patch1 "Bb chords" (quote ((let ((box (om-load-editor-box1 "dragged 4" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 600 335) (om-make-point 60 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (6946 7158 7346 7516 7670)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (75 100 111 100 75)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "dragged 3" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 686 643) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8564 8856 9106 9324 9518) (8454 8788 9068 9308 9520))) :lonset (quote (0 958 1958)) :ldur (quote ((1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000))) :lvel (quote ((75 100 111 100 75) (75 100 111 100 75))) :loffset (quote ((0 0 0 0 0) (0 0 0 0 0))) :lchan (quote ((1 1 1 1 1) (1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0) (0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.01 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 23) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 3" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 335 416) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5872 6854 8166 8486 9312) (6314 7642 8384 8902 9300) (6230 7476 8194 8700 9090) (3376 4594 5302 5804 6192))) :lonset (quote (0 1000 2000 3000 4000)) :ldur (quote ((1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000))) :lvel (quote ((100 111 75 100 75) (75 100 111 100 75) (75 100 111 100 75) (75 100 111 100 75))) :loffset (quote ((0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0))) :lchan (quote ((1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.01 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 23) (om-make-point 712 354) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FMO" (quote fmo) (quote ((om-load-inputfun (quote input-funbox) "Carrier" "CARRIER" 3600) (om-load-inputfun (quote input-funbox) "Moduler" "MODUL" 4000) (om-load-inputfun (quote input-funbox) "Index" "INDEX" 1) (om-load-inputfunmenu1 (quote input-funmenu) "Unit" "UNIT" (quote midic) (list (list "Midics" (quote (quote midic))) (list "Freqs" (quote (quote freq))))) (om-load-inputfunmenu1 (quote input-funmenu) "Type" "TYPE" (quote chordseq) (list (list "Chord" (quote (quote chord))) (list "ChordSeq" (quote (quote chordseq))))))) (om-make-point 361 334) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "dragged 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 694 554) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6878 6460 7862 8716 7650) (6726 6342 7940 8842 7674) (6580 6232 8006 8946 7694) (6438 6126 8064 9036 7712))) :lonset (quote (0 1000 2000 3000 4000)) :ldur (quote ((1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000))) :lvel (quote ((100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100))) :loffset (quote ((0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0))) :lchan (quote ((1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.01 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 23) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 4" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 695 469) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4948 5432 5344 6364 6856 9106 4630 9068) (4464 8050 5136 8110 9056 5630 6072 7310 5774))) :lonset (quote (0 1000 2000)) :ldur (quote ((1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000))) :lvel (quote ((100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100))) :loffset (quote ((0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0))) :lchan (quote ((1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "dragged" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 689 316) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4562 7784 5176 7898 8812 6974 5884 7792) (4548 7826 5170 7930 8850 6832 5912 7730))) :lonset (quote (0 1000 2000)) :ldur (quote ((1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000))) :lvel (quote ((100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100))) :loffset (quote ((0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0))) :lchan (quote ((1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.01 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 23) (om-make-point 639 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 692 394) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8822 8768 9670 9626 9514 7442 8102 9386 9210 9158 8892 7806 8948) (8010 9158 9556 8432 8774 8890 7158 8498 8274))) :lonset (quote (0 1000 2000)) :ldur (quote ((1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000))) :lvel (quote ((100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100))) :loffset (quote ((0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0))) :lchan (quote ((1 1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.01 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 0 23) (om-make-point 327 276) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD 7" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 473 600) (om-make-point 60 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (6854 8384 8194 5302)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point 400 23) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD 6" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 335 589) (om-make-point 60 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (8062 7448 6518 4886 7346)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point 400 23) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 8" (quote list) (quote nil) (om-make-point 26 703) (om-make-point 147 30) (list 6854 8384 8194 5302) " (6854 8384 8194 5302)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 32 563) (om-make-point 189 30) (list 8062 7448 6518 4886 7346) "(8062 7448 6518 4886 7346) " nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD 5" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 187 378) (om-make-point 60 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (4464 8050 5136 8110 9056 5630 6072 7310 5774)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point 400 23) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD 4" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 543 604) (om-make-point 60 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (7632 6560 6322 3412)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point 400 23) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD 3" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 61 381) (om-make-point 60 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (4948 5432 5344 6364 6856 9106 4630 9068)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point 400 23) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD 2" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 410 600) (om-make-point 60 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (6156 5922 8160 9182 7744 6994)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point 400 23) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 95 210) (om-make-point 307 30) (list 4464 8050 5136 8110 9056 5630 6072 7310 5774) "(4464 8050 5136 8110 9056 5630 6072 7310 5774) " nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 32 635) (om-make-point 143 30) (list 7632 6560 6322 3412) "(7632 6560 6322 3412)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 27 247) (om-make-point 279 30) (list 4948 5432 5344 6364 6856 9106 4630 9068) " (4948 5432 5344 6364 6856 9106 4630 9068) " nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 29 600) (om-make-point 221 30) (list 6156 5922 8160 9182 7744 6994) " (6156 5922 8160 9182 7744 6994)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 432 76) (om-make-point 601 223) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((9174 8952 4236 9162 8888 8934 9220 9192 9124 8970) (9472 8914 8276) (5650 9124 4396 8156) (5384) (7632 6560 6322 3412) (4948 5432 5344 6364 6856 9106 4630 9068) (4464 8050 5136 8110 9056 5630 6072 7310 5774) (6156 5922 8160 9182 7744 6994) (7562 4812 9250 8752) (7254) (7820 8444 5596 8708 8260) (6564 8848) (9154 8796 8192 7120) (8550) (8372) (8318 9220 9176 9064) (6992 7652) (8936 8760 8708 8442) (7356 8498) (7120 7738) (6542 8044 8134 3792) (7822 7976 7460) (8656) (8378 9182) (6702) (8126) (8388 8314) (5292) (7652 8058) (7242 5886) (8606 7906 9160 7370) (8898 6128 3720) (7826 8946) (6520 8196 7742 8810) (3832 8386) (7122 8660) (3774 7462 8496 8064 5590) (6994 8258 7366) (7240 9144 8554 8132) (6564) (8382) (7560 8708) (9106) (7982) (8324 8440) (6708 8048 7824) (4342 8800) (6514 8060) (5684 7246 5886) (7828 8386) (7124 4588 8762) (7906 8494) (5358 8264) (8062 7448 6518 4886 7346) (7830) (6854 8384 8194 5302) (8128) (8556) (7900) (5286) (8320) (6516 7740 8056 7108 8496) (7560 7358 7814 9144) (6364 8324) (6124 6678) (7462 8708 8126) (8256 4584) (8440 8056 5952) (7988 7746) (8200 8130) (4584 8266) (8442 7134) (7908) (4582) (6708 6138 5688) (7650 8124) (6992 8498) (7462 8058) (7124 4588) (8262) (4344) (8194 7740 8610) (7358) (8324) (5684 7828 7984) (8384 8128) (8060) (6182) (4582) (5346) (7128) (5698) (6998) (7652 4584 8128) (7462 6992 6710 5686) (5932 7748 4580) (7984 7234) (8056 7554) (7908 6848) (5682 7826) (7000 6714) (7656 7462) (4586) (6852) (7556 4580) (7358) (4582) (4584) (6854 7908) (5348 7652 5914) (4582 6184) (7462 6710) (5924) (7248) (5348 4582) (6854) (4906 6558) (4580) (7356) (4582) (5660 5324) (3838) (4200) (6854) (3742 7460 6706) (5924) (7358) (4580) (7248 4194) (4582) (6848) (6538 4200 4582) (7356) (6848) (7248) (5654) (4582) (6846) (6540) (5652) (5348) (6536) (5650) (6534) (6152) (6538) (5650) (6148))) :lonset (quote (110 140 200 230 280 310 340 370 400 430 450 480 510 540 570 600 620 650 680 710 740 790 820 850 880 910 940 960 990 1020 1080 1110 1130 1160 1190 1220 1250 1280 1300 1330 1360 1390 1420 1450 1470 1530 1590 1620 1640 1670 1700 1730 1790 1810 1840 1870 1900 1930 1960 1980 2010 2040 2100 2130 2150 2180 2210 2240 2380 2410 2440 2470 2520 2550 2580 2610 2640 2660 2690 2720 2750 2780 2860 2890 2920 2950 2980 3000 3030 3060 3090 3150 3170 3200 3260 3290 3320 3370 3430 3570 3630 3660 3680 3710 3770 3830 3850 3940 4000 4050 4080 4220 4250 4310 4340 4370 4420 4450 4510 4540 4590 4620 4650 4680 4710 4730 4760 4880 4900 4990 5050 5070 5300 5390 5500 5640 5670 5700 5810 5980 6040 6210 6320 6350 6430 6550 6690 6770 6860)) :ldur (quote ((120 170 540 570 200 200 60 150 150 200) (60 140 90) (4340 30 30 30) (110) (90 120 120 30) (6550 140 1500 1870 1390 650 30 90) (6520 790 140 230 140 30 90 30 30) (5840 2830 540 340 60 60) (880 50 310 110) (190) (150 150 30 120 770) (140 60) (370 60 170 60) (80) (140) (190 20 140 50) (570 260) (60 260 170 400) (1330 450) (400 140) (4220 30 30 340) (290 320 340) (230) (140 30) (590) (930) (20 50) (150) (1500 60) (170 30) (280 540 140 30) (170 20 20) (340 120) (30 510 710 60) (30 60) (340 30) (3340 820 30 30 30) (1190 140 20) (260 200 200 30) (120) (30) (590 230) (170) (650) (320 260) (990 370 90) (30 30) (20 20) (30 2580 30) (970 120) (710 30 30) (740 60) (1240 50) (60 30 30 30 30) (30) (1390 540 280 30) (140) (170) (20) (30) (30) (30 170 90 140 110) (1160 680 30 80) (4730 310) (30 30) (310 90 120) (110 30) (80 310 30) (60 60) (30 80) (30 110) (20 80) (630) (30) (400 60 30) (390 110) (340 80) (370 230) (200 30) (140) (30) (140 110 50) (880) (110) (30 510 60) (30 50) (190) (30) (90) (790) (1500) (20) (30) (340 30 60) (250 250 200 30) (480 110 30) (110 20) (30 120) (230 140) (30 90) (170 170) (190 110) (30) (200) (140 30) (560) (30) (60) (190 140) (140 90 140) (30 30) (120 90) (120) (420) (110 30) (140) (30 30) (30) (140) (50) (910 290) (60) (110) (140) (2150 140 110) (150) (120) (20) (340 60) (30) (50) (570 1790 60) (30) (80) (80) (170) (30) (30) (260) (140) (30) (50) (110) (110) (90) (200) (60) (60))) :lvel (quote ((52 49 48 47 47 46 44 44 44 44) (42 42 42) (55 41 41 40) (42) (41 41 41 40) (57 54 53 49 48 45 42 41) (100 48 45 44 43 43 42 41 41) (46 45 44 43 42 42) (48 46 45 43) (44) (45 44 44 43 43) (44 43) (44 43 43 43) (43) (43) (44 43 43 43) (47 45) (43 43 43 43) (44 43) (45 44) (48 44 43 43) (45 44 43) (43) (43 42) (43) (43) (42 42) (45) (44 42) (43 42) (42 42 41 41) (42 42 42) (42 41) (43 42 42 41) (42 41) (43 41) (46 42 41 41 41) (44 42 41) (43 41 41 41) (42) (40) (42 41) (41) (41) (42 41) (44 41 41) (43 41) (44 41) (47 43 41) (42 41) (43 41 40) (41 40) (46 40) (41 41 41 41 40) (40) (44 41 41 40) (41) (41) (40) (41) (40) (43 42 41 41 40) (42 42 41 40) (51 41) (44 41) (42 40 40) (40 40) (41 41 40) (40 40) (40 40) (41 40) (40 40) (41) (42) (44 42 42) (42 41) (43 40) (42 41) (42 41) (41) (42) (41 41 40) (42) (40) (43 41 40) (40 40) (41) (41) (41) (43) (41) (41) (40) (41 41 40) (42 41 41 41) (42 40 40) (41 40) (40 40) (41 41) (41 40) (41 41) (41 41) (40) (41) (41 41) (42) (41) (40) (42 40) (42 41 41) (41 40) (40 40) (40) (42) (41 40) (41) (41 40) (40) (40) (40) (43 42) (41) (40) (41) (43 41 41) (41) (40) (40) (41 40) (40) (40) (43 41 40) (40) (40) (40) (41) (40) (40) (42) (41) (40) (40) (41) (40) (40) (40) (40) (40))) :loffset (quote ((0 0 0 0 0 0 0 0 0 0) (0 0 0) (0 0 0 0) (0) (0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0) (0) (0 0 0 0 0) (0 0) (0 0 0 0) (0) (0) (0 0 0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0 0) (0 0 0) (0) (0 0) (0) (0) (0 0) (0) (0 0) (0 0) (0 0 0 0) (0 0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0 0 0) (0 0 0) (0 0 0 0) (0) (0) (0 0) (0) (0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0 0 0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0 0 0 0 0) (0 0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0 0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0 0 0) (0) (0) (0 0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0 0 0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0 0) (0 0) (0 0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0 0 0) (0) (0) (0) (0 0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1 1 1 1 1 1 1 1 1 1) (1 1 1) (1 1 1 1) (1) (1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1) (1) (1 1 1 1 1) (1 1) (1 1 1 1) (1) (1) (1 1 1 1) (1 1) (1 1 1 1) (1 1) (1 1) (1 1 1 1) (1 1 1) (1) (1 1) (1) (1) (1 1) (1) (1 1) (1 1) (1 1 1 1) (1 1 1) (1 1) (1 1 1 1) (1 1) (1 1) (1 1 1 1 1) (1 1 1) (1 1 1 1) (1) (1) (1 1) (1) (1) (1 1) (1 1 1) (1 1) (1 1) (1 1 1) (1 1) (1 1 1) (1 1) (1 1) (1 1 1 1 1) (1) (1 1 1 1) (1) (1) (1) (1) (1) (1 1 1 1 1) (1 1 1 1) (1 1) (1 1) (1 1 1) (1 1) (1 1 1) (1 1) (1 1) (1 1) (1 1) (1) (1) (1 1 1) (1 1) (1 1) (1 1) (1 1) (1) (1) (1 1 1) (1) (1) (1 1 1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1 1 1) (1 1 1 1) (1 1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1) (1) (1 1) (1) (1) (1) (1 1) (1 1 1) (1 1) (1 1) (1) (1) (1 1) (1) (1 1) (1) (1) (1) (1 1) (1) (1) (1) (1 1 1) (1) (1) (1) (1 1) (1) (1) (1 1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0 0 0) (0 0 0) (0 0 0 0) (0) (0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0) (0) (0 0 0 0 0) (0 0) (0 0 0 0) (0) (0) (0 0 0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0 0) (0 0 0) (0) (0 0) (0) (0) (0 0) (0) (0 0) (0 0) (0 0 0 0) (0 0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0 0 0) (0 0 0) (0 0 0 0) (0) (0) (0 0) (0) (0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0 0 0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0 0 0 0 0) (0 0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0 0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0 0 0) (0) (0) (0 0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0 0 0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0 0) (0 0) (0 0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0 0 0) (0) (0) (0) (0 0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.01 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 10 nil 1000 0 (om-make-point 976 516) (om-make-point 400 23) 0 1 (quote :interval) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 126 88) (om-make-point 60 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (3412 3720 3742 3774 3792 3832 3838 4194 4200 4236 4342 4344 4396 4464 4580 4582 4584 4586 4588 4630 4812 4886 4906 4948 5136 5286 5292 5302 5324 5344 5346 5348 5358 5384 5432 5590 5596 5630 5650 5652 5654 5660 5682 5684 5686 5688 5698 5774 5886 5914 5922 5924 5932 5952 6072 6124 6128 6138 6148 6152 6156 6182 6184 6322 6364 6514 6516 6518 6520 6534 6536 6538 6540 6542 6558 6560 6564 6678 6702 6706 6708 6710 6714 6846 6848 6852 6854 6856 6992 6994 6998 7000 7108 7120 7122 7124 7128 7134 7234 7240 7242 7246 7248 7254 7310 7346 7356 7358 7366 7370 7448 7460 7462 7554 7556 7560 7562 7632 7650 7652 7656 7738 7740 7742 7744 7746 7748 7814 7820 7822 7824 7826 7828 7830 7900 7906 7908 7976 7982 7984 7988 8044 8048 8050 8056 8058 8060 8062 8064 8110 8124 8126 8128 8130 8132 8134 8156 8160 8192 8194 8196 8200 8256 8258 8260 8262 8264 8266 8276 8314 8318 8320 8324 8372 8378 8382 8384 8386 8388 8440 8442 8444 8494 8496 8498 8550 8554 8556 8606 8610 8656 8660 8708 8752 8760 8762 8796 8800 8810 8848 8888 8898 8914 8934 8936 8946 8952 8970 9056 9064 9068 9106 9124 9144 9154 9160 9162 9174 9176 9182 9192 9220 9250 9472)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000)) :lvel (quoteloffset (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point 400 23) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 450))) (om-make-point 214 79) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 83 27) (om-make-point 178 52) (list 3862 4170 4192 4224 4242 4282 4288 4644 4650 4686 4792 4794 4846 4914 5030 5032 5034 5036 5038 5080 5262 5336 5356 5398 5586 5736 5742 5752 5774 5794 5796 5798 5808 5834 5882 6040 6046 6080 6100 6102 6104 6110 6132 6134 6136 6138 6148 6224 6336 6364 6372 6374 6382 6402 6522 6574 6578 6588 6598 6602 6606 6632 6634 6772 6814 6964 6966 6968 6970 6984 6986 6988 6990 6992 7008 7010 7014 7128 7152 7156 7158 7160 7164 7296 7298 7302 7304 7306 7442 7444 7448 7450 7558 7570 7572 7574 7578 7584 7684 7690 7692 7696 7698 7704 7760 7796 7806 7808 7816 7820 7898 7910 7912 8004 8006 8010 8012 8082 8100 8102 8106 8188 8190 8192 8194 8196 8198 8264 8270 8272 8274 8276 8278 8280 8350 8356 8358 8426 8432 8434 8438 8494 8498 8500 8506 8508 8510 8512 8514 8560 8574 8576 8578 8580 8582 8584 8606 8610 8642 8644 8646 8650 8706 8708 8710 8712 8714 8716 8726 8764 8768 8770 8774 8822 8828 8832 8834 8836 8838 8890 8892 8894 8944 8946 8948 9000 9004 9006 9056 9060 9106 9110 9158 9202 9210 9212 9246 9250 9260 9298 9338 9348 9364 9384 9386 9396 9402 9420 9506 9514 9518 9556 9574 9594 9604 9610 9612 9624 9626 9632 9642 9670 9700 9922) "(3862 4170 4192 4224 4242 4282 4288 4644 4650 4686 4792 4794 4846 4914 5030 5032 5034 5036 5038 5080 5262 5336 5356 5398 5586 5736 5742 5752 5774 5794 5796 5798 5808 5834 5882 6040 6046 6080 6100 6102 6104 6110 6132 6134 6136 6138 6148 6224 6336 6364 6372 6374 6382 6402 6522 6574 6578 6588 6598 6602 6606 6632 6634 6772 6814 6964 6966 6968 6970 6984 6986 6988 6990 6992 7008 7010 7014 7128 7152 7156 7158 7160 7164 7296 7298 7302 7304 7306 7442 7444 7448 7450 7558 7570 7572 7574 7578 7584 7684 7690 7692 7696 7698 7704 7760 7796 7806 7808 7816 7820 7898 7910 7912 8004 8006 8010 8012 8082 8100 8102 8106 8188 8190 8192 8194 8196 8198 8264 8270 8272 8274 8276 8278 8280 8350 8356 8358 8426 8432 8434 8438 8494 8498 8500 8506 8508 8510 8512 8514 8560 8574 8576 8578 8580 8582 8584 8606 8610 8642 8644 8646 8650 8706 8708 8710 8712 8714 8716 8726 8764 8768 8770 8774 8822 8828 8832 8834 8836 8838 8890 8892 8894 8944 8946 8948 9000 9004 9006 9056 9060 9106 9110 9158 9202 9210 9212 9246 9250 9260 9298 9338 9348 9364 9384 9386 9396 9402 9420 9506 9514 9518 9556 9574 9594 9604 9610 9612 9624 9626 9632 9642 9670 9700 9922)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 2 0 nil 0) (10 0 8 1 nil 0) (11 0 9 1 nil 0) (16 0 12 1 nil 0) (17 0 13 1 nil 0) (18 0 14 1 nil 0) (19 0 15 1 nil 0) (22 0 21 1 nil 0) (23 0 22 0 nil 0))) nil 7.01))
